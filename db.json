{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/spfk/source/CNAME","path":"CNAME","modified":0,"renderable":1},{"_id":"themes/spfk/source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/css/loading-style.css","path":"css/loading-style.css","modified":0,"renderable":1},{"_id":"themes/spfk/source/css/showshare.css","path":"css/showshare.css","modified":0,"renderable":1},{"_id":"themes/spfk/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/spfk/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/spfk/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/spfk/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/spfk/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/spfk/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/Head_portrait.jpg","path":"img/Head_portrait.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/coderwall.png","path":"img/coderwall.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/delicious.png","path":"img/delicious.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/douban.png","path":"img/douban.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/facebook.png","path":"img/facebook.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/github.png","path":"img/github.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/google.png","path":"img/google.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/img-err.png","path":"img/img-err.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/img-loading.png","path":"img/img-loading.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/instagram.png","path":"img/instagram.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/linkedin.png","path":"img/linkedin.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/mail.png","path":"img/mail.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/pinboard.png","path":"img/pinboard.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/pinterest.png","path":"img/pinterest.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/qq.png","path":"img/qq.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/rss.png","path":"img/rss.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/segmentfault.png","path":"img/segmentfault.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/stackoverflow.png","path":"img/stackoverflow.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/twitter.png","path":"img/twitter.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/wechat.png","path":"img/wechat.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/weibo.png","path":"img/weibo.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/zhihu.png","path":"img/zhihu.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/js/TweenMax.js","path":"js/TweenMax.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/js/clipboard.min.js","path":"js/clipboard.min.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/js/instagram.js","path":"js/instagram.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/js/jquery.lazyload.js","path":"js/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/js/mobile.js","path":"js/mobile.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/js/pace.js","path":"js/pace.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/js/pc.js","path":"js/pc.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/js/plugins.js","path":"js/plugins.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/head.jpg","path":"img/head.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/js/TweenMax.min.js","path":"js/TweenMax.min.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/js/embed.js","path":"js/embed.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-1.jpg","path":"background/bg-1.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-109.jpg","path":"background/bg-109.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-11.jpg","path":"background/bg-11.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-20.jpg","path":"background/bg-20.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-3.jpg","path":"background/bg-3.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg.jpg","path":"background/bg.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-17.jpg","path":"background/bg-17.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/css/pace/pace-theme-flash.css","path":"css/pace/pace-theme-flash.css","modified":0,"renderable":1},{"_id":"themes/spfk/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/font-awesome/css/font-awesome.css","path":"font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/spfk/source/font-awesome/css/font-awesome.min.css","path":"font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/spfk/source/js/404/jquery.parallaxify-0.0.2.min.js","path":"js/404/jquery.parallaxify-0.0.2.min.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-15.jpg","path":"background/bg-15.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-23.jpg","path":"background/bg-23.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-7.jpg","path":"background/bg-7.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/font-awesome/fonts/FontAwesome.otf","path":"font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.woff","path":"font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.woff2","path":"font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.eot","path":"font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/spfk/source/js/404/jquery-2.0.3.min.js","path":"js/404/jquery-2.0.3.min.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/Head_portrait.png","path":"img/Head_portrait.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/me_head.png","path":"img/me_head.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-14.jpg","path":"background/bg-14.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-9.jpg","path":"background/bg-9.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.ttf","path":"font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/css/imgshare.css","path":"static/api/css/imgshare.css","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/css/like.css","path":"static/api/css/like.css","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/css/select_share.css","path":"static/api/css/select_share.css","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/css/share_popup.css","path":"static/api/css/share_popup.css","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/css/share_style0_16.css","path":"static/api/css/share_style0_16.css","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/css/share_style0_24.css","path":"static/api/css/share_style0_24.css","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/css/share_style0_32.css","path":"static/api/css/share_style0_32.css","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/css/share_style1_16.css","path":"static/api/css/share_style1_16.css","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/css/share_style1_24.css","path":"static/api/css/share_style1_24.css","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/css/share_style1_32.css","path":"static/api/css/share_style1_32.css","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/css/share_style2.css","path":"static/api/css/share_style2.css","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/css/share_style2_16.css","path":"static/api/css/share_style2_16.css","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/css/share_style2_24.css","path":"static/api/css/share_style2_24.css","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/css/share_style2_32.css","path":"static/api/css/share_style2_32.css","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/css/share_style4.css","path":"static/api/css/share_style4.css","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/css/slide_share.css","path":"static/api/css/slide_share.css","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/css/weixin_popup.css","path":"static/api/css/weixin_popup.css","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/share.js","path":"static/api/js/share.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-19.jpg","path":"background/bg-19.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-21.jpg","path":"background/bg-21.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-22.jpg","path":"background/bg-22.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-24.jpg","path":"background/bg-24.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-4.jpg","path":"background/bg-4.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-6.jpg","path":"background/bg-6.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-8.jpg","path":"background/bg-8.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/l8.gif","path":"static/api/img/share/l8.gif","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/trans/data.js","path":"static/api/js/trans/data.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/trans/logger.js","path":"static/api/js/trans/logger.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-10.jpg","path":"background/bg-10.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-12.jpg","path":"background/bg-12.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-18.jpg","path":"background/bg-18.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/bg.jpg","path":"img/bg.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/icons_0_16.png","path":"static/api/img/share/icons_0_16.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/icons_0_24.png","path":"static/api/img/share/icons_0_24.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/icons_0_32.png","path":"static/api/img/share/icons_0_32.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/icons_1_16.png","path":"static/api/img/share/icons_1_16.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/icons_1_24.png","path":"static/api/img/share/icons_1_24.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/icons_1_32.png","path":"static/api/img/share/icons_1_32.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/icons_2_16.png","path":"static/api/img/share/icons_2_16.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/icons_2_24.png","path":"static/api/img/share/icons_2_24.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/icons_2_32.png","path":"static/api/img/share/icons_2_32.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/l0.gif","path":"static/api/img/share/l0.gif","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/l1.gif","path":"static/api/img/share/l1.gif","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/l2.gif","path":"static/api/img/share/l2.gif","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/l3.gif","path":"static/api/img/share/l3.gif","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/l4.gif","path":"static/api/img/share/l4.gif","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/l5.gif","path":"static/api/img/share/l5.gif","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/l6.gif","path":"static/api/img/share/l6.gif","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/l7.gif","path":"static/api/img/share/l7.gif","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/pop_c.gif","path":"static/api/img/share/pop_c.gif","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/r0.gif","path":"static/api/img/share/r0.gif","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/r1.gif","path":"static/api/img/share/r1.gif","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/r2.gif","path":"static/api/img/share/r2.gif","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/r3.gif","path":"static/api/img/share/r3.gif","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/r4.gif","path":"static/api/img/share/r4.gif","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/r5.gif","path":"static/api/img/share/r5.gif","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/r6.gif","path":"static/api/img/share/r6.gif","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/r7.gif","path":"static/api/img/share/r7.gif","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/r8.gif","path":"static/api/img/share/r8.gif","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/sc.png","path":"static/api/img/share/sc.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/selectshare_close.png","path":"static/api/img/share/selectshare_close.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/share-search-icon.png","path":"static/api/img/share/share-search-icon.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/base/class.js","path":"static/api/js/base/class.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/component/animate.js","path":"static/api/js/component/animate.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/component/anticheat.js","path":"static/api/js/component/anticheat.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/component/comm_tools.js","path":"static/api/js/component/comm_tools.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/component/partners.js","path":"static/api/js/component/partners.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/component/pop_base.js","path":"static/api/js/component/pop_base.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/component/pop_dialog.js","path":"static/api/js/component/pop_dialog.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/component/pop_popup.js","path":"static/api/js/component/pop_popup.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/component/pop_popup_slide.js","path":"static/api/js/component/pop_popup_slide.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/component/qrcode.js","path":"static/api/js/component/qrcode.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/conf/const.js","path":"static/api/js/conf/const.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/conf/define.js","path":"static/api/js/conf/define.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/share/api_base.js","path":"static/api/js/share/api_base.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/share/combine_api.js","path":"static/api/js/share/combine_api.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/share/image_api.js","path":"static/api/js/share/image_api.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/share/like_api.js","path":"static/api/js/share/like_api.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/share/likeshare.js","path":"static/api/js/share/likeshare.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/share/select_api.js","path":"static/api/js/share/select_api.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/share/share_api.js","path":"static/api/js/share/share_api.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/share/slide_api.js","path":"static/api/js/share/slide_api.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/start/router.js","path":"static/api/js/start/router.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/trans/trans.js","path":"static/api/js/trans/trans.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/trans/trans_bdxc.js","path":"static/api/js/trans/trans_bdxc.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/trans/trans_bdysc.js","path":"static/api/js/trans/trans_bdysc.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/trans/trans_weixin.js","path":"static/api/js/trans/trans_weixin.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/view/image_view.js","path":"static/api/js/view/image_view.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/view/like_view.js","path":"static/api/js/view/like_view.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/view/select_view.js","path":"static/api/js/view/select_view.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/view/share_view.js","path":"static/api/js/view/share_view.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/view/slide_view.js","path":"static/api/js/view/slide_view.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/view/view_base.js","path":"static/api/js/view/view_base.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-111.jpg","path":"background/bg-111.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-16.jpg","path":"background/bg-16.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-13.jpg","path":"background/bg-13.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.svg","path":"font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/base/tangram.js","path":"static/api/js/base/tangram.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-2.jpg","path":"background/bg-2.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-5.jpg","path":"background/bg-5.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/spfk/.gitignore","hash":"237760b38ce80bcc3a8b556566bef0295c145393","modified":1505958927286},{"_id":"themes/spfk/README.md","hash":"228961ab390b883cb441fec95fd2ae6ab1f423ba","modified":1505958927286},{"_id":"themes/spfk/_config.yml","hash":"58468ede14e79a6de4a4e772eda57b464c4157a3","modified":1505958927286},{"_id":"themes/spfk/package.json","hash":"00357ef6f24eb049074da81809e98f973f528cca","modified":1505958927290},{"_id":"source/_posts/Android手机刷recovery.md","hash":"c18c38c6060c63d3c9f4a61d642de93a15ccacf4","modified":1505958927186},{"_id":"source/_posts/CoreFreq-CPU监控软件.md","hash":"0d826809dbd5ff5d59c3237aa22dc3b06b87b4be","modified":1505958927186},{"_id":"source/_posts/FileZillaFTP使用教程.md","hash":"ef224231e5abc09f41072c8c159264b066136007","modified":1505958927186},{"_id":"source/_posts/Mediostream框架filter使用说明.md","hash":"678aa361ce8e4ed0884cb86ae433feb0e6eba887","modified":1505958927186},{"_id":"source/_posts/My-New-Post.md","hash":"cf4f349d3a5c98fcc7e41efed9fbe0ea5e33756d","modified":1505958927186},{"_id":"source/_posts/Ubuntu16-04安装Screenlets.md","hash":"19cea6de7e9203b953b9309541fc2354346d0f86","modified":1505958927186},{"_id":"source/_posts/Ubuntu16-04安装Stacer工具.md","hash":"d3f133f39344c5f005dfd0e11e8cb33830a3eb7f","modified":1505958927186},{"_id":"source/_posts/android-gpio口控制.md","hash":"39dae0972a255dfb3d64fe57b59a41fac1a31a0f","modified":1505958927186},{"_id":"source/_posts/android手机解锁引导程序.md","hash":"e3f5aba48e950943ba69882f2feb00759447d5ac","modified":1505958927186},{"_id":"source/_posts/android键盘输入读取.md","hash":"a6291be434929daeb4b68c1d6e65aa325aca4e9b","modified":1505958927186},{"_id":"source/_posts/armbian定制教程.md","hash":"ccce439979e3daf56be18838d11c3ea86f50b3d5","modified":1505958927186},{"_id":"source/_posts/docker使用代理.md","hash":"7d22f2294a26929a12b526d567167a3fba8f1317","modified":1505958927186},{"_id":"source/_posts/hikey-android源码编译.md","hash":"6c1b79ebf867408e28b162517b3ed93ff738ee63","modified":1505958927186},{"_id":"source/_posts/hikey替换android内核.md","hash":"c3a5ea9f3d55be81943a978d9a497b84b667a2f1","modified":1505958927186},{"_id":"source/_posts/linux-git实现代理.md","hash":"0ab361a97c3f1a68ef5c6e587c654a67c0f2654b","modified":1505958927186},{"_id":"source/_posts/linux终端实现代理.md","hash":"452a0b93cccbc31f004d4f738aaac21e68753c9e","modified":1505958927186},{"_id":"source/_posts/mediastreamer.md","hash":"e022014223c552d75ff3f3d5f9d322d41355361d","modified":1505958927186},{"_id":"source/_posts/mysql-udf插件开发.md","hash":"d67ebde72a85ae0b60fa16838473f59f6ab44217","modified":1505958927186},{"_id":"source/_posts/orangePi源码编译教程.md","hash":"b9c9a7626149a4fb076ba73df2b5916c47f2b3d1","modified":1505958927186},{"_id":"source/_posts/poky-raspbian开发.md","hash":"92a2fd80729858e60f2a1b6052b6b98c734f80ba","modified":1505958927186},{"_id":"source/_posts/poky-raspbian教程.md","hash":"187d7d0e73e0ae2c880027ab9816f8f0e6667e81","modified":1505958927190},{"_id":"source/_posts/raspbian更新内核.md","hash":"2b5dae611c51aa03c1aa845eca4b718f7fedeae3","modified":1505958927190},{"_id":"source/_posts/ubuntu16-04搭建xrdp远程桌面链接.md","hash":"0683e9f65f7df80268cb0fcdb0b85fbb3caceeef","modified":1505958927190},{"_id":"source/_posts/使用ndk编译c可执行程序.md","hash":"99a7df7d5290b01e881492cb197321af89b6e9f6","modified":1505958927190},{"_id":"source/_posts/加速android源码编译.md","hash":"27fe3fc1261b8c854cf85cb8a49de1f349ef7b95","modified":1505958927190},{"_id":"source/_posts/各种Android手机Root方法.md","hash":"d87b9d8cc46ac34a8d72c46f2700afd8cb5220c7","modified":1505958927190},{"_id":"source/_posts/各种开源Android-系统定制.md","hash":"b4862da9c6ef79ae5d37ca385fe4a1164db63e35","modified":1505958927190},{"_id":"source/_posts/同步codeaurora-Android源码.md","hash":"c4823e3a90893c0fc14fc5ef80e3b339062b2d53","modified":1505958927190},{"_id":"source/_posts/同步webrtc-android源码.md","hash":"66a4c2c9c27428b9e01cbb6c16ec7503ca540013","modified":1505958927190},{"_id":"source/_posts/安装切换openjdk.md","hash":"5ee78aca0bbe11f05263bd4145eda9927ee536e9","modified":1505958927190},{"_id":"source/_posts/我对灯光的各种印象.md","hash":"5a7afdf287d0ecac959077d47ea98e2c898da89e","modified":1505958927190},{"_id":"source/_posts/提取刷机包内system-new-dat文件.md","hash":"dd93fd186188099b46b66d29bf439faea682fe71","modified":1505958927190},{"_id":"source/_posts/烧写poky生成镜像.md","hash":"93079dc4c70089e32c5ef465ab76943bd8cc50c4","modified":1505958927190},{"_id":"source/_posts/用open-gapps安装google-play.md","hash":"e103faa1ad91a8db78ddc802c3413b607f904838","modified":1505958927190},{"_id":"source/_posts/编译Android源码.md","hash":"6f4edc09b9ac5d4d95551f44c5398dd177b3fc90","modified":1505958927190},{"_id":"source/_posts/编译hikey-bootloader.md","hash":"81eabc3162cc5e1481cbc3ff664285def8468c9c","modified":1505958927190},{"_id":"themes/spfk/languages/de.yml","hash":"ecb13af8af81ccc033ae7494cb2f94f84f6466ad","modified":1505958927286},{"_id":"themes/spfk/languages/default.yml","hash":"9e59cd11b290be84909612beb12d0f93ce737f53","modified":1505958927286},{"_id":"themes/spfk/languages/en.yml","hash":"8fa0a7482188ca56fd3cf19c4a87320f85a76846","modified":1505958927286},{"_id":"themes/spfk/languages/fr-FR.yml","hash":"12cfa96dc412ecb6f8bf4de2690575929464906e","modified":1505958927286},{"_id":"themes/spfk/languages/pt-BR","hash":"922b6d836cc690742b2d55a725e3886c5d0cbb75","modified":1505958927286},{"_id":"themes/spfk/languages/ru.yml","hash":"9997425292031ee8a58a93346ac6d3f38f18e566","modified":1505958927286},{"_id":"themes/spfk/languages/zh-Hans.yml","hash":"0d7e8da60fd5e5db217e1733ac273ae00fd752ea","modified":1505958927286},{"_id":"themes/spfk/languages/zh-hk.yml","hash":"606dfb34d3fec1d7895a654ff7a5a1de0c6a5c55","modified":1505958927286},{"_id":"themes/spfk/languages/zh-tw.yml","hash":"9e4034870b57d2bb3063c91f8d206a6c4d7b3789","modified":1505958927286},{"_id":"themes/spfk/languages/zh.yml","hash":"0d7e8da60fd5e5db217e1733ac273ae00fd752ea","modified":1505958927286},{"_id":"themes/spfk/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1505958927290},{"_id":"themes/spfk/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1505958927290},{"_id":"themes/spfk/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1505958927290},{"_id":"themes/spfk/layout/layout.ejs","hash":"4a5566f704f3246f5ef77badddf18d2e16750328","modified":1505958927290},{"_id":"themes/spfk/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1505958927290},{"_id":"themes/spfk/layout/plugins.swig","hash":"f809b5e62e968a80921c56e5d7658325b48b7263","modified":1505958927290},{"_id":"themes/spfk/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1505958927290},{"_id":"themes/spfk/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1505958927290},{"_id":"themes/spfk/source/CNAME","hash":"2381f86fde72d44286a0a050aca02d096fa5d2b6","modified":1505958927290},{"_id":"themes/spfk/source/apple-touch-icon.png","hash":"c36a373c7830d61d1ce092bd5a88d0e9b54212fd","modified":1505958927290},{"_id":"themes/spfk/layout/_partial/after-footer.ejs","hash":"d2d8fda1d50d193088dbd641c6dcc3bd2bdf0165","modified":1505958927286},{"_id":"themes/spfk/layout/_partial/archive-post.ejs","hash":"8af583c5f60c69ffdc97bee4e8fdac1ba34ebecd","modified":1505958927286},{"_id":"themes/spfk/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1505958927286},{"_id":"themes/spfk/layout/_partial/article.ejs","hash":"13f788f96eec6cad9c29a6f373b88c164b279856","modified":1505958927286},{"_id":"themes/spfk/layout/_partial/background.ejs","hash":"cb656037dae582272c748c68a174f2da622d5a12","modified":1505958927286},{"_id":"themes/spfk/layout/_partial/bodybackground.ejs","hash":"931700a928b84577cc33dfff68a009188885f6c0","modified":1505958927286},{"_id":"themes/spfk/layout/_partial/case.swig","hash":"a2a7ec0e4c203e49fd32335c60c3b9851ed6e4a5","modified":1505958927286},{"_id":"themes/spfk/layout/_partial/footer.ejs","hash":"0e54ea8678e6d6f0bf98a4b76f5c4ee4d424893f","modified":1505958927286},{"_id":"themes/spfk/layout/_partial/head.ejs","hash":"6f34f1062b8bbd46bb5216332c8110c08697c6d2","modified":1505958927286},{"_id":"themes/spfk/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1505958927286},{"_id":"themes/spfk/layout/_partial/hide-labels.ejs","hash":"e981795db4954ba5cc9d6844a6a2799bffdc0af3","modified":1505958927286},{"_id":"themes/spfk/layout/_partial/left-col.ejs","hash":"9d9aaecfd40903be38b97c46d6b7f1ea3fd7354e","modified":1505958927286},{"_id":"themes/spfk/layout/_partial/mathjax.ejs","hash":"cdfd21f079933f3a275bc4088e1ca5e6068e75b4","modified":1505958927286},{"_id":"themes/spfk/layout/_partial/mobile-nav.ejs","hash":"320de58b166710d02963d80f27bcd50478841401","modified":1505958927286},{"_id":"themes/spfk/layout/_partial/page.ejs","hash":"55ffdcc87b5fa50afdc370f439c0e812e307cbff","modified":1505958927286},{"_id":"themes/spfk/layout/_partial/plugin.swig","hash":"17b6c6945e4b1b41dbb10d851f85ca10100c28ea","modified":1505958927286},{"_id":"themes/spfk/layout/_partial/post-nav-button.ejs","hash":"c817bdf39f62670872aae19accea4c51f5e0bfa7","modified":1505958927286},{"_id":"themes/spfk/layout/_partial/scrolling-button.ejs","hash":"b3a28974f37375796687e6100b48c3da6f662640","modified":1505958927290},{"_id":"themes/spfk/layout/_partial/theme.swig","hash":"5a279ad8f6c6b7c104cce495faa563d8b7a7c74a","modified":1505958927290},{"_id":"themes/spfk/layout/_partial/toc.ejs","hash":"84bbda825793de643d5a40190fab2160af1e75e3","modified":1505958927290},{"_id":"themes/spfk/layout/_partial/work.swig","hash":"6bdb6ec45f6179875e5a33bfdc7568a3831638fd","modified":1505958927290},{"_id":"themes/spfk/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1505958927330},{"_id":"themes/spfk/source/css/_variables.styl","hash":"a753c14f409a294188f2e99575f2c10b82fd56a2","modified":1505958927330},{"_id":"themes/spfk/source/css/loading-style.css","hash":"1f67362d809e85edc9f122db7bc3711af1ed1d8b","modified":1505958927330},{"_id":"themes/spfk/source/css/showshare.css","hash":"d5288601c95acd7fea993ac8cc3d04efcbdd1559","modified":1505958927330},{"_id":"themes/spfk/source/css/style.styl","hash":"806fc5c30a2ba90b80ba5387e5c3ff0cda004a5c","modified":1505958927330},{"_id":"themes/spfk/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1505958927330},{"_id":"themes/spfk/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1505958927330},{"_id":"themes/spfk/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1505958927330},{"_id":"themes/spfk/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1505958927330},{"_id":"themes/spfk/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1505958927330},{"_id":"themes/spfk/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1505958927330},{"_id":"themes/spfk/source/fancybox/jquery.fancybox.css","hash":"b6aa6692c2e5f8bd74d96827b78570f0c5683c20","modified":1505958927330},{"_id":"themes/spfk/source/fancybox/jquery.fancybox.js","hash":"a82597493d75ea989ca586e09173cff332efe41e","modified":1505958927330},{"_id":"themes/spfk/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1505958927330},{"_id":"themes/spfk/source/img/Head_portrait.jpg","hash":"ce10af4bed9738e6c61f13ca4699e085b67392cd","modified":1505958927334},{"_id":"themes/spfk/source/img/coderwall.png","hash":"fa84676c4d654e040e51fd34bfcd9f9348cd5331","modified":1505958927334},{"_id":"themes/spfk/source/img/delicious.png","hash":"9553a5f5189e4a953e04a58a49dbfa74b86b73dd","modified":1505958927334},{"_id":"themes/spfk/source/img/douban.png","hash":"e2ade003ffadd5826ee66ec23901c2d6e8607e4e","modified":1505958927334},{"_id":"themes/spfk/source/img/facebook.png","hash":"d19ad7a0903daf26817afd8753cd97e0cc714f54","modified":1505958927334},{"_id":"themes/spfk/source/img/favicon.png","hash":"5b4e9c94ff3396db5b074b69c1aa5bb909aba825","modified":1505958927334},{"_id":"themes/spfk/source/img/github.png","hash":"b84d03b32fa388dcbf149296ebd16dce6223d48d","modified":1505958927334},{"_id":"themes/spfk/source/img/google.png","hash":"61a21fec7346fa3400b747ac9a201cf3d5bc013d","modified":1505958927334},{"_id":"themes/spfk/source/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1505958927338},{"_id":"themes/spfk/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1505958927338},{"_id":"themes/spfk/source/img/instagram.png","hash":"3c148a3882a8d141d7d405be8c4815d0dcb03561","modified":1505958927338},{"_id":"themes/spfk/source/img/linkedin.png","hash":"e203138fb53c257cb214e97f4e30091b9c568d2c","modified":1505958927338},{"_id":"themes/spfk/source/img/mail.png","hash":"fca8199cc77fdbd700a45bf56d091c82f4a67fe7","modified":1505958927338},{"_id":"themes/spfk/source/img/pinboard.png","hash":"0891fbb6d092fa012bf936019923383d84c6aeb0","modified":1505958927338},{"_id":"themes/spfk/source/img/pinterest.png","hash":"9c72917f8779c083157c6ce7a5d62ed4874f0630","modified":1505958927338},{"_id":"themes/spfk/source/img/qq.png","hash":"fd741764c5528fe371f053beac99839a97900eef","modified":1505958927338},{"_id":"themes/spfk/source/img/rss.png","hash":"430fd47340e75214c081abd05cd7410cf7c71b86","modified":1505958927338},{"_id":"themes/spfk/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1505958927338},{"_id":"themes/spfk/source/img/segmentfault.png","hash":"4483ab273423deb65021111fc8ad9512b69e45b2","modified":1505958927338},{"_id":"themes/spfk/source/img/stackoverflow.png","hash":"da5dfe9043055c95e479d49c78cd3b020de608f2","modified":1505958927338},{"_id":"themes/spfk/source/img/twitter.png","hash":"14dbb8e62d056525253bc0de13acd1723da7a934","modified":1505958927338},{"_id":"themes/spfk/source/img/wechat.png","hash":"7ca41b6e32ca4dac419225261ab4fee5a88f73a9","modified":1505958927338},{"_id":"themes/spfk/source/img/weibo.png","hash":"280dae3fd38086158b4a1b57edb94c06b1a5014b","modified":1505958927338},{"_id":"themes/spfk/source/img/zhihu.png","hash":"a6d6ef65e9ac82e613a311810391ebb90d9b1c1d","modified":1505958927338},{"_id":"themes/spfk/source/js/TweenMax.js","hash":"0ba64564a4fde4085fa3971dd53b7d64a41751e1","modified":1505958927338},{"_id":"themes/spfk/source/js/clipboard.min.js","hash":"c13b4bb8fee46447284590d2afc0efca0ea3cb7b","modified":1505958927338},{"_id":"themes/spfk/source/js/instagram.js","hash":"f19adbcc0dac33536bc6660598059048ec901882","modified":1505958927338},{"_id":"themes/spfk/source/js/jquery.lazyload.js","hash":"8e4ad3e17f8e82be311b6b6e87811762e2b2d764","modified":1505958927338},{"_id":"themes/spfk/source/js/main.js","hash":"921b2fb56e48cce3d16ceb4a3fadf8e666c73a0a","modified":1505958927338},{"_id":"themes/spfk/source/js/mobile.js","hash":"d3847e5bcaf39108931724ecb02770c62b10889f","modified":1505958927338},{"_id":"themes/spfk/source/js/pace.js","hash":"b49c10cd65d9488f7338e3c778e55ac6628650f3","modified":1505958927342},{"_id":"themes/spfk/source/js/pc.js","hash":"ab375af6e3bcd054b1e87e1a8dcd3d7d25c2db40","modified":1505958927342},{"_id":"themes/spfk/source/js/plugins.js","hash":"c1cf96b2d852b5803228a34d99014b005623bc06","modified":1505958927342},{"_id":"themes/spfk/source/img/head.jpg","hash":"80c0999acfc1173183d3dd243b4b90d077ab97cb","modified":1505958927338},{"_id":"themes/spfk/source/js/TweenMax.min.js","hash":"eaa4e4a08400da3f22dedda706ba56cdce5b0b7a","modified":1505958927338},{"_id":"themes/spfk/source/js/embed.js","hash":"8d2d4a812ab639bc02fdd8749d3a39f6b9406c54","modified":1505958927338},{"_id":"themes/spfk/layout/_partial/analytics/baidu-analytics.ejs","hash":"b21500b87d79a0068e3ca0408b4e125e3e749d01","modified":1505958927286},{"_id":"themes/spfk/layout/_partial/analytics/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1505958927286},{"_id":"themes/spfk/layout/_partial/comments/disqus.ejs","hash":"7792a79ab85ef28551cc2a793735973b1d5521a7","modified":1505958927286},{"_id":"themes/spfk/layout/_partial/comments/duoshuo.ejs","hash":"f6112c3f08f46dde1c0ba6a5bee8017624590e47","modified":1505958927286},{"_id":"themes/spfk/layout/_partial/comments/youyan.ejs","hash":"a6853b59ee60e775de1ed90b242084f83774d195","modified":1505958927286},{"_id":"themes/spfk/layout/_partial/post/TipTitle.ejs","hash":"65b0956edca84e0bc0eb616ec236309822d5f803","modified":1505958927286},{"_id":"themes/spfk/layout/_partial/post/category.ejs","hash":"265bb12f7cfa5e0bcbb74fdd409ba13a6d9d2e22","modified":1505958927286},{"_id":"themes/spfk/layout/_partial/post/date.ejs","hash":"1cfcf2e06ab9b1c6dcd44f41825dfe98d400c7ea","modified":1505958927286},{"_id":"themes/spfk/layout/_partial/post/loading.ejs","hash":"52a576a8afee08d33c6f69a61c496e1820132e91","modified":1505958927290},{"_id":"themes/spfk/layout/_partial/post/nav.ejs","hash":"4779c17cf76bf4560e52708102467bb8ec7a2781","modified":1505958927290},{"_id":"themes/spfk/layout/_partial/post/swiftype.ejs","hash":"76374e601d911e1279e1944d2a6b7eb3391c7c7c","modified":1505958927290},{"_id":"themes/spfk/layout/_partial/post/tag.ejs","hash":"9dad471e27de9e066666f3082137eccaede2e67b","modified":1505958927290},{"_id":"themes/spfk/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1505958927290},{"_id":"themes/spfk/layout/_partial/share/baidu-share.ejs","hash":"993b7d231881601ba79aab1e78d75dcb271b3500","modified":1505958927290},{"_id":"themes/spfk/layout/_partial/share/share.ejs","hash":"62467610ba6df9b63350d163e806be774dcf5a00","modified":1505958927290},{"_id":"themes/spfk/layout/_partial/share/showshare.ejs","hash":"410b809eb6c50bacfd9e1e573f1e0251841bc79d","modified":1505958927290},{"_id":"themes/spfk/source/background/bg-1.jpg","hash":"f0617756387d74f99afe0087c7b93a32f3c7096b","modified":1505958927290},{"_id":"themes/spfk/source/background/bg-109.jpg","hash":"6171c1e921c8cc9bdcd7276cf7f0bee5295f4672","modified":1505958927294},{"_id":"themes/spfk/source/background/bg-11.jpg","hash":"d69a0447e91f62977b144737f08620d77037c76a","modified":1505958927294},{"_id":"themes/spfk/source/background/bg-20.jpg","hash":"9d428ac435198b2a0107102a2e9ae71e53afe364","modified":1505958927310},{"_id":"themes/spfk/source/background/bg-3.jpg","hash":"f1347eddd07bdae93ab6bebad8627eddc5baeb44","modified":1505958927318},{"_id":"themes/spfk/source/background/bg.jpg","hash":"f0617756387d74f99afe0087c7b93a32f3c7096b","modified":1505958927330},{"_id":"themes/spfk/source/css/_partial/archive.styl","hash":"a8bc2e2458bcc51fa68122274a41f5e4e52a8ebd","modified":1505958927330},{"_id":"themes/spfk/source/css/_partial/article.styl","hash":"e4cfd779fbf6ea7687d4b86ff157df69a322ce85","modified":1505958927330},{"_id":"themes/spfk/source/css/_partial/baidushare.styl","hash":"fe36e3d8933b1b0b674aaf16e50dbf6090099912","modified":1505958927330},{"_id":"themes/spfk/source/css/_partial/footer.styl","hash":"cbf916a5338e69e05d0815c53aeb818d636b6d99","modified":1505958927330},{"_id":"themes/spfk/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1505958927330},{"_id":"themes/spfk/source/css/_partial/highlight.styl","hash":"62d7930e9556f893088c65c5fc4229a10ebc7671","modified":1505958927330},{"_id":"themes/spfk/source/css/_partial/instagram.styl","hash":"db9cc156c7df27f7f54b0e7ff34b5949f55f99eb","modified":1505958927330},{"_id":"themes/spfk/source/css/_partial/main.styl","hash":"6e3d15fbe2663bb6fc408df4a771925c3eac65cf","modified":1505958927330},{"_id":"themes/spfk/source/css/_partial/mobile-slider.styl","hash":"3bf9f2359f68c700e21618ad6262db81038c3d96","modified":1505958927330},{"_id":"themes/spfk/source/css/_partial/mobile.styl","hash":"53b1a06e08df81427505cbc76cc8eb02bea54356","modified":1505958927330},{"_id":"themes/spfk/source/css/_partial/page.styl","hash":"46b9c91428c1e1f42cc8a1010f600f70fb8edc82","modified":1505958927330},{"_id":"themes/spfk/source/css/_partial/plugins.styl","hash":"629ae10dfc053dbfc074966f0bf7f0115acf65e2","modified":1505958927330},{"_id":"themes/spfk/source/css/_partial/scroll.styl","hash":"1932774d30b8706919342f9cf36ea2d99987ce14","modified":1505958927330},{"_id":"themes/spfk/source/css/_partial/share.styl","hash":"2dde7c9ea40c71fce3dbd8d5e2bcc8d9682141b8","modified":1505958927330},{"_id":"themes/spfk/source/css/_partial/tagcloud.styl","hash":"91e6553775ca931a1b3db1ab11c4cf227df68c21","modified":1505958927330},{"_id":"themes/spfk/source/css/_partial/wheelmenu.styl","hash":"74630c56944e27bef53ef0c0e391611a2eec2ed0","modified":1505958927330},{"_id":"themes/spfk/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1505958927330},{"_id":"themes/spfk/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1505958927330},{"_id":"themes/spfk/source/background/bg-17.jpg","hash":"6ab5e470059e8ccb0c8bc6786abfb5db7e9a1826","modified":1505958927302},{"_id":"themes/spfk/source/css/pace/pace-theme-flash.css","hash":"508bce8b59a1fbc1f1443a7c4ab3b026e5517dab","modified":1505958927330},{"_id":"themes/spfk/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1505958927330},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1505958927330},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1505958927330},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1505958927330},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1505958927330},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1505958927330},{"_id":"themes/spfk/source/font-awesome/css/font-awesome.css","hash":"b488600451227b445414796e9b8550e7c1bd6d29","modified":1505958927330},{"_id":"themes/spfk/source/font-awesome/css/font-awesome.min.css","hash":"12d6861075de8e293265ff6ff03b1f3adcb44c76","modified":1505958927330},{"_id":"themes/spfk/source/js/404/jquery.parallaxify-0.0.2.min.js","hash":"b97e2dfcb210b76f7bdd6e1800b26128bf4fad99","modified":1505958927338},{"_id":"themes/spfk/source/background/bg-15.jpg","hash":"ce5760578eb814fe951c56200e81c6f47b6468d4","modified":1505958927302},{"_id":"themes/spfk/source/background/bg-23.jpg","hash":"050937d649be2c02ef8a66a0ffe7d320b236d1b0","modified":1505958927314},{"_id":"themes/spfk/source/background/bg-7.jpg","hash":"acbe0946a47ba16b79f062dbee14c4c9ff9a48da","modified":1505958927326},{"_id":"themes/spfk/source/font-awesome/fonts/FontAwesome.otf","hash":"42c179eef588854b5ec151bcf6a3f58aa8b79b11","modified":1505958927334},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1505958927334},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1505958927334},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.eot","hash":"986eed8dca049714e43eeebcb3932741a4bec76d","modified":1505958927334},{"_id":"themes/spfk/source/js/404/jquery-2.0.3.min.js","hash":"fbf9c77d0c4e3c34a485980c1e5316b6212160c8","modified":1505958927338},{"_id":"themes/spfk/source/img/Head_portrait.png","hash":"70f86c59121b5cf9aed871c2821a4cb7cef2b5fc","modified":1505958927334},{"_id":"themes/spfk/source/img/me_head.png","hash":"a7c04861d00be044af7b2a96379e45ba321d461e","modified":1505958927338},{"_id":"themes/spfk/source/background/bg-14.jpg","hash":"2fd6ede2bc9de2d26d910ea4e45d28b2350881eb","modified":1505958927302},{"_id":"themes/spfk/source/background/bg-9.jpg","hash":"df731da0fe0de9a05d99d017e747252c990f972d","modified":1505958927326},{"_id":"themes/spfk/source/css/_partial/customise/blockquote.styl","hash":"83179f1d0e12b025cd433a6071b2826c2b4168cc","modified":1505958927330},{"_id":"themes/spfk/source/css/_partial/customise/code-block.styl","hash":"1f05c0558b2970c369fe19bafbc8a1821c09bce0","modified":1505958927330},{"_id":"themes/spfk/source/css/_partial/customise/inline-code.styl","hash":"ac2fcef8823d5566c0e27f23b2a46beecbd71c72","modified":1505958927330},{"_id":"themes/spfk/source/css/_partial/post/youyan.styl","hash":"ac2869e2e0fb3a1ee0df4b0c0a233a2b1923ea20","modified":1505958927330},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.ttf","hash":"6484f1af6b485d5096b71b344e67f4164c33dd1f","modified":1505958927334},{"_id":"themes/spfk/source/static/api/css/imgshare.css","hash":"c3624a2dde649ed28b2e5d1f050fd971fbaf71a0","modified":1505958927342},{"_id":"themes/spfk/source/static/api/css/like.css","hash":"2024d58206df01b858c38f07957f928b44e14cb3","modified":1505958927342},{"_id":"themes/spfk/source/static/api/css/select_share.css","hash":"d0259abdb410193cf761e42bffaa51e70327a0cd","modified":1505958927342},{"_id":"themes/spfk/source/static/api/css/share_popup.css","hash":"338ba2b30ef8ce0c84cd36b37d7f8482996291dc","modified":1505958927342},{"_id":"themes/spfk/source/static/api/css/share_style0_16.css","hash":"090e77e9e6e9b8ee0d73a233cbe46499de935bdd","modified":1505958927342},{"_id":"themes/spfk/source/static/api/css/share_style0_24.css","hash":"7d1f9f32b80f91001f4f951aa045180cde22d82e","modified":1505958927342},{"_id":"themes/spfk/source/static/api/css/share_style0_32.css","hash":"7c2d12ea532c8a55c102b649bb23ef5bf53b3ed3","modified":1505958927342},{"_id":"themes/spfk/source/static/api/css/share_style1_16.css","hash":"aeb4e9fa96cfa0167481e1f4007079dc3f3c6c27","modified":1505958927342},{"_id":"themes/spfk/source/static/api/css/share_style1_24.css","hash":"3ee5f745c863b4f68299fe5dc125f913ca619c07","modified":1505958927342},{"_id":"themes/spfk/source/static/api/css/share_style1_32.css","hash":"626d67a4c0bb72a152e90d25dbf281c0c35a2140","modified":1505958927342},{"_id":"themes/spfk/source/static/api/css/share_style2.css","hash":"1ad451187cde8a74843fd398b924ca0ac911e9be","modified":1505958927342},{"_id":"themes/spfk/source/static/api/css/share_style2_16.css","hash":"572c8e856988e463eb865f38d33ba003cc20d083","modified":1505958927342},{"_id":"themes/spfk/source/static/api/css/share_style2_24.css","hash":"917d963d3be111064cbb1d122963da91ee3724a0","modified":1505958927342},{"_id":"themes/spfk/source/static/api/css/share_style2_32.css","hash":"3657bbc4b5bbc66ebca4906ee0a1cbf9f98be883","modified":1505958927342},{"_id":"themes/spfk/source/static/api/css/share_style4.css","hash":"0a9e2ed712a5ef5c4699c038cd001a0d688a0fdf","modified":1505958927342},{"_id":"themes/spfk/source/static/api/css/slide_share.css","hash":"3898feaf45559b039f885bee8f9e831f48adb20c","modified":1505958927342},{"_id":"themes/spfk/source/static/api/css/weixin_popup.css","hash":"5e6c5084bfd16051de5776c2e136a5462b08a32c","modified":1505958927342},{"_id":"themes/spfk/source/static/api/js/share.js","hash":"5e71147fe4a93bc99387a5cc1c6894d8b6ab2d5e","modified":1505958927346},{"_id":"themes/spfk/source/background/bg-19.jpg","hash":"d77504412d28432643fc61ed9fd9f7c57096bdd9","modified":1505958927306},{"_id":"themes/spfk/source/background/bg-21.jpg","hash":"7c4c6cd5d75115093fa29bba7372fa198f04b0f1","modified":1505958927310},{"_id":"themes/spfk/source/background/bg-22.jpg","hash":"7a055391fa4188d9c22fdc1d34a10b26e2f0826d","modified":1505958927314},{"_id":"themes/spfk/source/background/bg-24.jpg","hash":"796fa5262d7714e8ce9496a2d03864429cfc5b45","modified":1505958927318},{"_id":"themes/spfk/source/background/bg-4.jpg","hash":"da47f889e02241c8b095f852fb7efd89c114599d","modified":1505958927318},{"_id":"themes/spfk/source/background/bg-6.jpg","hash":"1a4f4c8875b2c56e7992000979a7fca7856eec35","modified":1505958927322},{"_id":"themes/spfk/source/background/bg-8.jpg","hash":"dbecc189e28d00fa23e397eb512e039c2ff03c87","modified":1505958927326},{"_id":"themes/spfk/source/static/api/img/share/l8.gif","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1505958927342},{"_id":"themes/spfk/source/static/api/js/trans/data.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1505958927346},{"_id":"themes/spfk/source/static/api/js/trans/logger.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1505958927346},{"_id":"themes/spfk/source/background/bg-10.jpg","hash":"dfb23c1c3cf8a3dcb8dc0ea10cf06501c151a2a2","modified":1505958927294},{"_id":"themes/spfk/source/background/bg-12.jpg","hash":"2e0815591309863d8130881681cde32ec4bfebf1","modified":1505958927298},{"_id":"themes/spfk/source/background/bg-18.jpg","hash":"4d61dc41a781a9c1d37c9e5e413ac0d8a9538f6a","modified":1505958927306},{"_id":"themes/spfk/source/img/bg.jpg","hash":"1bcba3c6348e2190a42bff762800bf846cf9239c","modified":1505958927334},{"_id":"themes/spfk/source/static/api/img/share/icons_0_16.png","hash":"0eec1e81a04664b2032bd389513349e9bd5d5b0f","modified":1505958927342},{"_id":"themes/spfk/source/static/api/img/share/icons_0_24.png","hash":"a89223f9714c8c4fa169430a327963ca6a1c9a6e","modified":1505958927342},{"_id":"themes/spfk/source/static/api/img/share/icons_0_32.png","hash":"c20521634fdacef39631031671528713e6ba6081","modified":1505958927342},{"_id":"themes/spfk/source/static/api/img/share/icons_1_16.png","hash":"3793c3265429ab7b830bfaf18322259cd0b4c4ef","modified":1505958927342},{"_id":"themes/spfk/source/static/api/img/share/icons_1_24.png","hash":"9f1d472095dbe138ef7aff069b1d18cae6ffa942","modified":1505958927342},{"_id":"themes/spfk/source/static/api/img/share/icons_1_32.png","hash":"09825de5f238c97e4374d545961d6e0d5bbfb3e2","modified":1505958927342},{"_id":"themes/spfk/source/static/api/img/share/icons_2_16.png","hash":"07340442cb61aabb419dd226f4bfb206a7577f52","modified":1505958927342},{"_id":"themes/spfk/source/static/api/img/share/icons_2_24.png","hash":"e47fb87c533f2be89f22901f0864d9b5ef83412d","modified":1505958927342},{"_id":"themes/spfk/source/static/api/img/share/icons_2_32.png","hash":"deba62865245a6b5aafa446787d72165c703b943","modified":1505958927342},{"_id":"themes/spfk/source/static/api/img/share/l0.gif","hash":"738b92632b0a9789a9eb568b8d101eb64f55f6e0","modified":1505958927342},{"_id":"themes/spfk/source/static/api/img/share/l1.gif","hash":"70e1932ca7a622ed3322b683eceb7a590860a55e","modified":1505958927342},{"_id":"themes/spfk/source/static/api/img/share/l2.gif","hash":"e6a5d6104c226a686d48759e0268e09d762e242e","modified":1505958927342},{"_id":"themes/spfk/source/static/api/img/share/l3.gif","hash":"26c0dd37d98df63abb9d3d83e01bb47c34ee3f0f","modified":1505958927342},{"_id":"themes/spfk/source/static/api/img/share/l4.gif","hash":"8a9c3cf99766d3f07a9c480cfdffdc3197b9a6b9","modified":1505958927342},{"_id":"themes/spfk/source/static/api/img/share/l5.gif","hash":"148706f56b8ef4fd9d8483d0ac3a6730e72fc0ad","modified":1505958927342},{"_id":"themes/spfk/source/static/api/img/share/l6.gif","hash":"f4b8e3188f744f13aca46b27b451d55d9e209c48","modified":1505958927342},{"_id":"themes/spfk/source/static/api/img/share/l7.gif","hash":"e4f7e5e56c8f4eb026b5cb0affe3bd69c31af261","modified":1505958927342},{"_id":"themes/spfk/source/static/api/img/share/pop_c.gif","hash":"e8b9ece6ddaa47ccb2c15f2396d1cd3020740603","modified":1505958927342},{"_id":"themes/spfk/source/static/api/img/share/r0.gif","hash":"882f255fbafc0136a3917c1dd40db88879c1b1c1","modified":1505958927342},{"_id":"themes/spfk/source/static/api/img/share/r1.gif","hash":"96064d132ee2477c0e444c2e18162f9d1dc9e9c2","modified":1505958927342},{"_id":"themes/spfk/source/static/api/img/share/r2.gif","hash":"67c84a67be3b039892e9cb8c7c29ed29813bf60f","modified":1505958927342},{"_id":"themes/spfk/source/static/api/img/share/r3.gif","hash":"ecdd21f1457be54afc96e2d005524eef93d7bf85","modified":1505958927342},{"_id":"themes/spfk/source/static/api/img/share/r4.gif","hash":"517435e69a2215a0f003e75a4861154ca963c30e","modified":1505958927342},{"_id":"themes/spfk/source/static/api/img/share/r5.gif","hash":"e61b32d1830390303927bdab21823959f8dc7023","modified":1505958927342},{"_id":"themes/spfk/source/static/api/img/share/r6.gif","hash":"4bc01e08ef0015fddf5b8c7257c094ec584ca3ee","modified":1505958927342},{"_id":"themes/spfk/source/static/api/img/share/r7.gif","hash":"3c596c924910c93cf3e37cc1b2870dbf271151e2","modified":1505958927342},{"_id":"themes/spfk/source/static/api/img/share/r8.gif","hash":"c068ece54a72a3f2428d4f1b5ca7c176f027dd4e","modified":1505958927342},{"_id":"themes/spfk/source/static/api/img/share/sc.png","hash":"e5a2ca56973a3d6608e7e3a48ebd9fa5ebda9991","modified":1505958927342},{"_id":"themes/spfk/source/static/api/img/share/selectshare_close.png","hash":"6f3666278268890a153c85fb9f04ac848c442561","modified":1505958927342},{"_id":"themes/spfk/source/static/api/img/share/share-search-icon.png","hash":"0629677a7eb5aa3e8bab3faa310c6d8c467a3287","modified":1505958927342},{"_id":"themes/spfk/source/static/api/js/base/class.js","hash":"ad1e5a3011e30b83ac8aaeabffc3311dcb151bf5","modified":1505958927342},{"_id":"themes/spfk/source/static/api/js/component/animate.js","hash":"00b6f74ed82e5a21a9295dd2dc963e892734b7f6","modified":1505958927346},{"_id":"themes/spfk/source/static/api/js/component/anticheat.js","hash":"ee6b11a7ed39ae67c1c2aeeef96b4a0f40f8083c","modified":1505958927346},{"_id":"themes/spfk/source/static/api/js/component/comm_tools.js","hash":"e651fbb1a85ab9c615ee833f4d042c203ef430bc","modified":1505958927346},{"_id":"themes/spfk/source/static/api/js/component/partners.js","hash":"a4c275ffb4d3557280211e6bf0573485b397ffd8","modified":1505958927346},{"_id":"themes/spfk/source/static/api/js/component/pop_base.js","hash":"eae6e120c149a21caa2883c533ccc40bc07fda51","modified":1505958927346},{"_id":"themes/spfk/source/static/api/js/component/pop_dialog.js","hash":"4417d2fa9ad8ff6c79a2352ef07e9d10a1313ee0","modified":1505958927346},{"_id":"themes/spfk/source/static/api/js/component/pop_popup.js","hash":"aface5a8c3f71e9e024bf0df5b361ed8f5452f50","modified":1505958927346},{"_id":"themes/spfk/source/static/api/js/component/pop_popup_slide.js","hash":"1119fc14abd34ffb8e1f653cd30ca26adaafa3bf","modified":1505958927346},{"_id":"themes/spfk/source/static/api/js/component/qrcode.js","hash":"2e3cc4cc5545556dd97ab899ff32d3ab7ccee808","modified":1505958927346},{"_id":"themes/spfk/source/static/api/js/conf/const.js","hash":"e2269411b129b847eca265fbc73f0d573f2474bb","modified":1505958927346},{"_id":"themes/spfk/source/static/api/js/conf/define.js","hash":"1393906ec26b7cf711c18e569a64f7d0c1951fc7","modified":1505958927346},{"_id":"themes/spfk/source/static/api/js/share/api_base.js","hash":"cbacd664451f80955c2ff4caccd4b9110062c714","modified":1505958927346},{"_id":"themes/spfk/source/static/api/js/share/combine_api.js","hash":"c45d76df1707b4fd739dae7022dc4a015632a81a","modified":1505958927346},{"_id":"themes/spfk/source/static/api/js/share/image_api.js","hash":"43a93415f2a5dd34760042c2bcd9f4692feecb5d","modified":1505958927346},{"_id":"themes/spfk/source/static/api/js/share/like_api.js","hash":"3526047b7f9f7446b883e2fa5ebcf143526449be","modified":1505958927346},{"_id":"themes/spfk/source/static/api/js/share/likeshare.js","hash":"d088ffe7b6451cedf202280d16e85f75a8c3bfd3","modified":1505958927346},{"_id":"themes/spfk/source/static/api/js/share/select_api.js","hash":"bf259a7912ee6124d741dbb5e45cab40bfa45e90","modified":1505958927346},{"_id":"themes/spfk/source/static/api/js/share/share_api.js","hash":"f7b86d0cc063f692a73a174d04e77cbe3c5facc7","modified":1505958927346},{"_id":"themes/spfk/source/static/api/js/share/slide_api.js","hash":"c317e3f7fec13d89178e475f26a689bb94e5aa76","modified":1505958927346},{"_id":"themes/spfk/source/static/api/js/start/router.js","hash":"97c195ae0d30dd8c7aac55a0555f082eeed4eee0","modified":1505958927346},{"_id":"themes/spfk/source/static/api/js/trans/trans.js","hash":"2bf87aff540cba3bee6cc05a7a8e9a2bc8b5d907","modified":1505958927346},{"_id":"themes/spfk/source/static/api/js/trans/trans_bdxc.js","hash":"da78025de5717315252d2d33b4252c89b891c71c","modified":1505958927346},{"_id":"themes/spfk/source/static/api/js/trans/trans_bdysc.js","hash":"1be632b99fdd67ba5279aa6c56db7d528fd094c3","modified":1505958927346},{"_id":"themes/spfk/source/static/api/js/trans/trans_weixin.js","hash":"e68e9bc91ee6fbcd64ac788463870f01602a8562","modified":1505958927346},{"_id":"themes/spfk/source/static/api/js/view/image_view.js","hash":"bb66297a5bd2c7dd931b9145f5d4a616876f3373","modified":1505958927346},{"_id":"themes/spfk/source/static/api/js/view/like_view.js","hash":"42b51bd3ee4815b9ca8df6dacb9c81a8a34d762a","modified":1505958927346},{"_id":"themes/spfk/source/static/api/js/view/select_view.js","hash":"2611efec1d31d85609feea0c57e14d3f817a6220","modified":1505958927346},{"_id":"themes/spfk/source/static/api/js/view/share_view.js","hash":"f445ce9cbbcf887da5e248b1cfadc03ab7df76d0","modified":1505958927346},{"_id":"themes/spfk/source/static/api/js/view/slide_view.js","hash":"973ded5cd15eb119e79ffd9326af3a44167b26bd","modified":1505958927346},{"_id":"themes/spfk/source/static/api/js/view/view_base.js","hash":"b3fd7dafde05d63af3dfe9e0a59f9367f81402c5","modified":1505958927346},{"_id":"themes/spfk/source/background/bg-111.jpg","hash":"e1631b47fede8da6c03582ceed648668547c4f09","modified":1505958927294},{"_id":"themes/spfk/source/background/bg-16.jpg","hash":"d1a34d0c4b69262169b543922e4aeb4dae997ad8","modified":1505958927302},{"_id":"themes/spfk/source/background/bg-13.jpg","hash":"d7237c6014e28c90f53287f48f718d0759af104b","modified":1505958927298},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.svg","hash":"b06b5c8f67fd632cdc62a33b62ae4f74194131b3","modified":1505958927334},{"_id":"themes/spfk/source/static/api/js/base/tangram.js","hash":"e1952e27f6dc3d6339128cec157acef8cc0a775f","modified":1505958927342},{"_id":"themes/spfk/source/background/bg-2.jpg","hash":"40a6db13e9c461f80e2c4efee7fb63bbd594e751","modified":1505958927310},{"_id":"themes/spfk/source/background/bg-5.jpg","hash":"2d5da2a209732cce0abf2ca234c0bef0516b65ff","modified":1505958927322},{"_id":"public/archives/2016/page/2/index.html","hash":"aa257af5f76749bae92c1634413e32cb88739f96","modified":1505961331276},{"_id":"public/archives/2016/12/page/2/index.html","hash":"68f504a1209315c61a19a2ce9341522922fa118f","modified":1505961331518},{"_id":"public/archives/2017/page/3/index.html","hash":"ceb40ceffa396a9b5c4e6ae3f8fccc0360f5821b","modified":1505961331537},{"_id":"public/archives/2017/01/page/2/index.html","hash":"d62361c4db4005c33edac6a9007057890b805ba1","modified":1505959314611},{"_id":"public/archives/2017/02/index.html","hash":"9970ee5bee1f30c8818f66f87d2627d2ff768927","modified":1505959314611},{"_id":"public/archives/2017/03/index.html","hash":"1a8a6c5a588d8d598a97bb6d1aebb666bbb31923","modified":1505959314611},{"_id":"public/archives/2017/04/index.html","hash":"88995f89498db12b80b4c0b7bcce4a7b90ebc6b9","modified":1505961331537},{"_id":"public/2017/04/08/mysql-udf插件开发/index.html","hash":"b1ac75e8a9fa64797a422792e32fd18f5d0ac37e","modified":1505961331534},{"_id":"public/2017/04/08/docker使用代理/index.html","hash":"ee20be37712c5c3a993a84f513e045bef378bad5","modified":1505961331534},{"_id":"public/2017/04/08/CoreFreq-CPU监控软件/index.html","hash":"c92ac4b51c368dc1679b7f5f06e61d03b313fc34","modified":1505961331534},{"_id":"public/2017/04/08/Ubuntu16-04安装Stacer工具/index.html","hash":"3ba50a902364c3cc1386757791e7584b79ebd69a","modified":1505961331534},{"_id":"public/2017/03/12/ubuntu16-04搭建xrdp远程桌面链接/index.html","hash":"3ee41cf9994d6813177b9ad44146699a2882ef7b","modified":1505961331534},{"_id":"public/2017/03/12/Mediostream框架filter使用说明/index.html","hash":"06c52ef26cc7067dddea479127f8db6431175426","modified":1505961331534},{"_id":"public/2017/03/12/同步webrtc-android源码/index.html","hash":"6f22cec6aac2b06141cd7607f1913199243d6912","modified":1505961331534},{"_id":"public/2017/03/12/我对灯光的各种印象/index.html","hash":"b2e1cd131384e59144a64e526dad1d6059c47bf3","modified":1505961331534},{"_id":"public/2017/02/14/armbian定制教程/index.html","hash":"5191a9cccad727e8746a1b3b71374dd9c52751b2","modified":1505961331534},{"_id":"public/2017/02/14/orangePi源码编译教程/index.html","hash":"85230726af26aa742922fad3e46f92415210a8f4","modified":1505961331534},{"_id":"public/2017/01/21/编译hikey-bootloader/index.html","hash":"e134fd0c7d5c5efae8f3983032864a04d58445a3","modified":1505961331534},{"_id":"public/2017/01/21/hikey替换android内核/index.html","hash":"f26d8089cf37316684075d69b01acb5f2d5e5a3e","modified":1505961331535},{"_id":"public/2017/01/21/hikey-android源码编译/index.html","hash":"4158fc2e8eef20c5ac138ff25f7cccc3ca7c569c","modified":1505961331535},{"_id":"public/2017/01/21/同步codeaurora-Android源码/index.html","hash":"44f9e34d061c71b058fc80a9dc926e39709912c3","modified":1505961331535},{"_id":"public/2017/01/21/烧写poky生成镜像/index.html","hash":"693c505cfc5745cf9046bc2bb63e8b66d9fdb5df","modified":1505961331535},{"_id":"public/2017/01/21/raspbian更新内核/index.html","hash":"515914d0dff882abbaf58ad07896f5fcde1b02e8","modified":1505961331535},{"_id":"public/2017/01/21/poky-raspbian开发/index.html","hash":"59b2b2e6acbb93cb59512cfeb641279532839410","modified":1505961331535},{"_id":"public/2017/01/21/poky-raspbian教程/index.html","hash":"5884d3dd291e58f35994e267d39755bbf1ccb2c0","modified":1505961331535},{"_id":"public/2017/01/21/android键盘输入读取/index.html","hash":"66671d61be2b15a86492c169559880f831f5cef2","modified":1505961331535},{"_id":"public/2017/01/21/android-gpio口控制/index.html","hash":"a99bd55b2c4064dc674a72259bcb7af24ee12388","modified":1505961331535},{"_id":"public/2017/01/21/Ubuntu16-04安装Screenlets/index.html","hash":"40d142d7b5ca1d810b40bb6d158a8bd30f91df54","modified":1505961331535},{"_id":"public/2016/12/19/linux终端实现代理/index.html","hash":"d52333702eb6fcd7b65dc97cf85518aa492223ba","modified":1505961331535},{"_id":"public/2016/12/19/linux-git实现代理/index.html","hash":"721e24488d437a72c7f0220b06c79adf74959638","modified":1505961331535},{"_id":"public/2016/12/19/使用ndk编译c可执行程序/index.html","hash":"1fcbd48c3a94394b7aa21eb0e3b92cbe2af51e3a","modified":1505961331535},{"_id":"public/2016/12/19/编译Android源码/index.html","hash":"be4fc3bde76a33fc1156f8afd4c0297ee70becf2","modified":1505961331536},{"_id":"public/2016/12/19/提取刷机包内system-new-dat文件/index.html","hash":"1029198c21003209aa061abf088d89fcb405f3c9","modified":1505961331536},{"_id":"public/2016/12/19/加速android源码编译/index.html","hash":"5db3877bd3d7baa924b2c6011285d0b493c48a6d","modified":1505961331536},{"_id":"public/2016/12/19/安装切换openjdk/index.html","hash":"7812b9414f21b907e765f7b876e7c314d540b525","modified":1505961331536},{"_id":"public/2016/12/19/android手机解锁引导程序/index.html","hash":"596bef420bf58891176258f6d60e7176a92778d5","modified":1505961331536},{"_id":"public/2016/12/19/用open-gapps安装google-play/index.html","hash":"b17617e2b732c09519ddaec28e32a7aab042c6c9","modified":1505961331536},{"_id":"public/2016/12/19/各种开源Android-系统定制/index.html","hash":"221ca7a83d730d36addd2ace3fbc6030e81fb7b2","modified":1505961331536},{"_id":"public/2016/12/19/各种Android手机Root方法/index.html","hash":"efbbb1ce600564f188cf6cd7b72983fa7b21570a","modified":1505961331536},{"_id":"public/2016/12/19/FileZillaFTP使用教程/index.html","hash":"fabf8faad526bb0c105b802496e1c8aa164837c1","modified":1505961331536},{"_id":"public/2016/12/19/Android手机刷recovery/index.html","hash":"bacd701110fa035118096b88355c1eb3f60f293f","modified":1505961331536},{"_id":"public/2016/12/19/mediastreamer/index.html","hash":"178d2f24e8bd744bcad2b58a862ae411c1685a3d","modified":1505961331536},{"_id":"public/2016/12/07/My-New-Post/index.html","hash":"e443eccdf54285ef47c09d4b28a7d9baf1b5e941","modified":1505959314615},{"_id":"public/archives/index.html","hash":"874f018e4d8b46b48568114dca8389e14d93c6de","modified":1505961331536},{"_id":"public/archives/page/2/index.html","hash":"39983cdd43ac262a45d1e73ccb51589683d03890","modified":1505961331536},{"_id":"public/archives/page/3/index.html","hash":"8efb42f6a9e4b3a553bb58d79301cf2d6921df40","modified":1505961331537},{"_id":"public/archives/page/4/index.html","hash":"f1d8cfcf34e24d10e0ea571c1752e62be62e5ea8","modified":1505961331537},{"_id":"public/archives/2016/index.html","hash":"d0f233ec93393186ab19de6b4ae245705c16e114","modified":1505959314615},{"_id":"public/archives/2016/12/index.html","hash":"2f8044684166bd67b76bb8074e1eeee55b3c721c","modified":1505959314615},{"_id":"public/archives/2017/index.html","hash":"4e554f77648210db1112cd26c59223257506652f","modified":1505961331537},{"_id":"public/archives/2017/page/2/index.html","hash":"96dcc6cf586c9cc1392c6ef0c64f999fd25c512f","modified":1505961331537},{"_id":"public/archives/2017/01/index.html","hash":"bcd49aab7bd5299f6dc5553f4b68bd01e1b0d529","modified":1505959314616},{"_id":"public/index.html","hash":"e6ad2def113eab9557a14328cdac64fb2545ac37","modified":1505961331537},{"_id":"public/page/2/index.html","hash":"d549129248d14e2fe750d7bb659f9d15c91ff6f8","modified":1505961331537},{"_id":"public/page/3/index.html","hash":"f46895f837f435b61ec50beba5a5f1950e2497f8","modified":1505961331537},{"_id":"public/page/4/index.html","hash":"28bc93f799852a9d6639f4235d4cd9370370a7a6","modified":1505961331537},{"_id":"public/static/api/img/share/l8.gif","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1505959314616},{"_id":"public/CNAME","hash":"2381f86fde72d44286a0a050aca02d096fa5d2b6","modified":1505959314642},{"_id":"public/apple-touch-icon.png","hash":"c36a373c7830d61d1ce092bd5a88d0e9b54212fd","modified":1505959314642},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1505959314642},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1505959314642},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1505959314642},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1505959314642},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1505959314642},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1505959314642},{"_id":"public/img/Head_portrait.jpg","hash":"ce10af4bed9738e6c61f13ca4699e085b67392cd","modified":1505959314642},{"_id":"public/img/coderwall.png","hash":"fa84676c4d654e040e51fd34bfcd9f9348cd5331","modified":1505959314642},{"_id":"public/img/delicious.png","hash":"9553a5f5189e4a953e04a58a49dbfa74b86b73dd","modified":1505959314642},{"_id":"public/img/douban.png","hash":"e2ade003ffadd5826ee66ec23901c2d6e8607e4e","modified":1505959314642},{"_id":"public/img/facebook.png","hash":"d19ad7a0903daf26817afd8753cd97e0cc714f54","modified":1505959314642},{"_id":"public/img/favicon.png","hash":"5b4e9c94ff3396db5b074b69c1aa5bb909aba825","modified":1505959314643},{"_id":"public/img/github.png","hash":"b84d03b32fa388dcbf149296ebd16dce6223d48d","modified":1505959314643},{"_id":"public/img/google.png","hash":"61a21fec7346fa3400b747ac9a201cf3d5bc013d","modified":1505959314643},{"_id":"public/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1505959314643},{"_id":"public/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1505959314643},{"_id":"public/img/instagram.png","hash":"3c148a3882a8d141d7d405be8c4815d0dcb03561","modified":1505959314643},{"_id":"public/img/linkedin.png","hash":"e203138fb53c257cb214e97f4e30091b9c568d2c","modified":1505959314643},{"_id":"public/img/mail.png","hash":"fca8199cc77fdbd700a45bf56d091c82f4a67fe7","modified":1505959314643},{"_id":"public/img/pinboard.png","hash":"0891fbb6d092fa012bf936019923383d84c6aeb0","modified":1505959314643},{"_id":"public/img/pinterest.png","hash":"9c72917f8779c083157c6ce7a5d62ed4874f0630","modified":1505959314643},{"_id":"public/img/qq.png","hash":"fd741764c5528fe371f053beac99839a97900eef","modified":1505959314643},{"_id":"public/img/rss.png","hash":"430fd47340e75214c081abd05cd7410cf7c71b86","modified":1505959314643},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1505959314643},{"_id":"public/img/segmentfault.png","hash":"4483ab273423deb65021111fc8ad9512b69e45b2","modified":1505959314643},{"_id":"public/img/stackoverflow.png","hash":"da5dfe9043055c95e479d49c78cd3b020de608f2","modified":1505959314643},{"_id":"public/img/twitter.png","hash":"14dbb8e62d056525253bc0de13acd1723da7a934","modified":1505959314643},{"_id":"public/img/wechat.png","hash":"7ca41b6e32ca4dac419225261ab4fee5a88f73a9","modified":1505959314643},{"_id":"public/img/weibo.png","hash":"280dae3fd38086158b4a1b57edb94c06b1a5014b","modified":1505959314643},{"_id":"public/img/zhihu.png","hash":"a6d6ef65e9ac82e613a311810391ebb90d9b1c1d","modified":1505959314644},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1505959314644},{"_id":"public/static/api/img/share/icons_0_16.png","hash":"0eec1e81a04664b2032bd389513349e9bd5d5b0f","modified":1505959314644},{"_id":"public/static/api/img/share/icons_0_24.png","hash":"a89223f9714c8c4fa169430a327963ca6a1c9a6e","modified":1505959314644},{"_id":"public/static/api/img/share/icons_0_32.png","hash":"c20521634fdacef39631031671528713e6ba6081","modified":1505959314644},{"_id":"public/static/api/img/share/icons_1_16.png","hash":"3793c3265429ab7b830bfaf18322259cd0b4c4ef","modified":1505959314644},{"_id":"public/static/api/img/share/icons_1_24.png","hash":"9f1d472095dbe138ef7aff069b1d18cae6ffa942","modified":1505959314644},{"_id":"public/static/api/img/share/icons_1_32.png","hash":"09825de5f238c97e4374d545961d6e0d5bbfb3e2","modified":1505959314644},{"_id":"public/static/api/img/share/icons_2_16.png","hash":"07340442cb61aabb419dd226f4bfb206a7577f52","modified":1505959314644},{"_id":"public/static/api/img/share/icons_2_24.png","hash":"e47fb87c533f2be89f22901f0864d9b5ef83412d","modified":1505959314644},{"_id":"public/static/api/img/share/icons_2_32.png","hash":"deba62865245a6b5aafa446787d72165c703b943","modified":1505959314644},{"_id":"public/static/api/img/share/l0.gif","hash":"738b92632b0a9789a9eb568b8d101eb64f55f6e0","modified":1505959314644},{"_id":"public/static/api/img/share/l1.gif","hash":"70e1932ca7a622ed3322b683eceb7a590860a55e","modified":1505959314644},{"_id":"public/static/api/img/share/l2.gif","hash":"e6a5d6104c226a686d48759e0268e09d762e242e","modified":1505959314644},{"_id":"public/static/api/img/share/l3.gif","hash":"26c0dd37d98df63abb9d3d83e01bb47c34ee3f0f","modified":1505959314644},{"_id":"public/static/api/img/share/l4.gif","hash":"8a9c3cf99766d3f07a9c480cfdffdc3197b9a6b9","modified":1505959314645},{"_id":"public/static/api/img/share/l5.gif","hash":"148706f56b8ef4fd9d8483d0ac3a6730e72fc0ad","modified":1505959314645},{"_id":"public/static/api/img/share/l6.gif","hash":"f4b8e3188f744f13aca46b27b451d55d9e209c48","modified":1505959314645},{"_id":"public/static/api/img/share/l7.gif","hash":"e4f7e5e56c8f4eb026b5cb0affe3bd69c31af261","modified":1505959314645},{"_id":"public/static/api/img/share/pop_c.gif","hash":"e8b9ece6ddaa47ccb2c15f2396d1cd3020740603","modified":1505959314645},{"_id":"public/static/api/img/share/r0.gif","hash":"882f255fbafc0136a3917c1dd40db88879c1b1c1","modified":1505959314645},{"_id":"public/static/api/img/share/r1.gif","hash":"96064d132ee2477c0e444c2e18162f9d1dc9e9c2","modified":1505959314645},{"_id":"public/static/api/img/share/r2.gif","hash":"67c84a67be3b039892e9cb8c7c29ed29813bf60f","modified":1505959314645},{"_id":"public/static/api/img/share/r3.gif","hash":"ecdd21f1457be54afc96e2d005524eef93d7bf85","modified":1505959314645},{"_id":"public/static/api/img/share/r4.gif","hash":"517435e69a2215a0f003e75a4861154ca963c30e","modified":1505959314645},{"_id":"public/static/api/img/share/r5.gif","hash":"e61b32d1830390303927bdab21823959f8dc7023","modified":1505959314645},{"_id":"public/static/api/img/share/r6.gif","hash":"4bc01e08ef0015fddf5b8c7257c094ec584ca3ee","modified":1505959314645},{"_id":"public/static/api/img/share/r7.gif","hash":"3c596c924910c93cf3e37cc1b2870dbf271151e2","modified":1505959314645},{"_id":"public/static/api/img/share/r8.gif","hash":"c068ece54a72a3f2428d4f1b5ca7c176f027dd4e","modified":1505959314645},{"_id":"public/static/api/img/share/sc.png","hash":"e5a2ca56973a3d6608e7e3a48ebd9fa5ebda9991","modified":1505959314645},{"_id":"public/static/api/img/share/selectshare_close.png","hash":"6f3666278268890a153c85fb9f04ac848c442561","modified":1505959314645},{"_id":"public/static/api/img/share/share-search-icon.png","hash":"0629677a7eb5aa3e8bab3faa310c6d8c467a3287","modified":1505959314645},{"_id":"public/img/head.jpg","hash":"80c0999acfc1173183d3dd243b4b90d077ab97cb","modified":1505959316174},{"_id":"public/font-awesome/fonts/FontAwesome.otf","hash":"42c179eef588854b5ec151bcf6a3f58aa8b79b11","modified":1505959316179},{"_id":"public/font-awesome/fonts/fontawesome-webfont.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1505959316188},{"_id":"public/font-awesome/fonts/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1505959316188},{"_id":"public/font-awesome/fonts/fontawesome-webfont.eot","hash":"986eed8dca049714e43eeebcb3932741a4bec76d","modified":1505959316188},{"_id":"public/css/loading-style.css","hash":"1f67362d809e85edc9f122db7bc3711af1ed1d8b","modified":1505959316212},{"_id":"public/css/showshare.css","hash":"3efc4afd0d136fb5dec993e9cd9ce85b9d1cf589","modified":1505959316212},{"_id":"public/fancybox/jquery.fancybox.css","hash":"b6aa6692c2e5f8bd74d96827b78570f0c5683c20","modified":1505959316212},{"_id":"public/js/TweenMax.js","hash":"0ba64564a4fde4085fa3971dd53b7d64a41751e1","modified":1505959316212},{"_id":"public/js/clipboard.min.js","hash":"c13b4bb8fee46447284590d2afc0efca0ea3cb7b","modified":1505959316212},{"_id":"public/js/instagram.js","hash":"f19adbcc0dac33536bc6660598059048ec901882","modified":1505959316212},{"_id":"public/js/jquery.lazyload.js","hash":"8e4ad3e17f8e82be311b6b6e87811762e2b2d764","modified":1505959316212},{"_id":"public/js/main.js","hash":"921b2fb56e48cce3d16ceb4a3fadf8e666c73a0a","modified":1505959316212},{"_id":"public/js/mobile.js","hash":"d3847e5bcaf39108931724ecb02770c62b10889f","modified":1505959316214},{"_id":"public/js/pc.js","hash":"ab375af6e3bcd054b1e87e1a8dcd3d7d25c2db40","modified":1505959316214},{"_id":"public/js/plugins.js","hash":"c1cf96b2d852b5803228a34d99014b005623bc06","modified":1505959316214},{"_id":"public/css/pace/pace-theme-flash.css","hash":"508bce8b59a1fbc1f1443a7c4ab3b026e5517dab","modified":1505959316214},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1505959316214},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1505959316214},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1505959316214},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1505959316214},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1505959316214},{"_id":"public/js/404/jquery.parallaxify-0.0.2.min.js","hash":"b97e2dfcb210b76f7bdd6e1800b26128bf4fad99","modified":1505959316215},{"_id":"public/static/api/css/imgshare.css","hash":"c3624a2dde649ed28b2e5d1f050fd971fbaf71a0","modified":1505959316215},{"_id":"public/static/api/css/like.css","hash":"2024d58206df01b858c38f07957f928b44e14cb3","modified":1505959316215},{"_id":"public/static/api/css/select_share.css","hash":"d0259abdb410193cf761e42bffaa51e70327a0cd","modified":1505959316216},{"_id":"public/static/api/css/share_popup.css","hash":"338ba2b30ef8ce0c84cd36b37d7f8482996291dc","modified":1505959316216},{"_id":"public/static/api/css/share_style0_16.css","hash":"090e77e9e6e9b8ee0d73a233cbe46499de935bdd","modified":1505959316216},{"_id":"public/static/api/css/share_style0_24.css","hash":"7d1f9f32b80f91001f4f951aa045180cde22d82e","modified":1505959316216},{"_id":"public/static/api/css/share_style0_32.css","hash":"7c2d12ea532c8a55c102b649bb23ef5bf53b3ed3","modified":1505959316217},{"_id":"public/static/api/css/share_style1_16.css","hash":"aeb4e9fa96cfa0167481e1f4007079dc3f3c6c27","modified":1505959316217},{"_id":"public/static/api/css/share_style1_24.css","hash":"3ee5f745c863b4f68299fe5dc125f913ca619c07","modified":1505959316217},{"_id":"public/static/api/css/share_style1_32.css","hash":"626d67a4c0bb72a152e90d25dbf281c0c35a2140","modified":1505959316217},{"_id":"public/static/api/css/share_style2.css","hash":"1ad451187cde8a74843fd398b924ca0ac911e9be","modified":1505959316217},{"_id":"public/static/api/css/share_style2_16.css","hash":"572c8e856988e463eb865f38d33ba003cc20d083","modified":1505959316217},{"_id":"public/static/api/css/share_style2_24.css","hash":"917d963d3be111064cbb1d122963da91ee3724a0","modified":1505959316217},{"_id":"public/static/api/css/share_style2_32.css","hash":"3657bbc4b5bbc66ebca4906ee0a1cbf9f98be883","modified":1505959316217},{"_id":"public/static/api/css/share_style4.css","hash":"0a9e2ed712a5ef5c4699c038cd001a0d688a0fdf","modified":1505959316217},{"_id":"public/static/api/css/slide_share.css","hash":"3898feaf45559b039f885bee8f9e831f48adb20c","modified":1505959316217},{"_id":"public/static/api/css/weixin_popup.css","hash":"5e6c5084bfd16051de5776c2e136a5462b08a32c","modified":1505959316217},{"_id":"public/static/api/js/trans/data.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1505959316217},{"_id":"public/static/api/js/trans/logger.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1505959316217},{"_id":"public/static/api/js/base/class.js","hash":"ad1e5a3011e30b83ac8aaeabffc3311dcb151bf5","modified":1505959316217},{"_id":"public/static/api/js/component/animate.js","hash":"00b6f74ed82e5a21a9295dd2dc963e892734b7f6","modified":1505959316217},{"_id":"public/static/api/js/component/anticheat.js","hash":"ee6b11a7ed39ae67c1c2aeeef96b4a0f40f8083c","modified":1505959316217},{"_id":"public/static/api/js/component/comm_tools.js","hash":"e651fbb1a85ab9c615ee833f4d042c203ef430bc","modified":1505959316218},{"_id":"public/static/api/js/component/partners.js","hash":"a4c275ffb4d3557280211e6bf0573485b397ffd8","modified":1505959316218},{"_id":"public/static/api/js/component/pop_base.js","hash":"eae6e120c149a21caa2883c533ccc40bc07fda51","modified":1505959316218},{"_id":"public/static/api/js/component/pop_dialog.js","hash":"4417d2fa9ad8ff6c79a2352ef07e9d10a1313ee0","modified":1505959316218},{"_id":"public/static/api/js/component/pop_popup.js","hash":"aface5a8c3f71e9e024bf0df5b361ed8f5452f50","modified":1505959316218},{"_id":"public/static/api/js/component/pop_popup_slide.js","hash":"1119fc14abd34ffb8e1f653cd30ca26adaafa3bf","modified":1505959316218},{"_id":"public/static/api/js/component/qrcode.js","hash":"2e3cc4cc5545556dd97ab899ff32d3ab7ccee808","modified":1505959316218},{"_id":"public/static/api/js/conf/const.js","hash":"e2269411b129b847eca265fbc73f0d573f2474bb","modified":1505959316218},{"_id":"public/static/api/js/conf/define.js","hash":"1393906ec26b7cf711c18e569a64f7d0c1951fc7","modified":1505959316218},{"_id":"public/static/api/js/share/api_base.js","hash":"cbacd664451f80955c2ff4caccd4b9110062c714","modified":1505959316218},{"_id":"public/static/api/js/share/combine_api.js","hash":"c45d76df1707b4fd739dae7022dc4a015632a81a","modified":1505959316218},{"_id":"public/static/api/js/share/image_api.js","hash":"43a93415f2a5dd34760042c2bcd9f4692feecb5d","modified":1505959316218},{"_id":"public/static/api/js/share/like_api.js","hash":"3526047b7f9f7446b883e2fa5ebcf143526449be","modified":1505959316219},{"_id":"public/static/api/js/share/likeshare.js","hash":"d088ffe7b6451cedf202280d16e85f75a8c3bfd3","modified":1505959316219},{"_id":"public/static/api/js/share/select_api.js","hash":"bf259a7912ee6124d741dbb5e45cab40bfa45e90","modified":1505959316219},{"_id":"public/static/api/js/share/share_api.js","hash":"f7b86d0cc063f692a73a174d04e77cbe3c5facc7","modified":1505959316219},{"_id":"public/static/api/js/share/slide_api.js","hash":"c317e3f7fec13d89178e475f26a689bb94e5aa76","modified":1505959316219},{"_id":"public/static/api/js/start/router.js","hash":"97c195ae0d30dd8c7aac55a0555f082eeed4eee0","modified":1505959316219},{"_id":"public/static/api/js/trans/trans.js","hash":"2bf87aff540cba3bee6cc05a7a8e9a2bc8b5d907","modified":1505959316219},{"_id":"public/static/api/js/trans/trans_bdxc.js","hash":"da78025de5717315252d2d33b4252c89b891c71c","modified":1505959316219},{"_id":"public/static/api/js/trans/trans_bdysc.js","hash":"1be632b99fdd67ba5279aa6c56db7d528fd094c3","modified":1505959316219},{"_id":"public/static/api/js/trans/trans_weixin.js","hash":"e68e9bc91ee6fbcd64ac788463870f01602a8562","modified":1505959316219},{"_id":"public/static/api/js/view/image_view.js","hash":"bb66297a5bd2c7dd931b9145f5d4a616876f3373","modified":1505959316219},{"_id":"public/static/api/js/view/like_view.js","hash":"42b51bd3ee4815b9ca8df6dacb9c81a8a34d762a","modified":1505959316219},{"_id":"public/static/api/js/view/select_view.js","hash":"2611efec1d31d85609feea0c57e14d3f817a6220","modified":1505959316219},{"_id":"public/static/api/js/view/share_view.js","hash":"f445ce9cbbcf887da5e248b1cfadc03ab7df76d0","modified":1505959316219},{"_id":"public/static/api/js/view/slide_view.js","hash":"973ded5cd15eb119e79ffd9326af3a44167b26bd","modified":1505959316219},{"_id":"public/static/api/js/view/view_base.js","hash":"b3fd7dafde05d63af3dfe9e0a59f9367f81402c5","modified":1505959316219},{"_id":"public/css/style.css","hash":"32f84bb52d17c42d7f62b8df86276a9f404616df","modified":1505959316219},{"_id":"public/fancybox/jquery.fancybox.js","hash":"a82597493d75ea989ca586e09173cff332efe41e","modified":1505959316219},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1505959316220},{"_id":"public/js/pace.js","hash":"b49c10cd65d9488f7338e3c778e55ac6628650f3","modified":1505959316220},{"_id":"public/js/TweenMax.min.js","hash":"eaa4e4a08400da3f22dedda706ba56cdce5b0b7a","modified":1505959316220},{"_id":"public/js/embed.js","hash":"8d2d4a812ab639bc02fdd8749d3a39f6b9406c54","modified":1505959316220},{"_id":"public/font-awesome/css/font-awesome.css","hash":"b488600451227b445414796e9b8550e7c1bd6d29","modified":1505959316220},{"_id":"public/font-awesome/css/font-awesome.min.css","hash":"12d6861075de8e293265ff6ff03b1f3adcb44c76","modified":1505959316220},{"_id":"public/js/404/jquery-2.0.3.min.js","hash":"fbf9c77d0c4e3c34a485980c1e5316b6212160c8","modified":1505959316220},{"_id":"public/static/api/js/share.js","hash":"5e71147fe4a93bc99387a5cc1c6894d8b6ab2d5e","modified":1505959316220},{"_id":"public/static/api/js/base/tangram.js","hash":"e1952e27f6dc3d6339128cec157acef8cc0a775f","modified":1505959316220},{"_id":"public/background/bg-1.jpg","hash":"f0617756387d74f99afe0087c7b93a32f3c7096b","modified":1505959316220},{"_id":"public/background/bg-109.jpg","hash":"6171c1e921c8cc9bdcd7276cf7f0bee5295f4672","modified":1505959316221},{"_id":"public/background/bg-11.jpg","hash":"d69a0447e91f62977b144737f08620d77037c76a","modified":1505959316221},{"_id":"public/background/bg-20.jpg","hash":"9d428ac435198b2a0107102a2e9ae71e53afe364","modified":1505959316221},{"_id":"public/background/bg-3.jpg","hash":"f1347eddd07bdae93ab6bebad8627eddc5baeb44","modified":1505959316221},{"_id":"public/background/bg.jpg","hash":"f0617756387d74f99afe0087c7b93a32f3c7096b","modified":1505959316221},{"_id":"public/background/bg-17.jpg","hash":"6ab5e470059e8ccb0c8bc6786abfb5db7e9a1826","modified":1505959316221},{"_id":"public/font-awesome/fonts/fontawesome-webfont.ttf","hash":"6484f1af6b485d5096b71b344e67f4164c33dd1f","modified":1505959316221},{"_id":"public/background/bg-15.jpg","hash":"ce5760578eb814fe951c56200e81c6f47b6468d4","modified":1505959316248},{"_id":"public/background/bg-23.jpg","hash":"050937d649be2c02ef8a66a0ffe7d320b236d1b0","modified":1505959316248},{"_id":"public/background/bg-7.jpg","hash":"acbe0946a47ba16b79f062dbee14c4c9ff9a48da","modified":1505959316248},{"_id":"public/img/Head_portrait.png","hash":"70f86c59121b5cf9aed871c2821a4cb7cef2b5fc","modified":1505959316248},{"_id":"public/img/me_head.png","hash":"a7c04861d00be044af7b2a96379e45ba321d461e","modified":1505959316249},{"_id":"public/background/bg-14.jpg","hash":"2fd6ede2bc9de2d26d910ea4e45d28b2350881eb","modified":1505959316270},{"_id":"public/background/bg-9.jpg","hash":"df731da0fe0de9a05d99d017e747252c990f972d","modified":1505959316270},{"_id":"public/background/bg-19.jpg","hash":"d77504412d28432643fc61ed9fd9f7c57096bdd9","modified":1505959316282},{"_id":"public/background/bg-21.jpg","hash":"7c4c6cd5d75115093fa29bba7372fa198f04b0f1","modified":1505959316282},{"_id":"public/background/bg-22.jpg","hash":"7a055391fa4188d9c22fdc1d34a10b26e2f0826d","modified":1505959316282},{"_id":"public/background/bg-24.jpg","hash":"796fa5262d7714e8ce9496a2d03864429cfc5b45","modified":1505959316282},{"_id":"public/background/bg-4.jpg","hash":"da47f889e02241c8b095f852fb7efd89c114599d","modified":1505959316283},{"_id":"public/background/bg-6.jpg","hash":"1a4f4c8875b2c56e7992000979a7fca7856eec35","modified":1505959316283},{"_id":"public/background/bg-8.jpg","hash":"dbecc189e28d00fa23e397eb512e039c2ff03c87","modified":1505959316283},{"_id":"public/font-awesome/fonts/fontawesome-webfont.svg","hash":"b06b5c8f67fd632cdc62a33b62ae4f74194131b3","modified":1505959316284},{"_id":"public/background/bg-10.jpg","hash":"dfb23c1c3cf8a3dcb8dc0ea10cf06501c151a2a2","modified":1505959316298},{"_id":"public/background/bg-12.jpg","hash":"2e0815591309863d8130881681cde32ec4bfebf1","modified":1505959316298},{"_id":"public/background/bg-18.jpg","hash":"4d61dc41a781a9c1d37c9e5e413ac0d8a9538f6a","modified":1505959316299},{"_id":"public/img/bg.jpg","hash":"1bcba3c6348e2190a42bff762800bf846cf9239c","modified":1505959316299},{"_id":"public/background/bg-111.jpg","hash":"e1631b47fede8da6c03582ceed648668547c4f09","modified":1505959316312},{"_id":"public/background/bg-16.jpg","hash":"d1a34d0c4b69262169b543922e4aeb4dae997ad8","modified":1505959316312},{"_id":"public/background/bg-13.jpg","hash":"d7237c6014e28c90f53287f48f718d0759af104b","modified":1505959316313},{"_id":"public/background/bg-2.jpg","hash":"40a6db13e9c461f80e2c4efee7fb63bbd594e751","modified":1505959316330},{"_id":"public/background/bg-5.jpg","hash":"2d5da2a209732cce0abf2ca234c0bef0516b65ff","modified":1505959316338},{"_id":"source/_posts/espeak编译安装.md","hash":"385aaa97a9bc36098ff39bca1b4faa5a7ebe5539","modified":1505961321626},{"_id":"source/_posts/haproxy代理搭建.md","hash":"e0865a071a3da5e7549fe6d2236dfab2d6deb321","modified":1505961321626},{"_id":"source/_posts/linux watchdog看门狗编程.md","hash":"688f381e6ae1a4263668f59810daf80bdb57c73c","modified":1505961321626},{"_id":"source/_posts/linux 系统下将pyqt打包成可执行文件.md","hash":"dbad7a8ac2475c167e12d01b9292f5ba7a377c98","modified":1505961321626},{"_id":"source/_posts/mantisbt 2.5.0在nginx服务器上安装.md","hash":"a136e38709bbef3e29a9fc58db585995beb97933","modified":1505961321626},{"_id":"source/_posts/mysql删除有空格字符名称的触发器.md","hash":"176d6b6700693cf23b263b2ebfeaf8daef1101a3","modified":1505961321626},{"_id":"source/_posts/ndk编译pjsip.md","hash":"7a313459c8a4161e3a0239e771c9b3cc88c7dffe","modified":1505961321626},{"_id":"source/_posts/nginx反向代理.md","hash":"6ec2d580fd707eaaefe5015e1ad029a0f27d0424","modified":1505961321626},{"_id":"source/_posts/orangepi zero gpio控制.md","hash":"9e5457da547def5018b0c4413623f1adfab735d6","modified":1505961321626},{"_id":"source/_posts/orangepi开启yuv摄像头驱动.md","hash":"804a6e035db9fc22759e940899338d585c1f3fcd","modified":1505961321626},{"_id":"source/_posts/xposed各种机型安装方法.md","hash":"0e9f370c2cc209e659f90e17146a2024c8e66584","modified":1505961321626},{"_id":"source/_posts/交叉编译pjsip.md","hash":"2966565088a46cb2b432186a8b173137016e01b7","modified":1505961321626},{"_id":"source/_posts/使用android studio查看andrdoid源码.md","hash":"4705261e11314a52ccc384192c681e102d448e36","modified":1505961321626},{"_id":"source/_posts/使用docker搭建android源码编译环境.md","hash":"f467c11544128b9bab629f857703bda07b122450","modified":1505961321626},{"_id":"source/_posts/使用ngrok实现内网穿透.md","hash":"e876d17e8ba334a6e77d63d5c690ccedcab3cf52","modified":1505961321626},{"_id":"source/_posts/高通MSM8909的gpio驱动编程.md","hash":"ed834e8530d30aaae2dfc01191054d26d45e678c","modified":1505961321626},{"_id":"public/archives/page/6/index.html","hash":"e480fa56895a2a207285007c1af24469e94a0e72","modified":1505961331542},{"_id":"public/archives/2017/05/index.html","hash":"8f014df272e779f4f2e6b4bea9825f0b209ee575","modified":1505961331543},{"_id":"public/archives/2017/08/index.html","hash":"8793a32d1077fa69808ba0a433c8e329f5e26f0a","modified":1505961331543},{"_id":"public/archives/2017/09/index.html","hash":"169bef62dfd695d953aad6b065996dc5a4a64b8d","modified":1505961331543},{"_id":"public/2017/09/20/orangepi zero gpio控制/index.html","hash":"d31c711f1dd95d90d25803541102058151e47331","modified":1505961331543},{"_id":"public/2017/08/30/orangepi开启yuv摄像头驱动/index.html","hash":"2833c2ce841560f02d2f8dd1480d98ecf959dd68","modified":1505961331543},{"_id":"public/2017/08/30/linux watchdog看门狗编程/index.html","hash":"12a7c0ae0e52bb67d75243a674b4c62d26fdab77","modified":1505961331543},{"_id":"public/2017/06/27/linux 系统下将pyqt打包成可执行文件/index.html","hash":"27a74b5b0c21f2f2c3a301e3e54f5330cbe591b4","modified":1505961331543},{"_id":"public/2017/06/15/mantisbt 2.5.0在nginx服务器上安装/index.html","hash":"4d51b0588175f1c3da5329e8e8a3bcad1a54495e","modified":1505961331543},{"_id":"public/2017/06/09/高通MSM8909的gpio驱动编程/index.html","hash":"d2e2d0bc682fe947ff646ccf9c7a9dc3e9170faf","modified":1505961331543},{"_id":"public/2017/06/08/nginx反向代理/index.html","hash":"01c8a7c074f0421b3d97817c32feb5a92acfd742","modified":1505961331543},{"_id":"public/2017/06/08/haproxy代理搭建/index.html","hash":"b5798aa78140ffb5b3c20a89cb113306d4761960","modified":1505961331543},{"_id":"public/2017/06/07/espeak编译安装/index.html","hash":"4186d312afe3e064f8a0806d6b05b22b49b04d94","modified":1505961331543},{"_id":"public/2017/06/07/使用docker搭建android源码编译环境/index.html","hash":"1e783dab1f431e4c4ed2bc35b8216076eb765786","modified":1505961331543},{"_id":"public/2017/05/27/xposed各种机型安装方法/index.html","hash":"1c202fd1105d208062a127417d7b97648600af5d","modified":1505961331543},{"_id":"public/2017/05/12/交叉编译pjsip/index.html","hash":"b1e10b3e4e8eccf0c8e1d87855ee51e928c227f1","modified":1505961331544},{"_id":"public/2017/05/12/ndk编译pjsip/index.html","hash":"e9dcf8bd8a7a59e36aa81fe3bdc8060dcb61b60a","modified":1505961331544},{"_id":"public/2017/04/21/使用ngrok实现内网穿透/index.html","hash":"7d77897a78392d842d74d74d410839898ba36a31","modified":1505961331544},{"_id":"public/2017/04/12/使用android studio查看andrdoid源码/index.html","hash":"69bf2d8c1696e5bf073efa83c6d8ef32a03d93a5","modified":1505961331544},{"_id":"public/2017/04/12/mysql删除有空格字符名称的触发器/index.html","hash":"bece420d574a4f8f1928c20187d1e797a4630d69","modified":1505961331544},{"_id":"public/archives/page/5/index.html","hash":"0d84e8b0d298687eb4a9b69cc8cb97a4fd241135","modified":1505961331544},{"_id":"public/archives/2017/page/4/index.html","hash":"13ed11ca2494ad97a74988bd2d0719557a617300","modified":1505961331544},{"_id":"public/archives/2017/06/index.html","hash":"ee9119fa44cb96376efdf4562d65ab1af739257d","modified":1505961331544},{"_id":"public/page/5/index.html","hash":"9b827c77dccf7f6f3f411ab32f0b64f178667280","modified":1505961331544},{"_id":"public/page/6/index.html","hash":"6434d27111ab51834bd42c14190b509c7094e76d","modified":1505961331544}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Android手机刷recovery","date":"2016-12-19T13:19:11.000Z","_content":"\n##以前觉得android刷机是件很麻烦的事，现在倒不觉得了。\n\n&emsp;只要手机刷入第三方的recovery，一切都好办了，无论是`root`还是刷`google play`。\n\n&emsp;recovery开源的有两大阵营，`twrp`和`cwm`。\n\n[TWRP GitHub](https://github.com/TeamWin/Team-Win-Recovery-Project)\n\n[TWRP下载](http://teamw.in/project/twrp2/)\n\n查找适合你手机机型的recovery\n\n[https://twrp.me/Devices/](https://twrp.me/Devices/)\n\n![Search](http://ohjvpki1b.bkt.clouddn.com/twrp_recovery.png)\n\nCyanogenMod源码中附带CWM源码,使用CyanogenMod可生成recovery镜像文件。\n\n找到适合自己机型的recovery后，手机进入fastboot模式(手机都有这个模式，进入该模式方法不一样而已)，数据线链接电脑，装好驱动，在Android工具目录下执行以下指令。\n\t\n\tfastboot flash recovery recovery.img\n成功后会显示，成功提示。\n\n然后点电源键强制关机，后重启，进入recover模式。然后就可以刷任何`zip`文件了\n\n##补充\n\n有些手机可能还需要解锁\n\n可以参考我另一篇文章\n\n[http://www.cnblogs.com/QUSIR/p/6179506.html](http://www.cnblogs.com/QUSIR/p/6179506.html)\n\n","source":"_posts/Android手机刷recovery.md","raw":"---\ntitle: Android手机刷recovery\ndate: 2016-12-19 21:19:11\ntags:\n---\n\n##以前觉得android刷机是件很麻烦的事，现在倒不觉得了。\n\n&emsp;只要手机刷入第三方的recovery，一切都好办了，无论是`root`还是刷`google play`。\n\n&emsp;recovery开源的有两大阵营，`twrp`和`cwm`。\n\n[TWRP GitHub](https://github.com/TeamWin/Team-Win-Recovery-Project)\n\n[TWRP下载](http://teamw.in/project/twrp2/)\n\n查找适合你手机机型的recovery\n\n[https://twrp.me/Devices/](https://twrp.me/Devices/)\n\n![Search](http://ohjvpki1b.bkt.clouddn.com/twrp_recovery.png)\n\nCyanogenMod源码中附带CWM源码,使用CyanogenMod可生成recovery镜像文件。\n\n找到适合自己机型的recovery后，手机进入fastboot模式(手机都有这个模式，进入该模式方法不一样而已)，数据线链接电脑，装好驱动，在Android工具目录下执行以下指令。\n\t\n\tfastboot flash recovery recovery.img\n成功后会显示，成功提示。\n\n然后点电源键强制关机，后重启，进入recover模式。然后就可以刷任何`zip`文件了\n\n##补充\n\n有些手机可能还需要解锁\n\n可以参考我另一篇文章\n\n[http://www.cnblogs.com/QUSIR/p/6179506.html](http://www.cnblogs.com/QUSIR/p/6179506.html)\n\n","slug":"Android手机刷recovery","published":1,"updated":"2017-09-21T01:55:27.186Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7ttahtz0000de5liakwfa75","content":"<p>##以前觉得android刷机是件很麻烦的事，现在倒不觉得了。</p>\n<p>&emsp;只要手机刷入第三方的recovery，一切都好办了，无论是<code>root</code>还是刷<code>google play</code>。</p>\n<p>&emsp;recovery开源的有两大阵营，<code>twrp</code>和<code>cwm</code>。</p>\n<p><a href=\"https://github.com/TeamWin/Team-Win-Recovery-Project\" target=\"_blank\" rel=\"external\">TWRP GitHub</a></p>\n<p><a href=\"http://teamw.in/project/twrp2/\" target=\"_blank\" rel=\"external\">TWRP下载</a></p>\n<p>查找适合你手机机型的recovery</p>\n<p><a href=\"https://twrp.me/Devices/\" target=\"_blank\" rel=\"external\">https://twrp.me/Devices/</a></p>\n<p><img src=\"http://ohjvpki1b.bkt.clouddn.com/twrp_recovery.png\" alt=\"Search\"></p>\n<p>CyanogenMod源码中附带CWM源码,使用CyanogenMod可生成recovery镜像文件。</p>\n<p>找到适合自己机型的recovery后，手机进入fastboot模式(手机都有这个模式，进入该模式方法不一样而已)，数据线链接电脑，装好驱动，在Android工具目录下执行以下指令。</p>\n<pre><code>fastboot flash recovery recovery.img\n</code></pre><p>成功后会显示，成功提示。</p>\n<p>然后点电源键强制关机，后重启，进入recover模式。然后就可以刷任何<code>zip</code>文件了</p>\n<p>##补充</p>\n<p>有些手机可能还需要解锁</p>\n<p>可以参考我另一篇文章</p>\n<p><a href=\"http://www.cnblogs.com/QUSIR/p/6179506.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/QUSIR/p/6179506.html</a></p>\n","excerpt":"","more":"<p>##以前觉得android刷机是件很麻烦的事，现在倒不觉得了。</p>\n<p>&emsp;只要手机刷入第三方的recovery，一切都好办了，无论是<code>root</code>还是刷<code>google play</code>。</p>\n<p>&emsp;recovery开源的有两大阵营，<code>twrp</code>和<code>cwm</code>。</p>\n<p><a href=\"https://github.com/TeamWin/Team-Win-Recovery-Project\">TWRP GitHub</a></p>\n<p><a href=\"http://teamw.in/project/twrp2/\">TWRP下载</a></p>\n<p>查找适合你手机机型的recovery</p>\n<p><a href=\"https://twrp.me/Devices/\">https://twrp.me/Devices/</a></p>\n<p><img src=\"http://ohjvpki1b.bkt.clouddn.com/twrp_recovery.png\" alt=\"Search\"></p>\n<p>CyanogenMod源码中附带CWM源码,使用CyanogenMod可生成recovery镜像文件。</p>\n<p>找到适合自己机型的recovery后，手机进入fastboot模式(手机都有这个模式，进入该模式方法不一样而已)，数据线链接电脑，装好驱动，在Android工具目录下执行以下指令。</p>\n<pre><code>fastboot flash recovery recovery.img\n</code></pre><p>成功后会显示，成功提示。</p>\n<p>然后点电源键强制关机，后重启，进入recover模式。然后就可以刷任何<code>zip</code>文件了</p>\n<p>##补充</p>\n<p>有些手机可能还需要解锁</p>\n<p>可以参考我另一篇文章</p>\n<p><a href=\"http://www.cnblogs.com/QUSIR/p/6179506.html\">http://www.cnblogs.com/QUSIR/p/6179506.html</a></p>\n"},{"title":"CoreFreq CPU监控软件","date":"2017-04-08T14:29:45.000Z","_content":"\n\n# CoreFreq说明\nCoreFreq是一款专为64位处理器设计的CPU监控软件，架构为英特尔Atom，Core2，Nehalem，SandyBridge和高级AMD系列0F\n\n![alt text](http://blog.cyring.free.fr/images/CoreFreq_Top.gif \"CoreFreq Top\")\n\n#详细使用教程\n[https://github.com/cyring/CoreFreq](https://github.com/cyring/CoreFreq)","source":"_posts/CoreFreq-CPU监控软件.md","raw":"---\ntitle: CoreFreq CPU监控软件\ndate: 2017-04-08 22:29:45\ntags:\n---\n\n\n# CoreFreq说明\nCoreFreq是一款专为64位处理器设计的CPU监控软件，架构为英特尔Atom，Core2，Nehalem，SandyBridge和高级AMD系列0F\n\n![alt text](http://blog.cyring.free.fr/images/CoreFreq_Top.gif \"CoreFreq Top\")\n\n#详细使用教程\n[https://github.com/cyring/CoreFreq](https://github.com/cyring/CoreFreq)","slug":"CoreFreq-CPU监控软件","published":1,"updated":"2017-09-21T01:55:27.186Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7ttahu70001de5lezfoqa9k","content":"<h1 id=\"CoreFreq说明\"><a href=\"#CoreFreq说明\" class=\"headerlink\" title=\"CoreFreq说明\"></a>CoreFreq说明</h1><p>CoreFreq是一款专为64位处理器设计的CPU监控软件，架构为英特尔Atom，Core2，Nehalem，SandyBridge和高级AMD系列0F</p>\n<p><img src=\"http://blog.cyring.free.fr/images/CoreFreq_Top.gif\" alt=\"alt text\" title=\"CoreFreq Top\"></p>\n<p>#详细使用教程<br><a href=\"https://github.com/cyring/CoreFreq\" target=\"_blank\" rel=\"external\">https://github.com/cyring/CoreFreq</a></p>\n","excerpt":"","more":"<h1 id=\"CoreFreq说明\"><a href=\"#CoreFreq说明\" class=\"headerlink\" title=\"CoreFreq说明\"></a>CoreFreq说明</h1><p>CoreFreq是一款专为64位处理器设计的CPU监控软件，架构为英特尔Atom，Core2，Nehalem，SandyBridge和高级AMD系列0F</p>\n<p><img src=\"http://blog.cyring.free.fr/images/CoreFreq_Top.gif\" alt=\"alt text\" title=\"CoreFreq Top\"></p>\n<p>#详细使用教程<br><a href=\"https://github.com/cyring/CoreFreq\">https://github.com/cyring/CoreFreq</a></p>\n"},{"title":"FileZillaFTP使用教程","date":"2016-12-19T13:20:34.000Z","_content":"\n\n![s](http://ohjvpki1b.bkt.clouddn.com/FileZillaFTP1.png)\n\nFileZillaServer.exe服务启动和关闭程序\n\nFileZilla Server Interface.exe 服务  管理程序  配置ftp服务器的用户名，密码，目录，目录读写权限\n\n启动FileZillaServer后点击FileZilla Server Interface.exe  默认配置  点确定   用于映射本地端口  连接的时候使用默认FTP端口\n\n![s](http://ohjvpki1b.bkt.clouddn.com/FileZillaFTP2.png)\n\n![s](http://ohjvpki1b.bkt.clouddn.com/FileZillaFTP3.png)\n\nLogged on表示登陆成功\n\n点击人头图标，配置服务器选项\n\n![s](http://ohjvpki1b.bkt.clouddn.com/FileZillaFTP4.png)\n\n\n![s](http://ohjvpki1b.bkt.clouddn.com/FileZillaFTP5.png)\n\n设置完毕后直接点击确定，使配置生效。\n\n客户端连接设置\n\n![s](http://ohjvpki1b.bkt.clouddn.com/FileZillaFTP6.png)\n\n关掉FileZilla Server Interface配置程序后，只要后台服务还在运行，FTP服务器就可以连接","source":"_posts/FileZillaFTP使用教程.md","raw":"---\ntitle: FileZillaFTP使用教程\ndate: 2016-12-19 21:20:34\ntags:\n---\n\n\n![s](http://ohjvpki1b.bkt.clouddn.com/FileZillaFTP1.png)\n\nFileZillaServer.exe服务启动和关闭程序\n\nFileZilla Server Interface.exe 服务  管理程序  配置ftp服务器的用户名，密码，目录，目录读写权限\n\n启动FileZillaServer后点击FileZilla Server Interface.exe  默认配置  点确定   用于映射本地端口  连接的时候使用默认FTP端口\n\n![s](http://ohjvpki1b.bkt.clouddn.com/FileZillaFTP2.png)\n\n![s](http://ohjvpki1b.bkt.clouddn.com/FileZillaFTP3.png)\n\nLogged on表示登陆成功\n\n点击人头图标，配置服务器选项\n\n![s](http://ohjvpki1b.bkt.clouddn.com/FileZillaFTP4.png)\n\n\n![s](http://ohjvpki1b.bkt.clouddn.com/FileZillaFTP5.png)\n\n设置完毕后直接点击确定，使配置生效。\n\n客户端连接设置\n\n![s](http://ohjvpki1b.bkt.clouddn.com/FileZillaFTP6.png)\n\n关掉FileZilla Server Interface配置程序后，只要后台服务还在运行，FTP服务器就可以连接","slug":"FileZillaFTP使用教程","published":1,"updated":"2017-09-21T01:55:27.186Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7ttahud0002de5levxgud9i","content":"<p><img src=\"http://ohjvpki1b.bkt.clouddn.com/FileZillaFTP1.png\" alt=\"s\"></p>\n<p>FileZillaServer.exe服务启动和关闭程序</p>\n<p>FileZilla Server Interface.exe 服务  管理程序  配置ftp服务器的用户名，密码，目录，目录读写权限</p>\n<p>启动FileZillaServer后点击FileZilla Server Interface.exe  默认配置  点确定   用于映射本地端口  连接的时候使用默认FTP端口</p>\n<p><img src=\"http://ohjvpki1b.bkt.clouddn.com/FileZillaFTP2.png\" alt=\"s\"></p>\n<p><img src=\"http://ohjvpki1b.bkt.clouddn.com/FileZillaFTP3.png\" alt=\"s\"></p>\n<p>Logged on表示登陆成功</p>\n<p>点击人头图标，配置服务器选项</p>\n<p><img src=\"http://ohjvpki1b.bkt.clouddn.com/FileZillaFTP4.png\" alt=\"s\"></p>\n<p><img src=\"http://ohjvpki1b.bkt.clouddn.com/FileZillaFTP5.png\" alt=\"s\"></p>\n<p>设置完毕后直接点击确定，使配置生效。</p>\n<p>客户端连接设置</p>\n<p><img src=\"http://ohjvpki1b.bkt.clouddn.com/FileZillaFTP6.png\" alt=\"s\"></p>\n<p>关掉FileZilla Server Interface配置程序后，只要后台服务还在运行，FTP服务器就可以连接</p>\n","excerpt":"","more":"<p><img src=\"http://ohjvpki1b.bkt.clouddn.com/FileZillaFTP1.png\" alt=\"s\"></p>\n<p>FileZillaServer.exe服务启动和关闭程序</p>\n<p>FileZilla Server Interface.exe 服务  管理程序  配置ftp服务器的用户名，密码，目录，目录读写权限</p>\n<p>启动FileZillaServer后点击FileZilla Server Interface.exe  默认配置  点确定   用于映射本地端口  连接的时候使用默认FTP端口</p>\n<p><img src=\"http://ohjvpki1b.bkt.clouddn.com/FileZillaFTP2.png\" alt=\"s\"></p>\n<p><img src=\"http://ohjvpki1b.bkt.clouddn.com/FileZillaFTP3.png\" alt=\"s\"></p>\n<p>Logged on表示登陆成功</p>\n<p>点击人头图标，配置服务器选项</p>\n<p><img src=\"http://ohjvpki1b.bkt.clouddn.com/FileZillaFTP4.png\" alt=\"s\"></p>\n<p><img src=\"http://ohjvpki1b.bkt.clouddn.com/FileZillaFTP5.png\" alt=\"s\"></p>\n<p>设置完毕后直接点击确定，使配置生效。</p>\n<p>客户端连接设置</p>\n<p><img src=\"http://ohjvpki1b.bkt.clouddn.com/FileZillaFTP6.png\" alt=\"s\"></p>\n<p>关掉FileZilla Server Interface配置程序后，只要后台服务还在运行，FTP服务器就可以连接</p>\n"},{"title":"Mediostream框架filter使用说明","date":"2017-03-12T15:23:40.000Z","_content":"\n##1.链接说明\n\n   \tms_filter_link(stream->soundread,0,stream->ec,0);\n    ms_filter_link(stream->ec,0,stream->encoder,0);\t\n\t//inputs[0] 将数据链接到0\n\tms_filter_link(stream->decoder,0,stream->ec,1);\n\tms_filter_link(stream->ec,1,stream->soundwrite,0);\n\t//inputs[1]将数据链接到1\n\n##2.数据读取\n\n    while((tmp=ms_queue_get(f->inputs[1]))!=NULL){\n\t\t//拿回inputs[1]数据  是从soundread来的\n        log_error(\"save_voice tmp.pcm\");\n        inputlen=msgdsize(tmp);\n        memcpy(tmpinput,tmp->b_rptr,inputlen);\n        save_voice(voicetmp,tmpinput,inputlen);\n       //save_voice(voicetmp,tmp->b_rptr,msgdsize(tmp));\n        ile++;\n        ce=allocb(inputlen,0);\n\n        memcpy(ce->b_rptr, tmp->b_rptr, inputlen);\n\n        ce->b_wptr+=inputlen;\n        ms_queue_put(f->outputs[1],ce);\n\n        freemsg(tmp);\n    }\n\n\twhile((im=ms_queue_get(f->inputs[0]))!=NULL){\n        int len=msgdsize(im);\n\t//拿回inputs[0]数据   是从decoder来的\n\n\n\n##3.接口说明\n\n\tMSFilterDesc ms_webrtc_aec_desc={\n\t\tMS_WEBRTC_AEC_ID,\n\t\t\"MSWebRTCAEC\",\n\t\t\"Echo canceller using WebRTC library.\",\n\t\tMS_FILTER_OTHER,\n\t\t\"AEC\",\n\t\t2,  //两进两出  ipnuts[0]和inputs[1]\n\t\t2,\n\t\twebrtc_aec_init,\n\t\twebrtc_aec_preprocess,\n\t\twebrtc_aec_process,\n\t\twebrtc_aec_postprocess,\n\t\twebrtc_aec_uninit,\n\t\twebrtc_aec_methods,\n\t\t0\n\t};","source":"_posts/Mediostream框架filter使用说明.md","raw":"---\ntitle: Mediostream框架filter使用说明\ndate: 2017-03-12 23:23:40\ntags:\n---\n\n##1.链接说明\n\n   \tms_filter_link(stream->soundread,0,stream->ec,0);\n    ms_filter_link(stream->ec,0,stream->encoder,0);\t\n\t//inputs[0] 将数据链接到0\n\tms_filter_link(stream->decoder,0,stream->ec,1);\n\tms_filter_link(stream->ec,1,stream->soundwrite,0);\n\t//inputs[1]将数据链接到1\n\n##2.数据读取\n\n    while((tmp=ms_queue_get(f->inputs[1]))!=NULL){\n\t\t//拿回inputs[1]数据  是从soundread来的\n        log_error(\"save_voice tmp.pcm\");\n        inputlen=msgdsize(tmp);\n        memcpy(tmpinput,tmp->b_rptr,inputlen);\n        save_voice(voicetmp,tmpinput,inputlen);\n       //save_voice(voicetmp,tmp->b_rptr,msgdsize(tmp));\n        ile++;\n        ce=allocb(inputlen,0);\n\n        memcpy(ce->b_rptr, tmp->b_rptr, inputlen);\n\n        ce->b_wptr+=inputlen;\n        ms_queue_put(f->outputs[1],ce);\n\n        freemsg(tmp);\n    }\n\n\twhile((im=ms_queue_get(f->inputs[0]))!=NULL){\n        int len=msgdsize(im);\n\t//拿回inputs[0]数据   是从decoder来的\n\n\n\n##3.接口说明\n\n\tMSFilterDesc ms_webrtc_aec_desc={\n\t\tMS_WEBRTC_AEC_ID,\n\t\t\"MSWebRTCAEC\",\n\t\t\"Echo canceller using WebRTC library.\",\n\t\tMS_FILTER_OTHER,\n\t\t\"AEC\",\n\t\t2,  //两进两出  ipnuts[0]和inputs[1]\n\t\t2,\n\t\twebrtc_aec_init,\n\t\twebrtc_aec_preprocess,\n\t\twebrtc_aec_process,\n\t\twebrtc_aec_postprocess,\n\t\twebrtc_aec_uninit,\n\t\twebrtc_aec_methods,\n\t\t0\n\t};","slug":"Mediostream框架filter使用说明","published":1,"updated":"2017-09-21T01:55:27.186Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7ttahui0003de5lmhtri7tm","content":"<p>##1.链接说明</p>\n<pre><code>   ms_filter_link(stream-&gt;soundread,0,stream-&gt;ec,0);\nms_filter_link(stream-&gt;ec,0,stream-&gt;encoder,0);    \n//inputs[0] 将数据链接到0\nms_filter_link(stream-&gt;decoder,0,stream-&gt;ec,1);\nms_filter_link(stream-&gt;ec,1,stream-&gt;soundwrite,0);\n//inputs[1]将数据链接到1\n</code></pre><p>##2.数据读取</p>\n<pre><code>while((tmp=ms_queue_get(f-&gt;inputs[1]))!=NULL){\n    //拿回inputs[1]数据  是从soundread来的\n    log_error(&quot;save_voice tmp.pcm&quot;);\n    inputlen=msgdsize(tmp);\n    memcpy(tmpinput,tmp-&gt;b_rptr,inputlen);\n    save_voice(voicetmp,tmpinput,inputlen);\n   //save_voice(voicetmp,tmp-&gt;b_rptr,msgdsize(tmp));\n    ile++;\n    ce=allocb(inputlen,0);\n\n    memcpy(ce-&gt;b_rptr, tmp-&gt;b_rptr, inputlen);\n\n    ce-&gt;b_wptr+=inputlen;\n    ms_queue_put(f-&gt;outputs[1],ce);\n\n    freemsg(tmp);\n}\n\nwhile((im=ms_queue_get(f-&gt;inputs[0]))!=NULL){\n    int len=msgdsize(im);\n//拿回inputs[0]数据   是从decoder来的\n</code></pre><p>##3.接口说明</p>\n<pre><code>MSFilterDesc ms_webrtc_aec_desc={\n    MS_WEBRTC_AEC_ID,\n    &quot;MSWebRTCAEC&quot;,\n    &quot;Echo canceller using WebRTC library.&quot;,\n    MS_FILTER_OTHER,\n    &quot;AEC&quot;,\n    2,  //两进两出  ipnuts[0]和inputs[1]\n    2,\n    webrtc_aec_init,\n    webrtc_aec_preprocess,\n    webrtc_aec_process,\n    webrtc_aec_postprocess,\n    webrtc_aec_uninit,\n    webrtc_aec_methods,\n    0\n};\n</code></pre>","excerpt":"","more":"<p>##1.链接说明</p>\n<pre><code>   ms_filter_link(stream-&gt;soundread,0,stream-&gt;ec,0);\nms_filter_link(stream-&gt;ec,0,stream-&gt;encoder,0);    \n//inputs[0] 将数据链接到0\nms_filter_link(stream-&gt;decoder,0,stream-&gt;ec,1);\nms_filter_link(stream-&gt;ec,1,stream-&gt;soundwrite,0);\n//inputs[1]将数据链接到1\n</code></pre><p>##2.数据读取</p>\n<pre><code>while((tmp=ms_queue_get(f-&gt;inputs[1]))!=NULL){\n    //拿回inputs[1]数据  是从soundread来的\n    log_error(&quot;save_voice tmp.pcm&quot;);\n    inputlen=msgdsize(tmp);\n    memcpy(tmpinput,tmp-&gt;b_rptr,inputlen);\n    save_voice(voicetmp,tmpinput,inputlen);\n   //save_voice(voicetmp,tmp-&gt;b_rptr,msgdsize(tmp));\n    ile++;\n    ce=allocb(inputlen,0);\n\n    memcpy(ce-&gt;b_rptr, tmp-&gt;b_rptr, inputlen);\n\n    ce-&gt;b_wptr+=inputlen;\n    ms_queue_put(f-&gt;outputs[1],ce);\n\n    freemsg(tmp);\n}\n\nwhile((im=ms_queue_get(f-&gt;inputs[0]))!=NULL){\n    int len=msgdsize(im);\n//拿回inputs[0]数据   是从decoder来的\n</code></pre><p>##3.接口说明</p>\n<pre><code>MSFilterDesc ms_webrtc_aec_desc={\n    MS_WEBRTC_AEC_ID,\n    &quot;MSWebRTCAEC&quot;,\n    &quot;Echo canceller using WebRTC library.&quot;,\n    MS_FILTER_OTHER,\n    &quot;AEC&quot;,\n    2,  //两进两出  ipnuts[0]和inputs[1]\n    2,\n    webrtc_aec_init,\n    webrtc_aec_preprocess,\n    webrtc_aec_process,\n    webrtc_aec_postprocess,\n    webrtc_aec_uninit,\n    webrtc_aec_methods,\n    0\n};\n</code></pre>"},{"title":"Ubuntu16.04安装Screenlets","date":"2017-01-21T09:03:45.000Z","_content":"\n\n##通过添加软件源的方式安装装\n\n    sudo add-apt-repository ppa:screenlets/ppa\n    sudo apt-get update\n    sudo apt-get install screenlets\n以上方法在ubuntu16.04下不可行  \n##以源码的方式安装\n    sudo apt install python-beautifulsoup python-wnck python-vte python-tz\n    cd /tmp\n    wget -O - https://launchpad.net/screenlets/trunk/0.1.6/+download/screenlets-0.1.6.tar.bz2 | bunzip2 -c - | tar xf -\n    wget -O - https://launchpad.net/indiv-screenlets/trunk/0.1.6/+download/indiv-screenlets-0.1.6.tar.bz2 | bunzip2 -c - | tar xf -\n    cd screenlets-0.1.6\n    sudo setuo.py install\n    cd ../indiv-screenlets-0.1.6\n    sudo setup.py install\n    screenlets &\n    \n##出错解决\n在终端下执行screenlets指令在运行过程中会提示出错信息。发现缺少相关库，使用以下指令安装。\n\n\tsudo apt-get install python-gconf\n    sudo apt-get install libcanberra-gtk-module\n    sudo apt-get install python-xdg\n\n##使用方法\n打开screenlets双击相应的桌面控件，便会在桌面生成，相应的小程序，点击开始/停止也可以，或者点击登录时自启动，使桌面小程序，开机显示在桌面。\n\n##设置界面\n![](http://ohjvpki1b.bkt.clouddn.com/Screenlets1.png)\n##效果图\n\n![](http://ohjvpki1b.bkt.clouddn.com/Screenlets2.png)","source":"_posts/Ubuntu16-04安装Screenlets.md","raw":"---\ntitle: Ubuntu16.04安装Screenlets\ndate: 2017-01-21 17:03:45\ntags:\n---\n\n\n##通过添加软件源的方式安装装\n\n    sudo add-apt-repository ppa:screenlets/ppa\n    sudo apt-get update\n    sudo apt-get install screenlets\n以上方法在ubuntu16.04下不可行  \n##以源码的方式安装\n    sudo apt install python-beautifulsoup python-wnck python-vte python-tz\n    cd /tmp\n    wget -O - https://launchpad.net/screenlets/trunk/0.1.6/+download/screenlets-0.1.6.tar.bz2 | bunzip2 -c - | tar xf -\n    wget -O - https://launchpad.net/indiv-screenlets/trunk/0.1.6/+download/indiv-screenlets-0.1.6.tar.bz2 | bunzip2 -c - | tar xf -\n    cd screenlets-0.1.6\n    sudo setuo.py install\n    cd ../indiv-screenlets-0.1.6\n    sudo setup.py install\n    screenlets &\n    \n##出错解决\n在终端下执行screenlets指令在运行过程中会提示出错信息。发现缺少相关库，使用以下指令安装。\n\n\tsudo apt-get install python-gconf\n    sudo apt-get install libcanberra-gtk-module\n    sudo apt-get install python-xdg\n\n##使用方法\n打开screenlets双击相应的桌面控件，便会在桌面生成，相应的小程序，点击开始/停止也可以，或者点击登录时自启动，使桌面小程序，开机显示在桌面。\n\n##设置界面\n![](http://ohjvpki1b.bkt.clouddn.com/Screenlets1.png)\n##效果图\n\n![](http://ohjvpki1b.bkt.clouddn.com/Screenlets2.png)","slug":"Ubuntu16-04安装Screenlets","published":1,"updated":"2017-09-21T01:55:27.186Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7ttahuq0005de5lb5ln4ean","content":"<p>##通过添加软件源的方式安装装</p>\n<pre><code>sudo add-apt-repository ppa:screenlets/ppa\nsudo apt-get update\nsudo apt-get install screenlets\n</code></pre><p>以上方法在ubuntu16.04下不可行  </p>\n<p>##以源码的方式安装<br>    sudo apt install python-beautifulsoup python-wnck python-vte python-tz<br>    cd /tmp<br>    wget -O - <a href=\"https://launchpad.net/screenlets/trunk/0.1.6/+download/screenlets-0.1.6.tar.bz2\" target=\"_blank\" rel=\"external\">https://launchpad.net/screenlets/trunk/0.1.6/+download/screenlets-0.1.6.tar.bz2</a> | bunzip2 -c - | tar xf -<br>    wget -O - <a href=\"https://launchpad.net/indiv-screenlets/trunk/0.1.6/+download/indiv-screenlets-0.1.6.tar.bz2\" target=\"_blank\" rel=\"external\">https://launchpad.net/indiv-screenlets/trunk/0.1.6/+download/indiv-screenlets-0.1.6.tar.bz2</a> | bunzip2 -c - | tar xf -<br>    cd screenlets-0.1.6<br>    sudo setuo.py install<br>    cd ../indiv-screenlets-0.1.6<br>    sudo setup.py install<br>    screenlets &amp;</p>\n<p>##出错解决<br>在终端下执行screenlets指令在运行过程中会提示出错信息。发现缺少相关库，使用以下指令安装。</p>\n<pre><code>sudo apt-get install python-gconf\nsudo apt-get install libcanberra-gtk-module\nsudo apt-get install python-xdg\n</code></pre><p>##使用方法<br>打开screenlets双击相应的桌面控件，便会在桌面生成，相应的小程序，点击开始/停止也可以，或者点击登录时自启动，使桌面小程序，开机显示在桌面。</p>\n<p>##设置界面<br><img src=\"http://ohjvpki1b.bkt.clouddn.com/Screenlets1.png\" alt=\"\"></p>\n<p>##效果图</p>\n<p><img src=\"http://ohjvpki1b.bkt.clouddn.com/Screenlets2.png\" alt=\"\"></p>\n","excerpt":"","more":"<p>##通过添加软件源的方式安装装</p>\n<pre><code>sudo add-apt-repository ppa:screenlets/ppa\nsudo apt-get update\nsudo apt-get install screenlets\n</code></pre><p>以上方法在ubuntu16.04下不可行  </p>\n<p>##以源码的方式安装<br>    sudo apt install python-beautifulsoup python-wnck python-vte python-tz<br>    cd /tmp<br>    wget -O - <a href=\"https://launchpad.net/screenlets/trunk/0.1.6/+download/screenlets-0.1.6.tar.bz2\">https://launchpad.net/screenlets/trunk/0.1.6/+download/screenlets-0.1.6.tar.bz2</a> | bunzip2 -c - | tar xf -<br>    wget -O - <a href=\"https://launchpad.net/indiv-screenlets/trunk/0.1.6/+download/indiv-screenlets-0.1.6.tar.bz2\">https://launchpad.net/indiv-screenlets/trunk/0.1.6/+download/indiv-screenlets-0.1.6.tar.bz2</a> | bunzip2 -c - | tar xf -<br>    cd screenlets-0.1.6<br>    sudo setuo.py install<br>    cd ../indiv-screenlets-0.1.6<br>    sudo setup.py install<br>    screenlets &amp;</p>\n<p>##出错解决<br>在终端下执行screenlets指令在运行过程中会提示出错信息。发现缺少相关库，使用以下指令安装。</p>\n<pre><code>sudo apt-get install python-gconf\nsudo apt-get install libcanberra-gtk-module\nsudo apt-get install python-xdg\n</code></pre><p>##使用方法<br>打开screenlets双击相应的桌面控件，便会在桌面生成，相应的小程序，点击开始/停止也可以，或者点击登录时自启动，使桌面小程序，开机显示在桌面。</p>\n<p>##设置界面<br><img src=\"http://ohjvpki1b.bkt.clouddn.com/Screenlets1.png\" alt=\"\"></p>\n<p>##效果图</p>\n<p><img src=\"http://ohjvpki1b.bkt.clouddn.com/Screenlets2.png\" alt=\"\"></p>\n"},{"title":"Ubuntu16.04安装Stacer工具","date":"2017-04-08T14:28:11.000Z","_content":"\n##说明\nStacer工具可以显示系统资源使用情况，清除系统垃圾，卸载软件，关闭开启自启动服务。\n\n##安装\n###deb 包安装\n\nDebian Linux x86（Ubuntu）\n1. Download `Stacer_1.0.4_i386.deb` from the [Stacer releases page](https://github.com/oguzhaninan/Stacer/releases).\n2. Run `sudo dpkg --install Stacer_1.0.4_i386.deb` on the downloaded package.\n3. Launch Stacer using the installed `Stacer` command.\n\nDebian Linux x64 (Ubuntu)\n\n1. Download `Stacer_1.0.4_amd64.deb` from the [Stacer releases page](https://github.com/oguzhaninan/Stacer/releases).\n2. Run `sudo dpkg --install Stacer_1.0.4_amd64.deb` on the downloaded package.\n3. Launch Stacer using the installed `Stacer` command.\n\n###源码安装\n\tgit clone https://github.com/oguzhaninan/Stacer.git\n\tcd Stacer\n\tnpm install && npm start\n##卸载\n\n运行`sudo dpkg -r Stacer`\n\n#使用\n##仪表板\n\n<img src=\"http://ohjvpki1b.bkt.clouddn.com/Stacer.png\" width = \"512\" height = \"214\" alt=\"Stacer\" align=center />\n##系统清洁\n\n<img src=\"http://ohjvpki1b.bkt.clouddn.com/System_Cleaner.png\" width = \"407\" height = \"346\" alt=\"System_Cleaner\" align=center />\n##启动应用程序\n<img src=\"http://ohjvpki1b.bkt.clouddn.com/Startup_Apps.png\" width = \"407\" height = \"346\" alt=\"Startup_Apps\" align=center />\n##服务\n<img src=\"http://ohjvpki1b.bkt.clouddn.com/Services.png\" width = \"407\" height = \"346\" alt=\"Services\" align=center />\n##卸载程序\n\n<img src=\"http://ohjvpki1b.bkt.clouddn.com/Uninstaller.png\" width = \"407\" height = \"346\" alt=\"Uninstaller\" align=center />","source":"_posts/Ubuntu16-04安装Stacer工具.md","raw":"---\ntitle: Ubuntu16.04安装Stacer工具\ndate: 2017-04-08 22:28:11\ntags:\n---\n\n##说明\nStacer工具可以显示系统资源使用情况，清除系统垃圾，卸载软件，关闭开启自启动服务。\n\n##安装\n###deb 包安装\n\nDebian Linux x86（Ubuntu）\n1. Download `Stacer_1.0.4_i386.deb` from the [Stacer releases page](https://github.com/oguzhaninan/Stacer/releases).\n2. Run `sudo dpkg --install Stacer_1.0.4_i386.deb` on the downloaded package.\n3. Launch Stacer using the installed `Stacer` command.\n\nDebian Linux x64 (Ubuntu)\n\n1. Download `Stacer_1.0.4_amd64.deb` from the [Stacer releases page](https://github.com/oguzhaninan/Stacer/releases).\n2. Run `sudo dpkg --install Stacer_1.0.4_amd64.deb` on the downloaded package.\n3. Launch Stacer using the installed `Stacer` command.\n\n###源码安装\n\tgit clone https://github.com/oguzhaninan/Stacer.git\n\tcd Stacer\n\tnpm install && npm start\n##卸载\n\n运行`sudo dpkg -r Stacer`\n\n#使用\n##仪表板\n\n<img src=\"http://ohjvpki1b.bkt.clouddn.com/Stacer.png\" width = \"512\" height = \"214\" alt=\"Stacer\" align=center />\n##系统清洁\n\n<img src=\"http://ohjvpki1b.bkt.clouddn.com/System_Cleaner.png\" width = \"407\" height = \"346\" alt=\"System_Cleaner\" align=center />\n##启动应用程序\n<img src=\"http://ohjvpki1b.bkt.clouddn.com/Startup_Apps.png\" width = \"407\" height = \"346\" alt=\"Startup_Apps\" align=center />\n##服务\n<img src=\"http://ohjvpki1b.bkt.clouddn.com/Services.png\" width = \"407\" height = \"346\" alt=\"Services\" align=center />\n##卸载程序\n\n<img src=\"http://ohjvpki1b.bkt.clouddn.com/Uninstaller.png\" width = \"407\" height = \"346\" alt=\"Uninstaller\" align=center />","slug":"Ubuntu16-04安装Stacer工具","published":1,"updated":"2017-09-21T01:55:27.186Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7ttahut0006de5l431fiqzi","content":"<p>##说明<br>Stacer工具可以显示系统资源使用情况，清除系统垃圾，卸载软件，关闭开启自启动服务。</p>\n<p>##安装</p>\n<p>###deb 包安装</p>\n<p>Debian Linux x86（Ubuntu）</p>\n<ol>\n<li>Download <code>Stacer_1.0.4_i386.deb</code> from the <a href=\"https://github.com/oguzhaninan/Stacer/releases\" target=\"_blank\" rel=\"external\">Stacer releases page</a>.</li>\n<li>Run <code>sudo dpkg --install Stacer_1.0.4_i386.deb</code> on the downloaded package.</li>\n<li>Launch Stacer using the installed <code>Stacer</code> command.</li>\n</ol>\n<p>Debian Linux x64 (Ubuntu)</p>\n<ol>\n<li>Download <code>Stacer_1.0.4_amd64.deb</code> from the <a href=\"https://github.com/oguzhaninan/Stacer/releases\" target=\"_blank\" rel=\"external\">Stacer releases page</a>.</li>\n<li>Run <code>sudo dpkg --install Stacer_1.0.4_amd64.deb</code> on the downloaded package.</li>\n<li>Launch Stacer using the installed <code>Stacer</code> command.</li>\n</ol>\n<p>###源码安装<br>    git clone <a href=\"https://github.com/oguzhaninan/Stacer.git\" target=\"_blank\" rel=\"external\">https://github.com/oguzhaninan/Stacer.git</a><br>    cd Stacer<br>    npm install &amp;&amp; npm start</p>\n<p>##卸载</p>\n<p>运行<code>sudo dpkg -r Stacer</code></p>\n<p>#使用</p>\n<p>##仪表板</p>\n<p><img src=\"http://ohjvpki1b.bkt.clouddn.com/Stacer.png\" width=\"512\" height=\"214\" alt=\"Stacer\" align=\"center\"></p>\n<p>##系统清洁</p>\n<p><img src=\"http://ohjvpki1b.bkt.clouddn.com/System_Cleaner.png\" width=\"407\" height=\"346\" alt=\"System_Cleaner\" align=\"center\"></p>\n<p>##启动应用程序<br><img src=\"http://ohjvpki1b.bkt.clouddn.com/Startup_Apps.png\" width=\"407\" height=\"346\" alt=\"Startup_Apps\" align=\"center\"></p>\n<p>##服务<br><img src=\"http://ohjvpki1b.bkt.clouddn.com/Services.png\" width=\"407\" height=\"346\" alt=\"Services\" align=\"center\"></p>\n<p>##卸载程序</p>\n<p><img src=\"http://ohjvpki1b.bkt.clouddn.com/Uninstaller.png\" width=\"407\" height=\"346\" alt=\"Uninstaller\" align=\"center\"></p>\n","excerpt":"","more":"<p>##说明<br>Stacer工具可以显示系统资源使用情况，清除系统垃圾，卸载软件，关闭开启自启动服务。</p>\n<p>##安装</p>\n<p>###deb 包安装</p>\n<p>Debian Linux x86（Ubuntu）</p>\n<ol>\n<li>Download <code>Stacer_1.0.4_i386.deb</code> from the <a href=\"https://github.com/oguzhaninan/Stacer/releases\">Stacer releases page</a>.</li>\n<li>Run <code>sudo dpkg --install Stacer_1.0.4_i386.deb</code> on the downloaded package.</li>\n<li>Launch Stacer using the installed <code>Stacer</code> command.</li>\n</ol>\n<p>Debian Linux x64 (Ubuntu)</p>\n<ol>\n<li>Download <code>Stacer_1.0.4_amd64.deb</code> from the <a href=\"https://github.com/oguzhaninan/Stacer/releases\">Stacer releases page</a>.</li>\n<li>Run <code>sudo dpkg --install Stacer_1.0.4_amd64.deb</code> on the downloaded package.</li>\n<li>Launch Stacer using the installed <code>Stacer</code> command.</li>\n</ol>\n<p>###源码安装<br>    git clone <a href=\"https://github.com/oguzhaninan/Stacer.git\">https://github.com/oguzhaninan/Stacer.git</a><br>    cd Stacer<br>    npm install &amp;&amp; npm start</p>\n<p>##卸载</p>\n<p>运行<code>sudo dpkg -r Stacer</code></p>\n<p>#使用</p>\n<p>##仪表板</p>\n<p><img src=\"http://ohjvpki1b.bkt.clouddn.com/Stacer.png\" width = \"512\" height = \"214\" alt=\"Stacer\" align=center /></p>\n<p>##系统清洁</p>\n<p><img src=\"http://ohjvpki1b.bkt.clouddn.com/System_Cleaner.png\" width = \"407\" height = \"346\" alt=\"System_Cleaner\" align=center /></p>\n<p>##启动应用程序<br><img src=\"http://ohjvpki1b.bkt.clouddn.com/Startup_Apps.png\" width = \"407\" height = \"346\" alt=\"Startup_Apps\" align=center /></p>\n<p>##服务<br><img src=\"http://ohjvpki1b.bkt.clouddn.com/Services.png\" width = \"407\" height = \"346\" alt=\"Services\" align=center /></p>\n<p>##卸载程序</p>\n<p><img src=\"http://ohjvpki1b.bkt.clouddn.com/Uninstaller.png\" width = \"407\" height = \"346\" alt=\"Uninstaller\" align=center /></p>\n"},{"title":"android gpio口控制","date":"2017-01-21T09:06:20.000Z","_content":"\n##android gpio口控制\n\n&emsp;GPIO口控制方式是在jni层控制的方式实现高低电平输出,类似linux的控制句柄方式，在linux系统下将每个设备看作一个文件，android系统是基于linux内核的。\n\n##保证该文件有读写权限\n\n![view](http://ohjvpki1b.bkt.clouddn.com/android_gpio.png)\n\n\n##用命令控制gpio输出\n\t输出高电平\n\techo 1 > /system/class/gpio_sw/data\n\t输出低电平\n\techo 1 > /system/class/gpio_sw/data\n##代码段\n\n\t#include <unistd.h>\n\t#include\"Logger.h\"\n\t#include <stdio.h>\n\t#include <linux/input.h>\n\t#include <stdlib.h>\n\t#include <sys/types.h>\n\t#include <sys/stat.h>\n\t#include <fcntl.h>\n\t\n\t#define DEV_PATH \"/sys/class/gpio_sw/PE12/data\"   //difference is possible\n\t\n\t\n\tJNIEXPORT jint JNICALL Java_com_example_liang_gpio_1demo_Gpio_Set_1GPIO\n\t        (JNIEnv *env,jobject){\n\t    int fd;\n\t\n\t    fd = open(DEV_PATH, O_WRONLY);\n\t    if(fd < 0){\n\t        LOGE(\"fail in open file %s\", DEV_PATH);\n\t        return -1;\n\t    }\n\t    write(fd, \"1\", strlen(\"1\"));  //输出高电平\n\t    sleep(1);  //延时\n\t    write(fd, \"0\", strlen(\"0\"));  //输出低电平\n\t    close(fd);\n\t    return 0;\n\t\n\t}\n\n\n##使用\n&emsp;点击SetGpio按钮输出高低电平变化\n![](http://ohjvpki1b.bkt.clouddn.com/gpio_view.jpg)\n自己编写\n[DEMO](https://github.com/QUSIR/Android_GPIO_DEMO)","source":"_posts/android-gpio口控制.md","raw":"---\ntitle: android gpio口控制\ndate: 2017-01-21 17:06:20\ntags:\n---\n\n##android gpio口控制\n\n&emsp;GPIO口控制方式是在jni层控制的方式实现高低电平输出,类似linux的控制句柄方式，在linux系统下将每个设备看作一个文件，android系统是基于linux内核的。\n\n##保证该文件有读写权限\n\n![view](http://ohjvpki1b.bkt.clouddn.com/android_gpio.png)\n\n\n##用命令控制gpio输出\n\t输出高电平\n\techo 1 > /system/class/gpio_sw/data\n\t输出低电平\n\techo 1 > /system/class/gpio_sw/data\n##代码段\n\n\t#include <unistd.h>\n\t#include\"Logger.h\"\n\t#include <stdio.h>\n\t#include <linux/input.h>\n\t#include <stdlib.h>\n\t#include <sys/types.h>\n\t#include <sys/stat.h>\n\t#include <fcntl.h>\n\t\n\t#define DEV_PATH \"/sys/class/gpio_sw/PE12/data\"   //difference is possible\n\t\n\t\n\tJNIEXPORT jint JNICALL Java_com_example_liang_gpio_1demo_Gpio_Set_1GPIO\n\t        (JNIEnv *env,jobject){\n\t    int fd;\n\t\n\t    fd = open(DEV_PATH, O_WRONLY);\n\t    if(fd < 0){\n\t        LOGE(\"fail in open file %s\", DEV_PATH);\n\t        return -1;\n\t    }\n\t    write(fd, \"1\", strlen(\"1\"));  //输出高电平\n\t    sleep(1);  //延时\n\t    write(fd, \"0\", strlen(\"0\"));  //输出低电平\n\t    close(fd);\n\t    return 0;\n\t\n\t}\n\n\n##使用\n&emsp;点击SetGpio按钮输出高低电平变化\n![](http://ohjvpki1b.bkt.clouddn.com/gpio_view.jpg)\n自己编写\n[DEMO](https://github.com/QUSIR/Android_GPIO_DEMO)","slug":"android-gpio口控制","published":1,"updated":"2017-09-21T01:55:27.186Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7ttahuv0007de5laf24ptzy","content":"<p>##android gpio口控制</p>\n<p>&emsp;GPIO口控制方式是在jni层控制的方式实现高低电平输出,类似linux的控制句柄方式，在linux系统下将每个设备看作一个文件，android系统是基于linux内核的。</p>\n<p>##保证该文件有读写权限</p>\n<p><img src=\"http://ohjvpki1b.bkt.clouddn.com/android_gpio.png\" alt=\"view\"></p>\n<p>##用命令控制gpio输出<br>    输出高电平<br>    echo 1 &gt; /system/class/gpio_sw/data<br>    输出低电平<br>    echo 1 &gt; /system/class/gpio_sw/data</p>\n<p>##代码段</p>\n<pre><code>#include &lt;unistd.h&gt;\n#include&quot;Logger.h&quot;\n#include &lt;stdio.h&gt;\n#include &lt;linux/input.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;sys/stat.h&gt;\n#include &lt;fcntl.h&gt;\n\n#define DEV_PATH &quot;/sys/class/gpio_sw/PE12/data&quot;   //difference is possible\n\n\nJNIEXPORT jint JNICALL Java_com_example_liang_gpio_1demo_Gpio_Set_1GPIO\n        (JNIEnv *env,jobject){\n    int fd;\n\n    fd = open(DEV_PATH, O_WRONLY);\n    if(fd &lt; 0){\n        LOGE(&quot;fail in open file %s&quot;, DEV_PATH);\n        return -1;\n    }\n    write(fd, &quot;1&quot;, strlen(&quot;1&quot;));  //输出高电平\n    sleep(1);  //延时\n    write(fd, &quot;0&quot;, strlen(&quot;0&quot;));  //输出低电平\n    close(fd);\n    return 0;\n\n}\n</code></pre><p>##使用<br>&emsp;点击SetGpio按钮输出高低电平变化<br><img src=\"http://ohjvpki1b.bkt.clouddn.com/gpio_view.jpg\" alt=\"\"><br>自己编写<br><a href=\"https://github.com/QUSIR/Android_GPIO_DEMO\" target=\"_blank\" rel=\"external\">DEMO</a></p>\n","excerpt":"","more":"<p>##android gpio口控制</p>\n<p>&emsp;GPIO口控制方式是在jni层控制的方式实现高低电平输出,类似linux的控制句柄方式，在linux系统下将每个设备看作一个文件，android系统是基于linux内核的。</p>\n<p>##保证该文件有读写权限</p>\n<p><img src=\"http://ohjvpki1b.bkt.clouddn.com/android_gpio.png\" alt=\"view\"></p>\n<p>##用命令控制gpio输出<br>    输出高电平<br>    echo 1 &gt; /system/class/gpio_sw/data<br>    输出低电平<br>    echo 1 &gt; /system/class/gpio_sw/data</p>\n<p>##代码段</p>\n<pre><code>#include &lt;unistd.h&gt;\n#include&quot;Logger.h&quot;\n#include &lt;stdio.h&gt;\n#include &lt;linux/input.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;sys/stat.h&gt;\n#include &lt;fcntl.h&gt;\n\n#define DEV_PATH &quot;/sys/class/gpio_sw/PE12/data&quot;   //difference is possible\n\n\nJNIEXPORT jint JNICALL Java_com_example_liang_gpio_1demo_Gpio_Set_1GPIO\n        (JNIEnv *env,jobject){\n    int fd;\n\n    fd = open(DEV_PATH, O_WRONLY);\n    if(fd &lt; 0){\n        LOGE(&quot;fail in open file %s&quot;, DEV_PATH);\n        return -1;\n    }\n    write(fd, &quot;1&quot;, strlen(&quot;1&quot;));  //输出高电平\n    sleep(1);  //延时\n    write(fd, &quot;0&quot;, strlen(&quot;0&quot;));  //输出低电平\n    close(fd);\n    return 0;\n\n}\n</code></pre><p>##使用<br>&emsp;点击SetGpio按钮输出高低电平变化<br><img src=\"http://ohjvpki1b.bkt.clouddn.com/gpio_view.jpg\" alt=\"\"><br>自己编写<br><a href=\"https://github.com/QUSIR/Android_GPIO_DEMO\">DEMO</a></p>\n"},{"title":"android手机解锁引导程序","date":"2016-12-19T13:27:41.000Z","_content":"\n\n##1.重启手机进入fastboot模式\n&emsp;一般关机状态下按手机音量减+开机键，成功后会显示fastboot字提示。\n\n##2.查看设备信息\n\tfastboot devices\n\n说明:fastboot是一个工具软件\n\n##3.解锁设备\n\n\tfastboot oem unlock","source":"_posts/android手机解锁引导程序.md","raw":"---\ntitle: android手机解锁引导程序\ndate: 2016-12-19 21:27:41\ntags:\n---\n\n\n##1.重启手机进入fastboot模式\n&emsp;一般关机状态下按手机音量减+开机键，成功后会显示fastboot字提示。\n\n##2.查看设备信息\n\tfastboot devices\n\n说明:fastboot是一个工具软件\n\n##3.解锁设备\n\n\tfastboot oem unlock","slug":"android手机解锁引导程序","published":1,"updated":"2017-09-21T01:55:27.186Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7ttahux0008de5l8eclg1au","content":"<p>##1.重启手机进入fastboot模式<br>&emsp;一般关机状态下按手机音量减+开机键，成功后会显示fastboot字提示。</p>\n<p>##2.查看设备信息<br>    fastboot devices</p>\n<p>说明:fastboot是一个工具软件</p>\n<p>##3.解锁设备</p>\n<pre><code>fastboot oem unlock\n</code></pre>","excerpt":"","more":"<p>##1.重启手机进入fastboot模式<br>&emsp;一般关机状态下按手机音量减+开机键，成功后会显示fastboot字提示。</p>\n<p>##2.查看设备信息<br>    fastboot devices</p>\n<p>说明:fastboot是一个工具软件</p>\n<p>##3.解锁设备</p>\n<pre><code>fastboot oem unlock\n</code></pre>"},{"title":"android键盘输入读取","date":"2017-01-21T09:07:41.000Z","_content":"\n##android键盘输入读取\n&emsp;监控android键盘输入方式有两种，一种在java层实现，重写`onKeyDown`和`onKeyUp`方法。另一种是在jni层实现，监控`/dev/input/event0`键盘输入设备，获取输入数据。第一种方法缺陷是当有多个键盘设备时候无法区分是哪个键盘输入的，第二种方法是需要有该文件的读写权限。\n\n##调试方法\n进入adb模式\n\n\tadb shell\n输入以下指令监控键盘输入\n\n\tgetevent\n![view](http://ohjvpki1b.bkt.clouddn.com/getevent.png)\n\n##方法1实现\n代码实现\n\n\t @Override\n    public boolean onKeyDown(int keyCode,KeyEvent event){\n        switch(keyCode){\n            case KeyEvent.KEYCODE_0:\n                testview.setText(\"按下按键0\");\n                break;\n            case KeyEvent.KEYCODE_1:\n                testview.setText(\"按下按键1\");\n                break;\n            case KeyEvent.KEYCODE_2:\n                testview.setText(\"按下按键2\");\n                break;\n            case KeyEvent.KEYCODE_3:\n                testview.setText(\"按下按键3\");\n                break;\n            case KeyEvent.KEYCODE_4:\n                testview.setText(\"按下按键4\");\n                break;\n            case KeyEvent.KEYCODE_5:\n                testview.setText(\"按下按键5\");\n                break;\n            case KeyEvent.KEYCODE_6:\n                testview.setText(\"按下按键6\");\n                break;\n            case KeyEvent.KEYCODE_7:\n                testview.setText(\"按下按键7\");\n                break;\n            case KeyEvent.KEYCODE_8:\n                testview.setText(\"按下按键8\");\n                break;\n            case KeyEvent.KEYCODE_9:\n                testview.setText(\"按下按键9\");\n                break;\n            case KeyEvent.KEYCODE_DEL:\n                testview.setText(\"按下按键*\");\n                break;\n            case KeyEvent.KEYCODE_ENTER:\n                testview.setText(\"按下按键#\");\n                break;\n            default:\n                testview.setText(\"无法识别输入\");\n                break;\n\n        }\n\n        return super.onKeyDown(keyCode, event);\n    }\n    /*释放按键事件*/\n    @Override\n    public boolean onKeyUp(int keyCode,KeyEvent event){\n        switch(keyCode){\n            case KeyEvent.KEYCODE_0:\n                testview.setText(\"放开按键0\");\n                break;\n            case KeyEvent.KEYCODE_1:\n                testview.setText(\"放开按键1\");\n                break;\n            case KeyEvent.KEYCODE_2:\n                testview.setText(\"放开按键2\");\n                break;\n            case KeyEvent.KEYCODE_3:\n                testview.setText(\"放开按键3\");\n                break;\n            case KeyEvent.KEYCODE_4:\n                testview.setText(\"放开按键4\");\n                break;\n            case KeyEvent.KEYCODE_5:\n                testview.setText(\"放开按键5\");\n                break;\n            case KeyEvent.KEYCODE_6:\n                testview.setText(\"放开按键6\");\n                break;\n            case KeyEvent.KEYCODE_7:\n                testview.setText(\"放开按键7\");\n                break;\n            case KeyEvent.KEYCODE_8:\n                testview.setText(\"放开按键8\");\n                break;\n            case KeyEvent.KEYCODE_9:\n                testview.setText(\"放开按键9\");\n                break;\n            case KeyEvent.KEYCODE_DEL:\n                testview.setText(\"放开按键*\");\n                break;\n            case KeyEvent.KEYCODE_ENTER:\n\n                testview.setText(\"放开按键#\");\n                break;\n            default:\n                testview.setText(\"无法识别输入\");\n                break;\n        }\n\n        return super.onKeyUp(keyCode, event);\n    }\n##方法2实现\n赋予可读写权限\n\t\n\tC:\\Users\\liang>adb shell\n\troot@octopus-f1:/ # chmod 777 /dev/input/event6\n\n代码实现\n\n\t#include <stdio.h>\n\t#include <linux/input.h>\n\t#include <stdlib.h>\n\t#include <sys/types.h>\n\t#include <sys/stat.h>\n\t#include <fcntl.h>\n\t#include\"Logger.h\"\n\t#include<pthread.h>\n\t\n\t#include\"com_example_liang_myapplication_KeyBoard.h\"\n\t\n\t#define DEV_PATH \"/dev/input/event6\"   //difference is possible\n\t\n\tstatic void* pthread_read_keyboard(void*){\n\t    int keys_fd;\n\t    char ret[2];\n\t    struct input_event t;\n\t    keys_fd=open(DEV_PATH, O_RDONLY);\n\t    if(keys_fd <= 0)\n\t    {\n\t        LOGE(\"%s device error!\\n\",DEV_PATH);\n\t    }\n\t    for(;;){\n\t        usleep(500);\n\t        if(read(keys_fd, &t, sizeof(t)) == sizeof(t))\n\t        {\n\t            if(t.type==EV_KEY)\n\t                if(t.value==0 || t.value==1)\n\t                {\n\t                    LOGE(\"key %d %s\\n\", t.code, (t.value) ? \"Pressed\" : \"Released\");\n\t                    if(t.code == KEY_ESC)\n\t                        break;\n\t                }\n\t        }\n\t\n\t\n\t    }\n\t    LOGE(\"pthread_read_keyboard exit\\n\");\n\t    close(keys_fd);\n\t} \n\n自己写的\n[DEMO](https://github.com/QUSIR/Android_KeyBoard.git)\n","source":"_posts/android键盘输入读取.md","raw":"---\ntitle: android键盘输入读取\ndate: 2017-01-21 17:07:41\ntags:\n---\n\n##android键盘输入读取\n&emsp;监控android键盘输入方式有两种，一种在java层实现，重写`onKeyDown`和`onKeyUp`方法。另一种是在jni层实现，监控`/dev/input/event0`键盘输入设备，获取输入数据。第一种方法缺陷是当有多个键盘设备时候无法区分是哪个键盘输入的，第二种方法是需要有该文件的读写权限。\n\n##调试方法\n进入adb模式\n\n\tadb shell\n输入以下指令监控键盘输入\n\n\tgetevent\n![view](http://ohjvpki1b.bkt.clouddn.com/getevent.png)\n\n##方法1实现\n代码实现\n\n\t @Override\n    public boolean onKeyDown(int keyCode,KeyEvent event){\n        switch(keyCode){\n            case KeyEvent.KEYCODE_0:\n                testview.setText(\"按下按键0\");\n                break;\n            case KeyEvent.KEYCODE_1:\n                testview.setText(\"按下按键1\");\n                break;\n            case KeyEvent.KEYCODE_2:\n                testview.setText(\"按下按键2\");\n                break;\n            case KeyEvent.KEYCODE_3:\n                testview.setText(\"按下按键3\");\n                break;\n            case KeyEvent.KEYCODE_4:\n                testview.setText(\"按下按键4\");\n                break;\n            case KeyEvent.KEYCODE_5:\n                testview.setText(\"按下按键5\");\n                break;\n            case KeyEvent.KEYCODE_6:\n                testview.setText(\"按下按键6\");\n                break;\n            case KeyEvent.KEYCODE_7:\n                testview.setText(\"按下按键7\");\n                break;\n            case KeyEvent.KEYCODE_8:\n                testview.setText(\"按下按键8\");\n                break;\n            case KeyEvent.KEYCODE_9:\n                testview.setText(\"按下按键9\");\n                break;\n            case KeyEvent.KEYCODE_DEL:\n                testview.setText(\"按下按键*\");\n                break;\n            case KeyEvent.KEYCODE_ENTER:\n                testview.setText(\"按下按键#\");\n                break;\n            default:\n                testview.setText(\"无法识别输入\");\n                break;\n\n        }\n\n        return super.onKeyDown(keyCode, event);\n    }\n    /*释放按键事件*/\n    @Override\n    public boolean onKeyUp(int keyCode,KeyEvent event){\n        switch(keyCode){\n            case KeyEvent.KEYCODE_0:\n                testview.setText(\"放开按键0\");\n                break;\n            case KeyEvent.KEYCODE_1:\n                testview.setText(\"放开按键1\");\n                break;\n            case KeyEvent.KEYCODE_2:\n                testview.setText(\"放开按键2\");\n                break;\n            case KeyEvent.KEYCODE_3:\n                testview.setText(\"放开按键3\");\n                break;\n            case KeyEvent.KEYCODE_4:\n                testview.setText(\"放开按键4\");\n                break;\n            case KeyEvent.KEYCODE_5:\n                testview.setText(\"放开按键5\");\n                break;\n            case KeyEvent.KEYCODE_6:\n                testview.setText(\"放开按键6\");\n                break;\n            case KeyEvent.KEYCODE_7:\n                testview.setText(\"放开按键7\");\n                break;\n            case KeyEvent.KEYCODE_8:\n                testview.setText(\"放开按键8\");\n                break;\n            case KeyEvent.KEYCODE_9:\n                testview.setText(\"放开按键9\");\n                break;\n            case KeyEvent.KEYCODE_DEL:\n                testview.setText(\"放开按键*\");\n                break;\n            case KeyEvent.KEYCODE_ENTER:\n\n                testview.setText(\"放开按键#\");\n                break;\n            default:\n                testview.setText(\"无法识别输入\");\n                break;\n        }\n\n        return super.onKeyUp(keyCode, event);\n    }\n##方法2实现\n赋予可读写权限\n\t\n\tC:\\Users\\liang>adb shell\n\troot@octopus-f1:/ # chmod 777 /dev/input/event6\n\n代码实现\n\n\t#include <stdio.h>\n\t#include <linux/input.h>\n\t#include <stdlib.h>\n\t#include <sys/types.h>\n\t#include <sys/stat.h>\n\t#include <fcntl.h>\n\t#include\"Logger.h\"\n\t#include<pthread.h>\n\t\n\t#include\"com_example_liang_myapplication_KeyBoard.h\"\n\t\n\t#define DEV_PATH \"/dev/input/event6\"   //difference is possible\n\t\n\tstatic void* pthread_read_keyboard(void*){\n\t    int keys_fd;\n\t    char ret[2];\n\t    struct input_event t;\n\t    keys_fd=open(DEV_PATH, O_RDONLY);\n\t    if(keys_fd <= 0)\n\t    {\n\t        LOGE(\"%s device error!\\n\",DEV_PATH);\n\t    }\n\t    for(;;){\n\t        usleep(500);\n\t        if(read(keys_fd, &t, sizeof(t)) == sizeof(t))\n\t        {\n\t            if(t.type==EV_KEY)\n\t                if(t.value==0 || t.value==1)\n\t                {\n\t                    LOGE(\"key %d %s\\n\", t.code, (t.value) ? \"Pressed\" : \"Released\");\n\t                    if(t.code == KEY_ESC)\n\t                        break;\n\t                }\n\t        }\n\t\n\t\n\t    }\n\t    LOGE(\"pthread_read_keyboard exit\\n\");\n\t    close(keys_fd);\n\t} \n\n自己写的\n[DEMO](https://github.com/QUSIR/Android_KeyBoard.git)\n","slug":"android键盘输入读取","published":1,"updated":"2017-09-21T01:55:27.186Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7ttahuz0009de5l8zbs9o45","content":"<p>##android键盘输入读取<br>&emsp;监控android键盘输入方式有两种，一种在java层实现，重写<code>onKeyDown</code>和<code>onKeyUp</code>方法。另一种是在jni层实现，监控<code>/dev/input/event0</code>键盘输入设备，获取输入数据。第一种方法缺陷是当有多个键盘设备时候无法区分是哪个键盘输入的，第二种方法是需要有该文件的读写权限。</p>\n<p>##调试方法<br>进入adb模式</p>\n<pre><code>adb shell\n</code></pre><p>输入以下指令监控键盘输入</p>\n<pre><code>getevent\n</code></pre><p><img src=\"http://ohjvpki1b.bkt.clouddn.com/getevent.png\" alt=\"view\"></p>\n<p>##方法1实现<br>代码实现</p>\n<pre><code> @Override\npublic boolean onKeyDown(int keyCode,KeyEvent event){\n    switch(keyCode){\n        case KeyEvent.KEYCODE_0:\n            testview.setText(&quot;按下按键0&quot;);\n            break;\n        case KeyEvent.KEYCODE_1:\n            testview.setText(&quot;按下按键1&quot;);\n            break;\n        case KeyEvent.KEYCODE_2:\n            testview.setText(&quot;按下按键2&quot;);\n            break;\n        case KeyEvent.KEYCODE_3:\n            testview.setText(&quot;按下按键3&quot;);\n            break;\n        case KeyEvent.KEYCODE_4:\n            testview.setText(&quot;按下按键4&quot;);\n            break;\n        case KeyEvent.KEYCODE_5:\n            testview.setText(&quot;按下按键5&quot;);\n            break;\n        case KeyEvent.KEYCODE_6:\n            testview.setText(&quot;按下按键6&quot;);\n            break;\n        case KeyEvent.KEYCODE_7:\n            testview.setText(&quot;按下按键7&quot;);\n            break;\n        case KeyEvent.KEYCODE_8:\n            testview.setText(&quot;按下按键8&quot;);\n            break;\n        case KeyEvent.KEYCODE_9:\n            testview.setText(&quot;按下按键9&quot;);\n            break;\n        case KeyEvent.KEYCODE_DEL:\n            testview.setText(&quot;按下按键*&quot;);\n            break;\n        case KeyEvent.KEYCODE_ENTER:\n            testview.setText(&quot;按下按键#&quot;);\n            break;\n        default:\n            testview.setText(&quot;无法识别输入&quot;);\n            break;\n\n    }\n\n    return super.onKeyDown(keyCode, event);\n}\n/*释放按键事件*/\n@Override\npublic boolean onKeyUp(int keyCode,KeyEvent event){\n    switch(keyCode){\n        case KeyEvent.KEYCODE_0:\n            testview.setText(&quot;放开按键0&quot;);\n            break;\n        case KeyEvent.KEYCODE_1:\n            testview.setText(&quot;放开按键1&quot;);\n            break;\n        case KeyEvent.KEYCODE_2:\n            testview.setText(&quot;放开按键2&quot;);\n            break;\n        case KeyEvent.KEYCODE_3:\n            testview.setText(&quot;放开按键3&quot;);\n            break;\n        case KeyEvent.KEYCODE_4:\n            testview.setText(&quot;放开按键4&quot;);\n            break;\n        case KeyEvent.KEYCODE_5:\n            testview.setText(&quot;放开按键5&quot;);\n            break;\n        case KeyEvent.KEYCODE_6:\n            testview.setText(&quot;放开按键6&quot;);\n            break;\n        case KeyEvent.KEYCODE_7:\n            testview.setText(&quot;放开按键7&quot;);\n            break;\n        case KeyEvent.KEYCODE_8:\n            testview.setText(&quot;放开按键8&quot;);\n            break;\n        case KeyEvent.KEYCODE_9:\n            testview.setText(&quot;放开按键9&quot;);\n            break;\n        case KeyEvent.KEYCODE_DEL:\n            testview.setText(&quot;放开按键*&quot;);\n            break;\n        case KeyEvent.KEYCODE_ENTER:\n\n            testview.setText(&quot;放开按键#&quot;);\n            break;\n        default:\n            testview.setText(&quot;无法识别输入&quot;);\n            break;\n    }\n\n    return super.onKeyUp(keyCode, event);\n}\n</code></pre><p>##方法2实现<br>赋予可读写权限</p>\n<pre><code>C:\\Users\\liang&gt;adb shell\nroot@octopus-f1:/ # chmod 777 /dev/input/event6\n</code></pre><p>代码实现</p>\n<pre><code>#include &lt;stdio.h&gt;\n#include &lt;linux/input.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;sys/stat.h&gt;\n#include &lt;fcntl.h&gt;\n#include&quot;Logger.h&quot;\n#include&lt;pthread.h&gt;\n\n#include&quot;com_example_liang_myapplication_KeyBoard.h&quot;\n\n#define DEV_PATH &quot;/dev/input/event6&quot;   //difference is possible\n\nstatic void* pthread_read_keyboard(void*){\n    int keys_fd;\n    char ret[2];\n    struct input_event t;\n    keys_fd=open(DEV_PATH, O_RDONLY);\n    if(keys_fd &lt;= 0)\n    {\n        LOGE(&quot;%s device error!\\n&quot;,DEV_PATH);\n    }\n    for(;;){\n        usleep(500);\n        if(read(keys_fd, &amp;t, sizeof(t)) == sizeof(t))\n        {\n            if(t.type==EV_KEY)\n                if(t.value==0 || t.value==1)\n                {\n                    LOGE(&quot;key %d %s\\n&quot;, t.code, (t.value) ? &quot;Pressed&quot; : &quot;Released&quot;);\n                    if(t.code == KEY_ESC)\n                        break;\n                }\n        }\n\n\n    }\n    LOGE(&quot;pthread_read_keyboard exit\\n&quot;);\n    close(keys_fd);\n} \n</code></pre><p>自己写的<br><a href=\"https://github.com/QUSIR/Android_KeyBoard.git\" target=\"_blank\" rel=\"external\">DEMO</a></p>\n","excerpt":"","more":"<p>##android键盘输入读取<br>&emsp;监控android键盘输入方式有两种，一种在java层实现，重写<code>onKeyDown</code>和<code>onKeyUp</code>方法。另一种是在jni层实现，监控<code>/dev/input/event0</code>键盘输入设备，获取输入数据。第一种方法缺陷是当有多个键盘设备时候无法区分是哪个键盘输入的，第二种方法是需要有该文件的读写权限。</p>\n<p>##调试方法<br>进入adb模式</p>\n<pre><code>adb shell\n</code></pre><p>输入以下指令监控键盘输入</p>\n<pre><code>getevent\n</code></pre><p><img src=\"http://ohjvpki1b.bkt.clouddn.com/getevent.png\" alt=\"view\"></p>\n<p>##方法1实现<br>代码实现</p>\n<pre><code> @Override\npublic boolean onKeyDown(int keyCode,KeyEvent event){\n    switch(keyCode){\n        case KeyEvent.KEYCODE_0:\n            testview.setText(&quot;按下按键0&quot;);\n            break;\n        case KeyEvent.KEYCODE_1:\n            testview.setText(&quot;按下按键1&quot;);\n            break;\n        case KeyEvent.KEYCODE_2:\n            testview.setText(&quot;按下按键2&quot;);\n            break;\n        case KeyEvent.KEYCODE_3:\n            testview.setText(&quot;按下按键3&quot;);\n            break;\n        case KeyEvent.KEYCODE_4:\n            testview.setText(&quot;按下按键4&quot;);\n            break;\n        case KeyEvent.KEYCODE_5:\n            testview.setText(&quot;按下按键5&quot;);\n            break;\n        case KeyEvent.KEYCODE_6:\n            testview.setText(&quot;按下按键6&quot;);\n            break;\n        case KeyEvent.KEYCODE_7:\n            testview.setText(&quot;按下按键7&quot;);\n            break;\n        case KeyEvent.KEYCODE_8:\n            testview.setText(&quot;按下按键8&quot;);\n            break;\n        case KeyEvent.KEYCODE_9:\n            testview.setText(&quot;按下按键9&quot;);\n            break;\n        case KeyEvent.KEYCODE_DEL:\n            testview.setText(&quot;按下按键*&quot;);\n            break;\n        case KeyEvent.KEYCODE_ENTER:\n            testview.setText(&quot;按下按键#&quot;);\n            break;\n        default:\n            testview.setText(&quot;无法识别输入&quot;);\n            break;\n\n    }\n\n    return super.onKeyDown(keyCode, event);\n}\n/*释放按键事件*/\n@Override\npublic boolean onKeyUp(int keyCode,KeyEvent event){\n    switch(keyCode){\n        case KeyEvent.KEYCODE_0:\n            testview.setText(&quot;放开按键0&quot;);\n            break;\n        case KeyEvent.KEYCODE_1:\n            testview.setText(&quot;放开按键1&quot;);\n            break;\n        case KeyEvent.KEYCODE_2:\n            testview.setText(&quot;放开按键2&quot;);\n            break;\n        case KeyEvent.KEYCODE_3:\n            testview.setText(&quot;放开按键3&quot;);\n            break;\n        case KeyEvent.KEYCODE_4:\n            testview.setText(&quot;放开按键4&quot;);\n            break;\n        case KeyEvent.KEYCODE_5:\n            testview.setText(&quot;放开按键5&quot;);\n            break;\n        case KeyEvent.KEYCODE_6:\n            testview.setText(&quot;放开按键6&quot;);\n            break;\n        case KeyEvent.KEYCODE_7:\n            testview.setText(&quot;放开按键7&quot;);\n            break;\n        case KeyEvent.KEYCODE_8:\n            testview.setText(&quot;放开按键8&quot;);\n            break;\n        case KeyEvent.KEYCODE_9:\n            testview.setText(&quot;放开按键9&quot;);\n            break;\n        case KeyEvent.KEYCODE_DEL:\n            testview.setText(&quot;放开按键*&quot;);\n            break;\n        case KeyEvent.KEYCODE_ENTER:\n\n            testview.setText(&quot;放开按键#&quot;);\n            break;\n        default:\n            testview.setText(&quot;无法识别输入&quot;);\n            break;\n    }\n\n    return super.onKeyUp(keyCode, event);\n}\n</code></pre><p>##方法2实现<br>赋予可读写权限</p>\n<pre><code>C:\\Users\\liang&gt;adb shell\nroot@octopus-f1:/ # chmod 777 /dev/input/event6\n</code></pre><p>代码实现</p>\n<pre><code>#include &lt;stdio.h&gt;\n#include &lt;linux/input.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;sys/stat.h&gt;\n#include &lt;fcntl.h&gt;\n#include&quot;Logger.h&quot;\n#include&lt;pthread.h&gt;\n\n#include&quot;com_example_liang_myapplication_KeyBoard.h&quot;\n\n#define DEV_PATH &quot;/dev/input/event6&quot;   //difference is possible\n\nstatic void* pthread_read_keyboard(void*){\n    int keys_fd;\n    char ret[2];\n    struct input_event t;\n    keys_fd=open(DEV_PATH, O_RDONLY);\n    if(keys_fd &lt;= 0)\n    {\n        LOGE(&quot;%s device error!\\n&quot;,DEV_PATH);\n    }\n    for(;;){\n        usleep(500);\n        if(read(keys_fd, &amp;t, sizeof(t)) == sizeof(t))\n        {\n            if(t.type==EV_KEY)\n                if(t.value==0 || t.value==1)\n                {\n                    LOGE(&quot;key %d %s\\n&quot;, t.code, (t.value) ? &quot;Pressed&quot; : &quot;Released&quot;);\n                    if(t.code == KEY_ESC)\n                        break;\n                }\n        }\n\n\n    }\n    LOGE(&quot;pthread_read_keyboard exit\\n&quot;);\n    close(keys_fd);\n} \n</code></pre><p>自己写的<br><a href=\"https://github.com/QUSIR/Android_KeyBoard.git\">DEMO</a></p>\n"},{"title":"armbian定制教程","date":"2017-02-14T14:42:39.000Z","_content":"\n\n##时间201702141045\n##官方网站\n\n[https://www.armbian.com/](https://www.armbian.com/)\n\n可以下载相应板子对应的镜像\n\n![view](http://ohjvpki1b.bkt.clouddn.com/armbian_download.png)\n\n###下载源码，定制系统生成相对应镜像\n\n\tmkdir armbian\n\tapt-get -y install git\n\tgit clone https://github.com/igorpecovnik/lib --depth 1\n\tcp lib/compile.sh .\n开启代理，不然会生成失败，需要下载相应文件，服务器在国外会比较慢，或是被墙住了\n\n\t生成指令\n\t./compile.sh KERNEL_CONFIGURE=yes\n\n\n生成过程中选择相对应板子选项，然后再`output/image/`目录下生成相对应文件，然后将该文件烧入SD卡内。\n\n##官方文档\n[https://docs.armbian.com/](https://docs.armbian.com/)","source":"_posts/armbian定制教程.md","raw":"---\ntitle: armbian定制教程\ndate: 2017-02-14 22:42:39\ntags:\n---\n\n\n##时间201702141045\n##官方网站\n\n[https://www.armbian.com/](https://www.armbian.com/)\n\n可以下载相应板子对应的镜像\n\n![view](http://ohjvpki1b.bkt.clouddn.com/armbian_download.png)\n\n###下载源码，定制系统生成相对应镜像\n\n\tmkdir armbian\n\tapt-get -y install git\n\tgit clone https://github.com/igorpecovnik/lib --depth 1\n\tcp lib/compile.sh .\n开启代理，不然会生成失败，需要下载相应文件，服务器在国外会比较慢，或是被墙住了\n\n\t生成指令\n\t./compile.sh KERNEL_CONFIGURE=yes\n\n\n生成过程中选择相对应板子选项，然后再`output/image/`目录下生成相对应文件，然后将该文件烧入SD卡内。\n\n##官方文档\n[https://docs.armbian.com/](https://docs.armbian.com/)","slug":"armbian定制教程","published":1,"updated":"2017-09-21T01:55:27.186Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7ttahv2000ade5lxnre2vij","content":"<p>##时间201702141045</p>\n<p>##官方网站</p>\n<p><a href=\"https://www.armbian.com/\" target=\"_blank\" rel=\"external\">https://www.armbian.com/</a></p>\n<p>可以下载相应板子对应的镜像</p>\n<p><img src=\"http://ohjvpki1b.bkt.clouddn.com/armbian_download.png\" alt=\"view\"></p>\n<p>###下载源码，定制系统生成相对应镜像</p>\n<pre><code>mkdir armbian\napt-get -y install git\ngit clone https://github.com/igorpecovnik/lib --depth 1\ncp lib/compile.sh .\n</code></pre><p>开启代理，不然会生成失败，需要下载相应文件，服务器在国外会比较慢，或是被墙住了</p>\n<pre><code>生成指令\n./compile.sh KERNEL_CONFIGURE=yes\n</code></pre><p>生成过程中选择相对应板子选项，然后再<code>output/image/</code>目录下生成相对应文件，然后将该文件烧入SD卡内。</p>\n<p>##官方文档<br><a href=\"https://docs.armbian.com/\" target=\"_blank\" rel=\"external\">https://docs.armbian.com/</a></p>\n","excerpt":"","more":"<p>##时间201702141045</p>\n<p>##官方网站</p>\n<p><a href=\"https://www.armbian.com/\">https://www.armbian.com/</a></p>\n<p>可以下载相应板子对应的镜像</p>\n<p><img src=\"http://ohjvpki1b.bkt.clouddn.com/armbian_download.png\" alt=\"view\"></p>\n<p>###下载源码，定制系统生成相对应镜像</p>\n<pre><code>mkdir armbian\napt-get -y install git\ngit clone https://github.com/igorpecovnik/lib --depth 1\ncp lib/compile.sh .\n</code></pre><p>开启代理，不然会生成失败，需要下载相应文件，服务器在国外会比较慢，或是被墙住了</p>\n<pre><code>生成指令\n./compile.sh KERNEL_CONFIGURE=yes\n</code></pre><p>生成过程中选择相对应板子选项，然后再<code>output/image/</code>目录下生成相对应文件，然后将该文件烧入SD卡内。</p>\n<p>##官方文档<br><a href=\"https://docs.armbian.com/\">https://docs.armbian.com/</a></p>\n"},{"title":"docker使用代理","date":"2017-04-08T14:30:33.000Z","_content":"\n\n#说明\n\t由于docker官方原版镜像被墙，使用Shadowsocks翻墙，通过privoxy由socker转为http协议，实现docker代理。\n\n#创建目录\n\tmkdir -p /etc/systemd/system/docker.service.d\n\n#创建配置文件\n\tvim /etc/systemd/system/docker.service.d/http-proxy.conf\n写入以下数据\n\n\t[Service]\n\tEnvironment=\"HTTP_PROXY=http://proxy.example.com:80/\"\n`http://proxy.example.com`为代理地址\n#更新配置\n\tsudo systemctl daemon-reload\n#检查配置\n\tsystemctl show --property=Environment docker\n\n正常会输出以下信息\n\t\n\tEnvironment=HTTP_PROXY=http://proxy.example.com:80/\n#重启docker\n\tsudo systemctl restart docker\n#测试\n\t docker pull ubuntu:14.04\n\t docker run -it --rm ubuntu:14.04 bash","source":"_posts/docker使用代理.md","raw":"---\ntitle: docker使用代理\ndate: 2017-04-08 22:30:33\ntags:\n---\n\n\n#说明\n\t由于docker官方原版镜像被墙，使用Shadowsocks翻墙，通过privoxy由socker转为http协议，实现docker代理。\n\n#创建目录\n\tmkdir -p /etc/systemd/system/docker.service.d\n\n#创建配置文件\n\tvim /etc/systemd/system/docker.service.d/http-proxy.conf\n写入以下数据\n\n\t[Service]\n\tEnvironment=\"HTTP_PROXY=http://proxy.example.com:80/\"\n`http://proxy.example.com`为代理地址\n#更新配置\n\tsudo systemctl daemon-reload\n#检查配置\n\tsystemctl show --property=Environment docker\n\n正常会输出以下信息\n\t\n\tEnvironment=HTTP_PROXY=http://proxy.example.com:80/\n#重启docker\n\tsudo systemctl restart docker\n#测试\n\t docker pull ubuntu:14.04\n\t docker run -it --rm ubuntu:14.04 bash","slug":"docker使用代理","published":1,"updated":"2017-09-21T01:55:27.186Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7ttahv5000bde5l7pm33lhn","content":"<p>#说明<br>    由于docker官方原版镜像被墙，使用Shadowsocks翻墙，通过privoxy由socker转为http协议，实现docker代理。</p>\n<p>#创建目录<br>    mkdir -p /etc/systemd/system/docker.service.d</p>\n<p>#创建配置文件<br>    vim /etc/systemd/system/docker.service.d/http-proxy.conf<br>写入以下数据</p>\n<pre><code>[Service]\nEnvironment=&quot;HTTP_PROXY=http://proxy.example.com:80/&quot;\n</code></pre><p><code>http://proxy.example.com</code>为代理地址</p>\n<p>#更新配置<br>    sudo systemctl daemon-reload</p>\n<p>#检查配置<br>    systemctl show –property=Environment docker</p>\n<p>正常会输出以下信息</p>\n<pre><code>Environment=HTTP_PROXY=http://proxy.example.com:80/\n</code></pre><p>#重启docker<br>    sudo systemctl restart docker</p>\n<p>#测试<br>     docker pull ubuntu:14.04<br>     docker run -it –rm ubuntu:14.04 bash</p>\n","excerpt":"","more":"<p>#说明<br>    由于docker官方原版镜像被墙，使用Shadowsocks翻墙，通过privoxy由socker转为http协议，实现docker代理。</p>\n<p>#创建目录<br>    mkdir -p /etc/systemd/system/docker.service.d</p>\n<p>#创建配置文件<br>    vim /etc/systemd/system/docker.service.d/http-proxy.conf<br>写入以下数据</p>\n<pre><code>[Service]\nEnvironment=&quot;HTTP_PROXY=http://proxy.example.com:80/&quot;\n</code></pre><p><code>http://proxy.example.com</code>为代理地址</p>\n<p>#更新配置<br>    sudo systemctl daemon-reload</p>\n<p>#检查配置<br>    systemctl show –property=Environment docker</p>\n<p>正常会输出以下信息</p>\n<pre><code>Environment=HTTP_PROXY=http://proxy.example.com:80/\n</code></pre><p>#重启docker<br>    sudo systemctl restart docker</p>\n<p>#测试<br>     docker pull ubuntu:14.04<br>     docker run -it –rm ubuntu:14.04 bash</p>\n"},{"title":"hikey android源码编译","date":"2017-01-21T09:17:41.000Z","_content":"\n##同步源码\n\trepo init -u https://android.googlesource.com/platform/manifest -b master\n\t\n\trepo sync -j24\n\n##下载相应驱动\n\n\twget https://dl.google.com/dl/android/aosp/linaro-hikey-20160226-67c37b1a.tgz\n\t\n\ttar xzf linaro-hikey-20160226-67c37b1a.tgz\n\t\n    ./extract-linaro-hikey.sh\n\n##编译源码\n\t . ./build/envsetup.sh\n\t\n\t lunch hikey-userdebug\n\t\n\t make -j32","source":"_posts/hikey-android源码编译.md","raw":"---\ntitle: hikey android源码编译\ndate: 2017-01-21 17:17:41\ntags:\n---\n\n##同步源码\n\trepo init -u https://android.googlesource.com/platform/manifest -b master\n\t\n\trepo sync -j24\n\n##下载相应驱动\n\n\twget https://dl.google.com/dl/android/aosp/linaro-hikey-20160226-67c37b1a.tgz\n\t\n\ttar xzf linaro-hikey-20160226-67c37b1a.tgz\n\t\n    ./extract-linaro-hikey.sh\n\n##编译源码\n\t . ./build/envsetup.sh\n\t\n\t lunch hikey-userdebug\n\t\n\t make -j32","slug":"hikey-android源码编译","published":1,"updated":"2017-09-21T01:55:27.186Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7ttahv7000cde5linp9m6vu","content":"<p>##同步源码<br>    repo init -u <a href=\"https://android.googlesource.com/platform/manifest\" target=\"_blank\" rel=\"external\">https://android.googlesource.com/platform/manifest</a> -b master</p>\n<pre><code>repo sync -j24\n</code></pre><p>##下载相应驱动</p>\n<pre><code>wget https://dl.google.com/dl/android/aosp/linaro-hikey-20160226-67c37b1a.tgz\n\ntar xzf linaro-hikey-20160226-67c37b1a.tgz\n\n./extract-linaro-hikey.sh\n</code></pre><p>##编译源码<br>     . ./build/envsetup.sh</p>\n<pre><code>lunch hikey-userdebug\n\nmake -j32\n</code></pre>","excerpt":"","more":"<p>##同步源码<br>    repo init -u <a href=\"https://android.googlesource.com/platform/manifest\">https://android.googlesource.com/platform/manifest</a> -b master</p>\n<pre><code>repo sync -j24\n</code></pre><p>##下载相应驱动</p>\n<pre><code>wget https://dl.google.com/dl/android/aosp/linaro-hikey-20160226-67c37b1a.tgz\n\ntar xzf linaro-hikey-20160226-67c37b1a.tgz\n\n./extract-linaro-hikey.sh\n</code></pre><p>##编译源码<br>     . ./build/envsetup.sh</p>\n<pre><code>lunch hikey-userdebug\n\nmake -j32\n</code></pre>"},{"title":"hikey替换android内核","date":"2017-01-21T09:18:49.000Z","_content":"\n##配置编译器\n\tmkdir ~/arm64-tc\n\t\n###输入如下命令下载编译需要用到的组件压缩包 \n\twget https://releases.linaro.org/14.09/components/toolchain/binaries/\n\tgcc-linaro-aarch64-linux-gnu-4.9-2014.09_linux.tar.xz\n\t\n###然后输入如下命令解压上面下载的压缩包 \n\t\n\ttar --strip-components=1 -C ~/arm64-tc -xf gcc-linaro-aarch64-linux-gnu-4.9-2014.09_linux.tar.xz\n\t\n###然后设置环境变量 \n\t\n\texport PATH=~/arm64-tc/bin:$PATH\n\n##目前有两种版本选择，一种为Landing Team版本，另外一种为Reference Platform Build版本 \n\n##下载Landing Team版本内核源码 \n\tgit clone https://github.com/96boards/linux.git\n\t\n\t然后输入如下命令检出最新内核版本15.11 \n\t\n\tcd linux\n\tgit checkout -b working-hikey 96boards-hikey-15.11\n\n##如果使用Reference Platform Build版本内核源码，输入如下命令下载 \n\n\tgit clone https://github.com/rsalveti/linux.git\n\t\n\t然后输入如下命令检出最新内核 \n\t\n\tgit checkout reference-hikey-rebase\n\n##最后输入如下命令开始编译内核 \n\n\texport ARCH=arm64\n\texport CROSS_COMPILE=aarch64-linux-gnu-\n\texport LOCALVERSION=\"-linaro-hikey\"\n\tmake distclean \n\tmake defconfig \n\tmake -j8 Image modules hi6220-hikey.dtb 2>&1 | tee build-log.txt\n\n##使用以下命令编译内核模块 \n\n\texport PWD=`pwd`\n\texport INSTALL_MOD_PATH=\"$PWD/installed-modules\"\n\tmkdir $INSTALL_MOD_PATH\n\tmake -j8 modules_install\n\n\n\n\n生成如下文件\n\n\tarch/arm64/boot/dts/hisilicon/hi6220-hikey.dtb\n\tarch/arm64/boot/Image-dtb\n\n复制到前面新建的目录下面，即AOSP的/kernel/hikey-linaro目录。\n\n确保我们此时的环境是HiKey的编译环境，即\n\n\t$ source build/envsetup.sh \n\t$ lunch hikey-userdebug\n最后，编译boot.img文件\n\n\t$ make bootimage -j4\n\n这一步时间很短，我花了13S就完成了。\n\n其实会生成2个文件，即 \n/out/target/product/hikey/boot.img \n和 \n/out/target/product/hikey/ramdisk.img\n刷机\n\n有了前面编译AOSP并且刷机的经验，这一过程就比较简单了。\n\n根据使用HiKey进行开发里所说的，我们首先关机状态下将j15的跳线5-6闭合。然后开机进入fastboot模式。\n\n然后将设备连接至虚拟机，可以使用如下命令查看设备是否已连接：\n\n\t$ fastboot devices\n\n\n连接上之后，我们只刷boot分区，命令如下(假定你在AOSP根目录)\n\n\tfastboot flash boot out/target/product/hikey/boot.img\n\n大约不到2s，刷机完成。\n\n##问题与解决\n\n刷机完成之后，开机进入系统，发现Kernel version的信息和之前的没有变化。也就是说我们刚才刷入的依然是Google prebuilt的kernel。\n\n首先我对比了新生成的boot.img文件和之前的boot.img文件(幸好虚拟机有备份)，发现md5一模一样，也就是说并没有生成新的boot.img文件。\n\n回想之前编译完成kernel之后，要手动复制2个文件到指定目录(hi6220-hikey.dtb和Image-dtb)。在AOSP根目录使用find命令搜索这两个文件，发现除了out目录和我们前边创建的/kernel/hikey-linaro目录外，在下面的目录还有这两个文件\n\n/device/linaro/hikey-kernel\n\n其实这个目录里的文件就是Google prebuilt的kernel文件。 \n我们将前边编译生成的hi6220-hikey.dtb和Image-dtb文件复制到上面的目录中(你可以将原来的文件备份到一个新建的目录里边以防止刷编译的kernel失败之后可以快速切换回来)。\n\n然后，我们再重新执行上面的编译boot.img文件步骤，生成新的boot.img文件。 \n由于前面的失败经历，这次长了个心眼，将新老boot.img文件的md5对比了一下，发现确实不一样。\n\n真正编译成功后我们再执行前面的刷机步骤，开机之后发现Kernel version的信息确实变了：\n","source":"_posts/hikey替换android内核.md","raw":"---\ntitle: hikey替换android内核\ndate: 2017-01-21 17:18:49\ntags:\n---\n\n##配置编译器\n\tmkdir ~/arm64-tc\n\t\n###输入如下命令下载编译需要用到的组件压缩包 \n\twget https://releases.linaro.org/14.09/components/toolchain/binaries/\n\tgcc-linaro-aarch64-linux-gnu-4.9-2014.09_linux.tar.xz\n\t\n###然后输入如下命令解压上面下载的压缩包 \n\t\n\ttar --strip-components=1 -C ~/arm64-tc -xf gcc-linaro-aarch64-linux-gnu-4.9-2014.09_linux.tar.xz\n\t\n###然后设置环境变量 \n\t\n\texport PATH=~/arm64-tc/bin:$PATH\n\n##目前有两种版本选择，一种为Landing Team版本，另外一种为Reference Platform Build版本 \n\n##下载Landing Team版本内核源码 \n\tgit clone https://github.com/96boards/linux.git\n\t\n\t然后输入如下命令检出最新内核版本15.11 \n\t\n\tcd linux\n\tgit checkout -b working-hikey 96boards-hikey-15.11\n\n##如果使用Reference Platform Build版本内核源码，输入如下命令下载 \n\n\tgit clone https://github.com/rsalveti/linux.git\n\t\n\t然后输入如下命令检出最新内核 \n\t\n\tgit checkout reference-hikey-rebase\n\n##最后输入如下命令开始编译内核 \n\n\texport ARCH=arm64\n\texport CROSS_COMPILE=aarch64-linux-gnu-\n\texport LOCALVERSION=\"-linaro-hikey\"\n\tmake distclean \n\tmake defconfig \n\tmake -j8 Image modules hi6220-hikey.dtb 2>&1 | tee build-log.txt\n\n##使用以下命令编译内核模块 \n\n\texport PWD=`pwd`\n\texport INSTALL_MOD_PATH=\"$PWD/installed-modules\"\n\tmkdir $INSTALL_MOD_PATH\n\tmake -j8 modules_install\n\n\n\n\n生成如下文件\n\n\tarch/arm64/boot/dts/hisilicon/hi6220-hikey.dtb\n\tarch/arm64/boot/Image-dtb\n\n复制到前面新建的目录下面，即AOSP的/kernel/hikey-linaro目录。\n\n确保我们此时的环境是HiKey的编译环境，即\n\n\t$ source build/envsetup.sh \n\t$ lunch hikey-userdebug\n最后，编译boot.img文件\n\n\t$ make bootimage -j4\n\n这一步时间很短，我花了13S就完成了。\n\n其实会生成2个文件，即 \n/out/target/product/hikey/boot.img \n和 \n/out/target/product/hikey/ramdisk.img\n刷机\n\n有了前面编译AOSP并且刷机的经验，这一过程就比较简单了。\n\n根据使用HiKey进行开发里所说的，我们首先关机状态下将j15的跳线5-6闭合。然后开机进入fastboot模式。\n\n然后将设备连接至虚拟机，可以使用如下命令查看设备是否已连接：\n\n\t$ fastboot devices\n\n\n连接上之后，我们只刷boot分区，命令如下(假定你在AOSP根目录)\n\n\tfastboot flash boot out/target/product/hikey/boot.img\n\n大约不到2s，刷机完成。\n\n##问题与解决\n\n刷机完成之后，开机进入系统，发现Kernel version的信息和之前的没有变化。也就是说我们刚才刷入的依然是Google prebuilt的kernel。\n\n首先我对比了新生成的boot.img文件和之前的boot.img文件(幸好虚拟机有备份)，发现md5一模一样，也就是说并没有生成新的boot.img文件。\n\n回想之前编译完成kernel之后，要手动复制2个文件到指定目录(hi6220-hikey.dtb和Image-dtb)。在AOSP根目录使用find命令搜索这两个文件，发现除了out目录和我们前边创建的/kernel/hikey-linaro目录外，在下面的目录还有这两个文件\n\n/device/linaro/hikey-kernel\n\n其实这个目录里的文件就是Google prebuilt的kernel文件。 \n我们将前边编译生成的hi6220-hikey.dtb和Image-dtb文件复制到上面的目录中(你可以将原来的文件备份到一个新建的目录里边以防止刷编译的kernel失败之后可以快速切换回来)。\n\n然后，我们再重新执行上面的编译boot.img文件步骤，生成新的boot.img文件。 \n由于前面的失败经历，这次长了个心眼，将新老boot.img文件的md5对比了一下，发现确实不一样。\n\n真正编译成功后我们再执行前面的刷机步骤，开机之后发现Kernel version的信息确实变了：\n","slug":"hikey替换android内核","published":1,"updated":"2017-09-21T01:55:27.186Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7ttahva000dde5l02z5fqcc","content":"<p>##配置编译器<br>    mkdir ~/arm64-tc</p>\n<p>###输入如下命令下载编译需要用到的组件压缩包<br>    wget <a href=\"https://releases.linaro.org/14.09/components/toolchain/binaries/\" target=\"_blank\" rel=\"external\">https://releases.linaro.org/14.09/components/toolchain/binaries/</a><br>    gcc-linaro-aarch64-linux-gnu-4.9-2014.09_linux.tar.xz</p>\n<p>###然后输入如下命令解压上面下载的压缩包 </p>\n<pre><code>tar --strip-components=1 -C ~/arm64-tc -xf gcc-linaro-aarch64-linux-gnu-4.9-2014.09_linux.tar.xz\n</code></pre><p>###然后设置环境变量 </p>\n<pre><code>export PATH=~/arm64-tc/bin:$PATH\n</code></pre><p>##目前有两种版本选择，一种为Landing Team版本，另外一种为Reference Platform Build版本 </p>\n<p>##下载Landing Team版本内核源码<br>    git clone <a href=\"https://github.com/96boards/linux.git\" target=\"_blank\" rel=\"external\">https://github.com/96boards/linux.git</a></p>\n<pre><code>然后输入如下命令检出最新内核版本15.11 \n\ncd linux\ngit checkout -b working-hikey 96boards-hikey-15.11\n</code></pre><p>##如果使用Reference Platform Build版本内核源码，输入如下命令下载 </p>\n<pre><code>git clone https://github.com/rsalveti/linux.git\n\n然后输入如下命令检出最新内核 \n\ngit checkout reference-hikey-rebase\n</code></pre><p>##最后输入如下命令开始编译内核 </p>\n<pre><code>export ARCH=arm64\nexport CROSS_COMPILE=aarch64-linux-gnu-\nexport LOCALVERSION=&quot;-linaro-hikey&quot;\nmake distclean \nmake defconfig \nmake -j8 Image modules hi6220-hikey.dtb 2&gt;&amp;1 | tee build-log.txt\n</code></pre><p>##使用以下命令编译内核模块 </p>\n<pre><code>export PWD=`pwd`\nexport INSTALL_MOD_PATH=&quot;$PWD/installed-modules&quot;\nmkdir $INSTALL_MOD_PATH\nmake -j8 modules_install\n</code></pre><p>生成如下文件</p>\n<pre><code>arch/arm64/boot/dts/hisilicon/hi6220-hikey.dtb\narch/arm64/boot/Image-dtb\n</code></pre><p>复制到前面新建的目录下面，即AOSP的/kernel/hikey-linaro目录。</p>\n<p>确保我们此时的环境是HiKey的编译环境，即</p>\n<pre><code>$ source build/envsetup.sh \n$ lunch hikey-userdebug\n</code></pre><p>最后，编译boot.img文件</p>\n<pre><code>$ make bootimage -j4\n</code></pre><p>这一步时间很短，我花了13S就完成了。</p>\n<p>其实会生成2个文件，即<br>/out/target/product/hikey/boot.img<br>和<br>/out/target/product/hikey/ramdisk.img<br>刷机</p>\n<p>有了前面编译AOSP并且刷机的经验，这一过程就比较简单了。</p>\n<p>根据使用HiKey进行开发里所说的，我们首先关机状态下将j15的跳线5-6闭合。然后开机进入fastboot模式。</p>\n<p>然后将设备连接至虚拟机，可以使用如下命令查看设备是否已连接：</p>\n<pre><code>$ fastboot devices\n</code></pre><p>连接上之后，我们只刷boot分区，命令如下(假定你在AOSP根目录)</p>\n<pre><code>fastboot flash boot out/target/product/hikey/boot.img\n</code></pre><p>大约不到2s，刷机完成。</p>\n<p>##问题与解决</p>\n<p>刷机完成之后，开机进入系统，发现Kernel version的信息和之前的没有变化。也就是说我们刚才刷入的依然是Google prebuilt的kernel。</p>\n<p>首先我对比了新生成的boot.img文件和之前的boot.img文件(幸好虚拟机有备份)，发现md5一模一样，也就是说并没有生成新的boot.img文件。</p>\n<p>回想之前编译完成kernel之后，要手动复制2个文件到指定目录(hi6220-hikey.dtb和Image-dtb)。在AOSP根目录使用find命令搜索这两个文件，发现除了out目录和我们前边创建的/kernel/hikey-linaro目录外，在下面的目录还有这两个文件</p>\n<p>/device/linaro/hikey-kernel</p>\n<p>其实这个目录里的文件就是Google prebuilt的kernel文件。<br>我们将前边编译生成的hi6220-hikey.dtb和Image-dtb文件复制到上面的目录中(你可以将原来的文件备份到一个新建的目录里边以防止刷编译的kernel失败之后可以快速切换回来)。</p>\n<p>然后，我们再重新执行上面的编译boot.img文件步骤，生成新的boot.img文件。<br>由于前面的失败经历，这次长了个心眼，将新老boot.img文件的md5对比了一下，发现确实不一样。</p>\n<p>真正编译成功后我们再执行前面的刷机步骤，开机之后发现Kernel version的信息确实变了：</p>\n","excerpt":"","more":"<p>##配置编译器<br>    mkdir ~/arm64-tc</p>\n<p>###输入如下命令下载编译需要用到的组件压缩包<br>    wget <a href=\"https://releases.linaro.org/14.09/components/toolchain/binaries/\">https://releases.linaro.org/14.09/components/toolchain/binaries/</a><br>    gcc-linaro-aarch64-linux-gnu-4.9-2014.09_linux.tar.xz</p>\n<p>###然后输入如下命令解压上面下载的压缩包 </p>\n<pre><code>tar --strip-components=1 -C ~/arm64-tc -xf gcc-linaro-aarch64-linux-gnu-4.9-2014.09_linux.tar.xz\n</code></pre><p>###然后设置环境变量 </p>\n<pre><code>export PATH=~/arm64-tc/bin:$PATH\n</code></pre><p>##目前有两种版本选择，一种为Landing Team版本，另外一种为Reference Platform Build版本 </p>\n<p>##下载Landing Team版本内核源码<br>    git clone <a href=\"https://github.com/96boards/linux.git\">https://github.com/96boards/linux.git</a></p>\n<pre><code>然后输入如下命令检出最新内核版本15.11 \n\ncd linux\ngit checkout -b working-hikey 96boards-hikey-15.11\n</code></pre><p>##如果使用Reference Platform Build版本内核源码，输入如下命令下载 </p>\n<pre><code>git clone https://github.com/rsalveti/linux.git\n\n然后输入如下命令检出最新内核 \n\ngit checkout reference-hikey-rebase\n</code></pre><p>##最后输入如下命令开始编译内核 </p>\n<pre><code>export ARCH=arm64\nexport CROSS_COMPILE=aarch64-linux-gnu-\nexport LOCALVERSION=&quot;-linaro-hikey&quot;\nmake distclean \nmake defconfig \nmake -j8 Image modules hi6220-hikey.dtb 2&gt;&amp;1 | tee build-log.txt\n</code></pre><p>##使用以下命令编译内核模块 </p>\n<pre><code>export PWD=`pwd`\nexport INSTALL_MOD_PATH=&quot;$PWD/installed-modules&quot;\nmkdir $INSTALL_MOD_PATH\nmake -j8 modules_install\n</code></pre><p>生成如下文件</p>\n<pre><code>arch/arm64/boot/dts/hisilicon/hi6220-hikey.dtb\narch/arm64/boot/Image-dtb\n</code></pre><p>复制到前面新建的目录下面，即AOSP的/kernel/hikey-linaro目录。</p>\n<p>确保我们此时的环境是HiKey的编译环境，即</p>\n<pre><code>$ source build/envsetup.sh \n$ lunch hikey-userdebug\n</code></pre><p>最后，编译boot.img文件</p>\n<pre><code>$ make bootimage -j4\n</code></pre><p>这一步时间很短，我花了13S就完成了。</p>\n<p>其实会生成2个文件，即<br>/out/target/product/hikey/boot.img<br>和<br>/out/target/product/hikey/ramdisk.img<br>刷机</p>\n<p>有了前面编译AOSP并且刷机的经验，这一过程就比较简单了。</p>\n<p>根据使用HiKey进行开发里所说的，我们首先关机状态下将j15的跳线5-6闭合。然后开机进入fastboot模式。</p>\n<p>然后将设备连接至虚拟机，可以使用如下命令查看设备是否已连接：</p>\n<pre><code>$ fastboot devices\n</code></pre><p>连接上之后，我们只刷boot分区，命令如下(假定你在AOSP根目录)</p>\n<pre><code>fastboot flash boot out/target/product/hikey/boot.img\n</code></pre><p>大约不到2s，刷机完成。</p>\n<p>##问题与解决</p>\n<p>刷机完成之后，开机进入系统，发现Kernel version的信息和之前的没有变化。也就是说我们刚才刷入的依然是Google prebuilt的kernel。</p>\n<p>首先我对比了新生成的boot.img文件和之前的boot.img文件(幸好虚拟机有备份)，发现md5一模一样，也就是说并没有生成新的boot.img文件。</p>\n<p>回想之前编译完成kernel之后，要手动复制2个文件到指定目录(hi6220-hikey.dtb和Image-dtb)。在AOSP根目录使用find命令搜索这两个文件，发现除了out目录和我们前边创建的/kernel/hikey-linaro目录外，在下面的目录还有这两个文件</p>\n<p>/device/linaro/hikey-kernel</p>\n<p>其实这个目录里的文件就是Google prebuilt的kernel文件。<br>我们将前边编译生成的hi6220-hikey.dtb和Image-dtb文件复制到上面的目录中(你可以将原来的文件备份到一个新建的目录里边以防止刷编译的kernel失败之后可以快速切换回来)。</p>\n<p>然后，我们再重新执行上面的编译boot.img文件步骤，生成新的boot.img文件。<br>由于前面的失败经历，这次长了个心眼，将新老boot.img文件的md5对比了一下，发现确实不一样。</p>\n<p>真正编译成功后我们再执行前面的刷机步骤，开机之后发现Kernel version的信息确实变了：</p>\n"},{"title":"linux git实现代理","date":"2016-12-19T13:30:53.000Z","_content":"\n##说明\n&emsp;Git 目前支持的三种协议 `git://`、`ssh://` 和 `http://`，使用`git://` 和 `http://`比较多,`ssh://`忽略，翻墙后可以直接加快同步google和github代码。\n\n方式是通过Shadowsocks实现翻墙再使用[connect](https://github.com/QUSIR/connect)工具实现代理转换。 \n\n##安装配置shadowsock-qt5\n###安装\n\t\n\tsudo add-apt-repository ppa:hzwhuang/ss-qt5\n\tsudo apt-get update\n\tsudo apt-get install shadowsocks-qt5\n\n###配置\n\n![](http://ohjvpki1b.bkt.clouddn.com/Shadowsocks-Qt5config.png)\n\n使用socks5的1080端口\n\n##安装connect-proxy\n\n在ubuntu 14.04 64位系统下\n\n\tsudo apt-get install connect-proxy\n\n##`git://`协议代理\n\n###创建socks5proxywrapper文件添加如下语句\n\n\t#!/bin/sh\n\tconnect -S 127.0.0.1:1080 \"$@\"\n\n注意：是1080端口\n\n###赋予可执行权限\n\t\n\tchmod +x socks5proxywrapper\n\n###配置git\n打开git配置文件\n\n\tvim .gitconfig\n\n添加以下语句\n\n\t[core]\n        gitproxy = /path/to/socks5proxywrapper\n\n说明：也就是创建socks5proxywrapper文件存放目录。\n\n##`https://`代理\n\n###配置git执行以下语句\n\n\tgit config --global http.proxy 'socks5://127.0.0.1:1080'\n\tgit config --global https.proxy 'socks5://127.0.0.1:1080'\n\n###查看配置查看里面是否有相关选项\n\t\n\tcat ~.gitconfig\n\n[参考教程](https://segmentfault.com/q/1010000000118837)","source":"_posts/linux-git实现代理.md","raw":"---\ntitle: linux git实现代理\ndate: 2016-12-19 21:30:53\ntags:\n---\n\n##说明\n&emsp;Git 目前支持的三种协议 `git://`、`ssh://` 和 `http://`，使用`git://` 和 `http://`比较多,`ssh://`忽略，翻墙后可以直接加快同步google和github代码。\n\n方式是通过Shadowsocks实现翻墙再使用[connect](https://github.com/QUSIR/connect)工具实现代理转换。 \n\n##安装配置shadowsock-qt5\n###安装\n\t\n\tsudo add-apt-repository ppa:hzwhuang/ss-qt5\n\tsudo apt-get update\n\tsudo apt-get install shadowsocks-qt5\n\n###配置\n\n![](http://ohjvpki1b.bkt.clouddn.com/Shadowsocks-Qt5config.png)\n\n使用socks5的1080端口\n\n##安装connect-proxy\n\n在ubuntu 14.04 64位系统下\n\n\tsudo apt-get install connect-proxy\n\n##`git://`协议代理\n\n###创建socks5proxywrapper文件添加如下语句\n\n\t#!/bin/sh\n\tconnect -S 127.0.0.1:1080 \"$@\"\n\n注意：是1080端口\n\n###赋予可执行权限\n\t\n\tchmod +x socks5proxywrapper\n\n###配置git\n打开git配置文件\n\n\tvim .gitconfig\n\n添加以下语句\n\n\t[core]\n        gitproxy = /path/to/socks5proxywrapper\n\n说明：也就是创建socks5proxywrapper文件存放目录。\n\n##`https://`代理\n\n###配置git执行以下语句\n\n\tgit config --global http.proxy 'socks5://127.0.0.1:1080'\n\tgit config --global https.proxy 'socks5://127.0.0.1:1080'\n\n###查看配置查看里面是否有相关选项\n\t\n\tcat ~.gitconfig\n\n[参考教程](https://segmentfault.com/q/1010000000118837)","slug":"linux-git实现代理","published":1,"updated":"2017-09-21T01:55:27.186Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7ttahvc000ede5lrs3xk5rd","content":"<p>##说明<br>&emsp;Git 目前支持的三种协议 <code>git://</code>、<code>ssh://</code> 和 <code>http://</code>，使用<code>git://</code> 和 <code>http://</code>比较多,<code>ssh://</code>忽略，翻墙后可以直接加快同步google和github代码。</p>\n<p>方式是通过Shadowsocks实现翻墙再使用<a href=\"https://github.com/QUSIR/connect\" target=\"_blank\" rel=\"external\">connect</a>工具实现代理转换。 </p>\n<p>##安装配置shadowsock-qt5</p>\n<p>###安装</p>\n<pre><code>sudo add-apt-repository ppa:hzwhuang/ss-qt5\nsudo apt-get update\nsudo apt-get install shadowsocks-qt5\n</code></pre><p>###配置</p>\n<p><img src=\"http://ohjvpki1b.bkt.clouddn.com/Shadowsocks-Qt5config.png\" alt=\"\"></p>\n<p>使用socks5的1080端口</p>\n<p>##安装connect-proxy</p>\n<p>在ubuntu 14.04 64位系统下</p>\n<pre><code>sudo apt-get install connect-proxy\n</code></pre><p>##<code>git://</code>协议代理</p>\n<p>###创建socks5proxywrapper文件添加如下语句</p>\n<pre><code>#!/bin/sh\nconnect -S 127.0.0.1:1080 &quot;$@&quot;\n</code></pre><p>注意：是1080端口</p>\n<p>###赋予可执行权限</p>\n<pre><code>chmod +x socks5proxywrapper\n</code></pre><p>###配置git<br>打开git配置文件</p>\n<pre><code>vim .gitconfig\n</code></pre><p>添加以下语句</p>\n<pre><code>[core]\n    gitproxy = /path/to/socks5proxywrapper\n</code></pre><p>说明：也就是创建socks5proxywrapper文件存放目录。</p>\n<p>##<code>https://</code>代理</p>\n<p>###配置git执行以下语句</p>\n<pre><code>git config --global http.proxy &apos;socks5://127.0.0.1:1080&apos;\ngit config --global https.proxy &apos;socks5://127.0.0.1:1080&apos;\n</code></pre><p>###查看配置查看里面是否有相关选项</p>\n<pre><code>cat ~.gitconfig\n</code></pre><p><a href=\"https://segmentfault.com/q/1010000000118837\" target=\"_blank\" rel=\"external\">参考教程</a></p>\n","excerpt":"","more":"<p>##说明<br>&emsp;Git 目前支持的三种协议 <code>git://</code>、<code>ssh://</code> 和 <code>http://</code>，使用<code>git://</code> 和 <code>http://</code>比较多,<code>ssh://</code>忽略，翻墙后可以直接加快同步google和github代码。</p>\n<p>方式是通过Shadowsocks实现翻墙再使用<a href=\"https://github.com/QUSIR/connect\">connect</a>工具实现代理转换。 </p>\n<p>##安装配置shadowsock-qt5</p>\n<p>###安装</p>\n<pre><code>sudo add-apt-repository ppa:hzwhuang/ss-qt5\nsudo apt-get update\nsudo apt-get install shadowsocks-qt5\n</code></pre><p>###配置</p>\n<p><img src=\"http://ohjvpki1b.bkt.clouddn.com/Shadowsocks-Qt5config.png\" alt=\"\"></p>\n<p>使用socks5的1080端口</p>\n<p>##安装connect-proxy</p>\n<p>在ubuntu 14.04 64位系统下</p>\n<pre><code>sudo apt-get install connect-proxy\n</code></pre><p>##<code>git://</code>协议代理</p>\n<p>###创建socks5proxywrapper文件添加如下语句</p>\n<pre><code>#!/bin/sh\nconnect -S 127.0.0.1:1080 &quot;$@&quot;\n</code></pre><p>注意：是1080端口</p>\n<p>###赋予可执行权限</p>\n<pre><code>chmod +x socks5proxywrapper\n</code></pre><p>###配置git<br>打开git配置文件</p>\n<pre><code>vim .gitconfig\n</code></pre><p>添加以下语句</p>\n<pre><code>[core]\n    gitproxy = /path/to/socks5proxywrapper\n</code></pre><p>说明：也就是创建socks5proxywrapper文件存放目录。</p>\n<p>##<code>https://</code>代理</p>\n<p>###配置git执行以下语句</p>\n<pre><code>git config --global http.proxy &apos;socks5://127.0.0.1:1080&apos;\ngit config --global https.proxy &apos;socks5://127.0.0.1:1080&apos;\n</code></pre><p>###查看配置查看里面是否有相关选项</p>\n<pre><code>cat ~.gitconfig\n</code></pre><p><a href=\"https://segmentfault.com/q/1010000000118837\">参考教程</a></p>\n"},{"title":"linux终端实现代理","date":"2016-12-19T13:31:41.000Z","_content":"\n##ubuntu 14.04安装Shadowsocks-Qt5\n\t\n\tsudo add-apt-repository ppa:hzwhuang/ss-qt5\n\tsudo apt-get update\n\tsudo apt-get install shadowsocks-qt5\n\n\n##运行Shadowsocks-Qt5\n\n![Shadowsocks-Qt5config](http://ohjvpki1b.bkt.clouddn.com/Shadowsocks-Qt5config.png)\n\n配置好账号和代理端口，代理端口为1080 socks5\n\n\n##安装Privoxy\n\n\tsudo apt-get install privoxy\n\n##设置配置文件\n找到\n4.1. listen-address这一节，确认监听的端口号。\n\n\tlisten-address  localhost:8118\n\n\n找到5.2. forward-socks4, forward-socks4a, forward-socks5 and forward-socks5t\n\n\tforward-socks5   /               127.0.0.1:1080 .\n\n[我修改过后的配置文件](http://ohjvpki1b.bkt.clouddn.com/config)\n\n##重启Privoxy\n\n\tsudo /etc/init.d/privoxy restart\n\n##配置环境变量\n\tsudo vim /etc/profile\n在文件末尾添加以下代码\n\n\texport http_proxy=\"127.0.0.1:8118\"\n\texport https_proxy=\"127.0.0.1:8118\"\n\n使环境变量生效\n\n\tsource /etc/profile\n\n##设置privoxy开机启动\n编辑启动项文件\n\n\tsudo vim /etc/rc.local\n\n在exit0之前添加如下语句\n\n\tsudo /etc/init.d/privoxy start\n\n\n\t","source":"_posts/linux终端实现代理.md","raw":"---\ntitle: linux终端实现代理\ndate: 2016-12-19 21:31:41\ntags:\n---\n\n##ubuntu 14.04安装Shadowsocks-Qt5\n\t\n\tsudo add-apt-repository ppa:hzwhuang/ss-qt5\n\tsudo apt-get update\n\tsudo apt-get install shadowsocks-qt5\n\n\n##运行Shadowsocks-Qt5\n\n![Shadowsocks-Qt5config](http://ohjvpki1b.bkt.clouddn.com/Shadowsocks-Qt5config.png)\n\n配置好账号和代理端口，代理端口为1080 socks5\n\n\n##安装Privoxy\n\n\tsudo apt-get install privoxy\n\n##设置配置文件\n找到\n4.1. listen-address这一节，确认监听的端口号。\n\n\tlisten-address  localhost:8118\n\n\n找到5.2. forward-socks4, forward-socks4a, forward-socks5 and forward-socks5t\n\n\tforward-socks5   /               127.0.0.1:1080 .\n\n[我修改过后的配置文件](http://ohjvpki1b.bkt.clouddn.com/config)\n\n##重启Privoxy\n\n\tsudo /etc/init.d/privoxy restart\n\n##配置环境变量\n\tsudo vim /etc/profile\n在文件末尾添加以下代码\n\n\texport http_proxy=\"127.0.0.1:8118\"\n\texport https_proxy=\"127.0.0.1:8118\"\n\n使环境变量生效\n\n\tsource /etc/profile\n\n##设置privoxy开机启动\n编辑启动项文件\n\n\tsudo vim /etc/rc.local\n\n在exit0之前添加如下语句\n\n\tsudo /etc/init.d/privoxy start\n\n\n\t","slug":"linux终端实现代理","published":1,"updated":"2017-09-21T01:55:27.186Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7ttahvh000fde5lyuw06rlt","content":"<p>##ubuntu 14.04安装Shadowsocks-Qt5</p>\n<pre><code>sudo add-apt-repository ppa:hzwhuang/ss-qt5\nsudo apt-get update\nsudo apt-get install shadowsocks-qt5\n</code></pre><p>##运行Shadowsocks-Qt5</p>\n<p><img src=\"http://ohjvpki1b.bkt.clouddn.com/Shadowsocks-Qt5config.png\" alt=\"Shadowsocks-Qt5config\"></p>\n<p>配置好账号和代理端口，代理端口为1080 socks5</p>\n<p>##安装Privoxy</p>\n<pre><code>sudo apt-get install privoxy\n</code></pre><p>##设置配置文件<br>找到<br>4.1. listen-address这一节，确认监听的端口号。</p>\n<pre><code>listen-address  localhost:8118\n</code></pre><p>找到5.2. forward-socks4, forward-socks4a, forward-socks5 and forward-socks5t</p>\n<pre><code>forward-socks5   /               127.0.0.1:1080 .\n</code></pre><p><a href=\"http://ohjvpki1b.bkt.clouddn.com/config\" target=\"_blank\" rel=\"external\">我修改过后的配置文件</a></p>\n<p>##重启Privoxy</p>\n<pre><code>sudo /etc/init.d/privoxy restart\n</code></pre><p>##配置环境变量<br>    sudo vim /etc/profile<br>在文件末尾添加以下代码</p>\n<pre><code>export http_proxy=&quot;127.0.0.1:8118&quot;\nexport https_proxy=&quot;127.0.0.1:8118&quot;\n</code></pre><p>使环境变量生效</p>\n<pre><code>source /etc/profile\n</code></pre><p>##设置privoxy开机启动<br>编辑启动项文件</p>\n<pre><code>sudo vim /etc/rc.local\n</code></pre><p>在exit0之前添加如下语句</p>\n<pre><code>sudo /etc/init.d/privoxy start\n</code></pre>","excerpt":"","more":"<p>##ubuntu 14.04安装Shadowsocks-Qt5</p>\n<pre><code>sudo add-apt-repository ppa:hzwhuang/ss-qt5\nsudo apt-get update\nsudo apt-get install shadowsocks-qt5\n</code></pre><p>##运行Shadowsocks-Qt5</p>\n<p><img src=\"http://ohjvpki1b.bkt.clouddn.com/Shadowsocks-Qt5config.png\" alt=\"Shadowsocks-Qt5config\"></p>\n<p>配置好账号和代理端口，代理端口为1080 socks5</p>\n<p>##安装Privoxy</p>\n<pre><code>sudo apt-get install privoxy\n</code></pre><p>##设置配置文件<br>找到<br>4.1. listen-address这一节，确认监听的端口号。</p>\n<pre><code>listen-address  localhost:8118\n</code></pre><p>找到5.2. forward-socks4, forward-socks4a, forward-socks5 and forward-socks5t</p>\n<pre><code>forward-socks5   /               127.0.0.1:1080 .\n</code></pre><p><a href=\"http://ohjvpki1b.bkt.clouddn.com/config\">我修改过后的配置文件</a></p>\n<p>##重启Privoxy</p>\n<pre><code>sudo /etc/init.d/privoxy restart\n</code></pre><p>##配置环境变量<br>    sudo vim /etc/profile<br>在文件末尾添加以下代码</p>\n<pre><code>export http_proxy=&quot;127.0.0.1:8118&quot;\nexport https_proxy=&quot;127.0.0.1:8118&quot;\n</code></pre><p>使环境变量生效</p>\n<pre><code>source /etc/profile\n</code></pre><p>##设置privoxy开机启动<br>编辑启动项文件</p>\n<pre><code>sudo vim /etc/rc.local\n</code></pre><p>在exit0之前添加如下语句</p>\n<pre><code>sudo /etc/init.d/privoxy start\n</code></pre>"},{"title":"mediastreamer使用教程","date":"2016-12-19T13:05:15.000Z","_content":"\n#mediastreamer使用教程\n\n##1.各个函数功能简介\n`ms_filter_destroy` 释放filter资源\n\n`ms_ticker_destroy`释放ticker\n\n说明：ticker为定时器线程，每隔10ms执行一次\n\n`ms_filter_new`创建filter，传进参数为filter的ID\n\n`ms_connection_helper_start`拿到filter链接起始位置\n\n`ms_connection_helper_link`链接filter\n\n`ms_filter_link`链接filter\n\n`ms_ticker_new`创建ticker\n\nticker说明：\n\nticker是属于一个线程不能够运行两个阻塞式的过程，比如socks的发送与接收，必须将\n发送和接收放在filter线程里面。\n\n`ms_ticker_set_name`设置ticker名称\n\n`ms_ticker_attach`将ticker附加到线程中\n\n`ms_ticker_detach`去掉ticker\n\n`ms_connection_helper_unlink`去掉filter链接\n\n`ms_filter_unlink` 去掉filter链接\n\n`ms_new filter`数据结构创建\n\n`ms_free` 数据结构数据释放\n\n`ms_queue_get(f->inpputs[0])`获取filter数据\n\n`msgdsize`获取filter里面数据长度\n\n`ms_queue_put(f->outputs[0],om)`往filter里面塞数据\n\n`freemsg`释放filter数据\n\n`ms_thread_join`在filter里面创建线程\n\n`ms_filter_call_method`往filter里面发送数据\n\n##2.创建filter过程\n\n###2.1在Allfilters.h里面添加filter的ID\n\n###2.2在Alldescs.h里面添加filter结构体变量\n\n###2.3在实现filter的源文件里面添加相关头文件\n\n\t#include \"msfilter.h\"\n\t#include \"msticker.h\"\n###2.4.一个标准的filter过程\n\n\t#include \"msfilter.h\"\n\t#include \"msticker.h\"\n\t\n\tstatic void enc_init(MSFilter *f){\n\t\n\t}\n\t\n\tstatic void enc_uninit(MSFilter *f){\n\t\n\t}\n\t\n\tstatic void enc_preprocess(MSFilter *f)\n\t{\n\t}\n\t\n\tstatic void enc_process(MSFilter *f){\n\t\n\t\n\t}\n\t\n\tstatic void enc_postprocess(MSFilter *f){\n\t}\n\t\n\tstatic MSFilterMethod enc_methods[]={\n\t        {0,NULL}\n\t};\n\t\n\tMSFilterDesc ms_amr_enc_desc={\n\t        MS_AMR_ENCODER_ID, //filter ID\n\t        \"amrEnc\",  //filter名称\n\t        \"amr encoder\",\n\t        MS_FILTER_ENCODER,  //filter类型MS_FILTER_OTHER 其他,\n\t\t\t\t\t\t\t\t//MS_FILTER_ENCODER 编码器,\n\t\t\t\t\t\t\t    //MS_FILTER_DECODER 解码器\n\t        \"amr\",\n\t        1,\n\t        1,\n\t        enc_init,   //初始化操作\n\t        enc_preprocess,  //预初始化操作\n\t        enc_process,   //处理过程\n\t        enc_postprocess,  //预结束操作\n\t        enc_uninit,  //结束操作\n\t        enc_methods  //程序模块方法，用于参数传递\n\t};\n\t\n\t\n\tstatic void dec_init(MSFilter *f){\n\t\n\t}\n\t\n\tstatic void dec_uninit(MSFilter *f){\n\t\n\t}\n\t\n\tstatic void dec_preprocess(MSFilter *f){\n\t}\n\t\n\tstatic void dec_postprocess(MSFilter *f){\n\t}\n\t\n\tstatic void dec_process(MSFilter *f){\n\t\t\n\t}\n\t\n\tstatic MSFilterMethod dec_methods[]={\n\t        {0,NULL}\n\t};\n\t\n\tMSFilterDesc ms_amr_dec_desc={\n\t        MS_AMR_DECODER_ID,\n\t        \"amrDec\",\n\t        \"amr decoder\",\n\t        MS_FILTER_DECODER,\n\t        \"amr\",\n\t        1,\n\t        1,\n\t        dec_init,\n\t        dec_preprocess,\n\t        dec_process,\n\t        dec_postprocess,\n\t        dec_uninit,\n\t        dec_methods\n\t};\n\t\n\tMS_FILTER_DESC_EXPORT(ms_amr_dec_desc)\n\tMS_FILTER_DESC_EXPORT(ms_amr_enc_desc)\n\n\n##3.替换编码器\n\n将原来silk编码器换为amr编码器\n\n###3.1创建amr的filter\n\n\tstream->decoder=ms_filter_new(MS_AMR_DECODER_ID);\n\n\n###3.2链接编码filter\n\n\tms_filter_link(stream->tcpRecv,0,stream->decoder,0);\n\n\n##4.filter创建注意事项\n\n###4.1 filter里面数据流要对应\n\n\tMSFilterDesc ms_amr_dec_desc={\n\t        MS_AMR_DECODER_ID,\n\t        \"amrDec\",\n\t        \"amr decoder\",\n\t        MS_FILTER_DECODER,\n\t        \"amr\",\n\t        1,  //进\n\t        1,  //出\n\t        dec_init,\n\t        dec_preprocess,\n\t        dec_process,\n\t        dec_postprocess,\n\t        dec_uninit,\n\t        dec_methods\n\t};\n以上是编码器filter,是一进一出，原始数据进去出来编码后的数据。\n\n\tMSFilterDesc ms_tcpclient_send_desc={\n\t        MS_TCP_SEND_ID,\n\t        \"TcpClientSend\",\n\t        \"TcpClient_Send\",\n\t        MS_FILTER_OTHER,\n\t        \"tcpclient\",\n\t        1,  //进\n\t        0,  //出\n\t        tcp_send_init,\n\t\t\ttcp_send_preprocess,\n\t        tcp_send_process,\n\t\t\ttcp_send_postprocess,\n\t        tcp_send_uninit,\n\t        tcpclient_send_methods\n\t};\n以上是TCP数据发送filter，只有进没有出，数据进来之后都发送数据都发送出去了\n\n###4.2 filter里面new的结构体数据要记得free\n\n##5.例子：一个音频流启动过程\n\n\t\n\t#include \"mediastreamer/audiostream.h\"\n\t#include \"rtpsession.h\"\n\t#include \"mediastreamer/msrtp.h\"\n\t#include \"mediastreamer/mssndcard.h\"\n\t#include \"mediastreamer/msvolume.h\"\n\t#include\"mediastreamer/TcpClientFilter.h\"\n\t#include <signal.h>\n\t#include <stdio.h>\n\t\n\tstatic ms_mutex_t stream_mutex;\n\t\n\t//初始化结构体数据\n\tAudioStream* audio_stream_new() {\n\t\tAudioStream *stream = (AudioStream *)ms_new0 (AudioStream, 1);\n\t\treturn stream;\n\t}\n\t//释放音频流\n\tvoid audio_stream_free(AudioStream *stream) {\n\t\n\t\tif(stream->source!=NULL)\n\t\t\tms_filter_destroy(stream->source);\n\t\tif(stream->encoder!=NULL)\n\t\t\tms_filter_destroy(stream->encoder);\n\t\n\t        if(stream->tcpSend!=NULL)\n\t                ms_filter_destroy(stream->tcpSend);\n\t        if(stream->tcpRecv!=NULL)\n\t                ms_filter_destroy(stream->tcpRecv);\n\t        if(stream->dest!=NULL)\n\t                ms_filter_destroy(stream->dest);\n\t\n\t        if(stream->ticker!=NULL)\n\t        {\n\t                printf(\"ms_ticker_destroy begin r 41\\n\");\n\t\t\tms_ticker_destroy(stream->ticker);\n\t                printf(\"ms_ticker_destroy end  r43 audiostream.c \\n\");\n\t        }\n\t\n\t\n\t\tms_free(stream);\n\t        ms_mutex_destroy(&stream_mutex);\n\t        printf(\"ms_free(stream) end \\n\");\n\t}\n\t\n\t#define payload_type_set_number2(pt,n)\t(pt)->user_data=(void*)((long)n);\n\tstatic void dp_set_payload_type(PayloadType *const_pt, int number, const char *recv_fmtp)\n\t{\n\t\tpayload_type_set_number2(const_pt, number);\n\t\n\t\trtp_profile_set_payload(&av_profile,number,const_pt);\n\t}\n\t//启动音频流\n\tint audio_stream_start(AudioStream *stream,char* SeverIp, int SeverPort, char (*localSessionID)[4], char (*remoteSessioID)[4]){\n\t\n\t\n\t        ms_mutex_init(&stream_mutex,NULL);\n\t        ms_mutex_lock(&stream_mutex);\n\t\tif(stream==NULL)\n\t        {\n\t            ms_mutex_unlock(&stream_mutex);\n\t            return -1;\n\t        }\n\t\n\t        stream->decoder=ms_filter_new(MS_AMR_DECODER_ID);\n\t        if(stream->decoder==NULL){\n\t                        return -1;\n\t        }\n\t\n\t        stream->encoder=ms_filter_new(MS_AMR_ENCODER_ID);\n\t        if(stream->encoder==NULL){\n\t                        return -2;\n\t        }\n\t\n\t        stream->tcpSend=ms_filter_new(MS_TCP_SEND_ID);\n\t        if(stream->tcpSend==NULL){\n\t                ms_mutex_unlock(&stream_mutex);\n\t                return -9;\n\t        }\n\t\n\t        ms_filter_call_method(stream->tcpSend,MS_TCP_SEND_SET_LOCAL_FRAG,localSessionID[0]);\n\t        ms_filter_call_method(stream->tcpSend,MS_TCP_SEND_SET_REMOTE_FRAG,remoteSessioID[0]);\n\t        if(ms_filter_call_method(stream->tcpSend,MS_TCP_SEND_LOGIN,0)!=0){\n\t                printf(\"audiostream.c::audio_stream_start_call - TcpSendFilter fail to login\\n\");\n\t                ms_mutex_unlock(&stream_mutex);\n\t                return -19;\n\t        }\n\t\n\t        stream->tcpRecv=ms_filter_new(MS_TCP_READ_ID);\n\t        if(stream->tcpRecv==NULL){\n\t                ms_mutex_unlock(&stream_mutex);\n\t                return -10;\n\t        }\n\t        printf(\"audiostream.c::audio_stream_start_call - local:%02x%02x%02x%02x remote:%02x%02x%02x%02x\",localSessionID[1][0]&0xff,localSessionID[1][1]&0xff,localSessionID[1][2]&0xff,localSessionID[1][3]&0xff,\n\t                  remoteSessioID[1][0]&0xff,remoteSessioID[1][1]&0xff,remoteSessioID[1][2]&0xff,remoteSessioID[1][3]&0xff);\n\t        ms_filter_call_method(stream->tcpRecv,MS_TCP_READ_SET_LOCAL_FRAG,localSessionID[1]);\n\t        ms_filter_call_method(stream->tcpRecv,MS_TCP_READ_SET_REMOTE_FRAG,remoteSessioID[1]);\n\t        if(ms_filter_call_method(stream->tcpRecv,MS_TCP_READ_LOGIN,0)!=0){\n\t                printf(\"audiostream.c::audiio_stream_start_call - TcpReadFilter fail to login\\n\");\n\t                ms_mutex_unlock(&stream_mutex);\n\t                return -20;\n\t        }\n\t\n\t        stream->source=ms_filter_new(MS_LINUX_SOUND_READ_ID);\n\t        if(stream->source==NULL){\n\t                ms_mutex_unlock(&stream_mutex);\n\t                return -2;\n\t        }\n\t\n\t        stream->dest=ms_filter_new(MS_LINUX_SOUND_WRITE_ID);\n\t        if(stream->dest==NULL){\n\t                ms_mutex_unlock(&stream_mutex);\n\t                return -8;\n\t        }\n\t\n\t        ms_filter_link(stream->tcpRecv,0,stream->decoder,0);\n\t        ms_filter_link(stream->decoder,0,stream->dest, 0);\n\t        ms_filter_link(stream->source,0,stream->encoder,0);\n\t        ms_filter_link(stream->encoder,0,stream->tcpSend,0);\n\t\n\t        stream->ticker = ms_ticker_new();\n\t        if(stream->ticker==NULL){\n\t                ms_mutex_unlock(&stream_mutex);\n\t                return -6;\n\t        }\n\t\n\t        ms_ticker_set_name(stream->ticker,\"Audio MSTicker\");\n\t\n\t        ms_ticker_attach(stream->ticker, stream->source);\n\t\n\t        ms_ticker_attach(stream->ticker, stream->tcpRecv);\n\t\n\t        ms_mutex_unlock(&stream_mutex);\n\t\treturn 0;\n\t}\n\t//关闭音频流\n\tvoid audio_stream_stop(AudioStream *stream) {\n\t\t\t/* detach */\n\t\n\t        ms_mutex_lock(&stream_mutex);\n\t\n\t        int i=0;\n\t\n\t        if(stream->ticker != NULL && stream->source!=NULL)\n\t                ms_ticker_detach(stream->ticker, stream->source);\n\t\n\t        if(stream->ticker != NULL && stream->tcpRecv!=NULL)\n\t                   ms_ticker_detach(stream->ticker,stream->tcpRecv);\n\t\n\t        if(stream->tcpRecv!=NULL && stream->decoder!=NULL)\n\t                ms_filter_unlink(stream->tcpRecv, 0, stream->decoder, 0);\n\t\n\t\n\t        if(stream->decoder!=NULL && stream->dest!=NULL)\n\t                ms_filter_unlink(stream->decoder, 0, stream->dest, 0);\n\t\n\t        if(stream->source!=NULL && stream->encoder!=NULL)\n\t                ms_filter_unlink(stream->source, 0, stream->encoder, 0);\n\t\n\t        if(stream->encoder!=NULL && stream->tcpSend!=NULL)\n\t        {\n\t                printf(\"ms_filter_unlink(stream->encoder, 0, stream->tcpSend, 0) \\n\\n\");\n\t                ms_filter_unlink(stream->encoder, 0, stream->tcpSend, 0);\n\t        }\n\t\n\t\t\t/* destroy filter */\n\t        ms_mutex_unlock(&stream_mutex);\n\t\t\taudio_stream_free(stream);\n\t        printf(\"audio_stream_stop 10\\n\");\n\t}\n","source":"_posts/mediastreamer.md","raw":"---\ntitle: mediastreamer使用教程\ndate: 2016-12-19 21:05:15\ntags:\n---\n\n#mediastreamer使用教程\n\n##1.各个函数功能简介\n`ms_filter_destroy` 释放filter资源\n\n`ms_ticker_destroy`释放ticker\n\n说明：ticker为定时器线程，每隔10ms执行一次\n\n`ms_filter_new`创建filter，传进参数为filter的ID\n\n`ms_connection_helper_start`拿到filter链接起始位置\n\n`ms_connection_helper_link`链接filter\n\n`ms_filter_link`链接filter\n\n`ms_ticker_new`创建ticker\n\nticker说明：\n\nticker是属于一个线程不能够运行两个阻塞式的过程，比如socks的发送与接收，必须将\n发送和接收放在filter线程里面。\n\n`ms_ticker_set_name`设置ticker名称\n\n`ms_ticker_attach`将ticker附加到线程中\n\n`ms_ticker_detach`去掉ticker\n\n`ms_connection_helper_unlink`去掉filter链接\n\n`ms_filter_unlink` 去掉filter链接\n\n`ms_new filter`数据结构创建\n\n`ms_free` 数据结构数据释放\n\n`ms_queue_get(f->inpputs[0])`获取filter数据\n\n`msgdsize`获取filter里面数据长度\n\n`ms_queue_put(f->outputs[0],om)`往filter里面塞数据\n\n`freemsg`释放filter数据\n\n`ms_thread_join`在filter里面创建线程\n\n`ms_filter_call_method`往filter里面发送数据\n\n##2.创建filter过程\n\n###2.1在Allfilters.h里面添加filter的ID\n\n###2.2在Alldescs.h里面添加filter结构体变量\n\n###2.3在实现filter的源文件里面添加相关头文件\n\n\t#include \"msfilter.h\"\n\t#include \"msticker.h\"\n###2.4.一个标准的filter过程\n\n\t#include \"msfilter.h\"\n\t#include \"msticker.h\"\n\t\n\tstatic void enc_init(MSFilter *f){\n\t\n\t}\n\t\n\tstatic void enc_uninit(MSFilter *f){\n\t\n\t}\n\t\n\tstatic void enc_preprocess(MSFilter *f)\n\t{\n\t}\n\t\n\tstatic void enc_process(MSFilter *f){\n\t\n\t\n\t}\n\t\n\tstatic void enc_postprocess(MSFilter *f){\n\t}\n\t\n\tstatic MSFilterMethod enc_methods[]={\n\t        {0,NULL}\n\t};\n\t\n\tMSFilterDesc ms_amr_enc_desc={\n\t        MS_AMR_ENCODER_ID, //filter ID\n\t        \"amrEnc\",  //filter名称\n\t        \"amr encoder\",\n\t        MS_FILTER_ENCODER,  //filter类型MS_FILTER_OTHER 其他,\n\t\t\t\t\t\t\t\t//MS_FILTER_ENCODER 编码器,\n\t\t\t\t\t\t\t    //MS_FILTER_DECODER 解码器\n\t        \"amr\",\n\t        1,\n\t        1,\n\t        enc_init,   //初始化操作\n\t        enc_preprocess,  //预初始化操作\n\t        enc_process,   //处理过程\n\t        enc_postprocess,  //预结束操作\n\t        enc_uninit,  //结束操作\n\t        enc_methods  //程序模块方法，用于参数传递\n\t};\n\t\n\t\n\tstatic void dec_init(MSFilter *f){\n\t\n\t}\n\t\n\tstatic void dec_uninit(MSFilter *f){\n\t\n\t}\n\t\n\tstatic void dec_preprocess(MSFilter *f){\n\t}\n\t\n\tstatic void dec_postprocess(MSFilter *f){\n\t}\n\t\n\tstatic void dec_process(MSFilter *f){\n\t\t\n\t}\n\t\n\tstatic MSFilterMethod dec_methods[]={\n\t        {0,NULL}\n\t};\n\t\n\tMSFilterDesc ms_amr_dec_desc={\n\t        MS_AMR_DECODER_ID,\n\t        \"amrDec\",\n\t        \"amr decoder\",\n\t        MS_FILTER_DECODER,\n\t        \"amr\",\n\t        1,\n\t        1,\n\t        dec_init,\n\t        dec_preprocess,\n\t        dec_process,\n\t        dec_postprocess,\n\t        dec_uninit,\n\t        dec_methods\n\t};\n\t\n\tMS_FILTER_DESC_EXPORT(ms_amr_dec_desc)\n\tMS_FILTER_DESC_EXPORT(ms_amr_enc_desc)\n\n\n##3.替换编码器\n\n将原来silk编码器换为amr编码器\n\n###3.1创建amr的filter\n\n\tstream->decoder=ms_filter_new(MS_AMR_DECODER_ID);\n\n\n###3.2链接编码filter\n\n\tms_filter_link(stream->tcpRecv,0,stream->decoder,0);\n\n\n##4.filter创建注意事项\n\n###4.1 filter里面数据流要对应\n\n\tMSFilterDesc ms_amr_dec_desc={\n\t        MS_AMR_DECODER_ID,\n\t        \"amrDec\",\n\t        \"amr decoder\",\n\t        MS_FILTER_DECODER,\n\t        \"amr\",\n\t        1,  //进\n\t        1,  //出\n\t        dec_init,\n\t        dec_preprocess,\n\t        dec_process,\n\t        dec_postprocess,\n\t        dec_uninit,\n\t        dec_methods\n\t};\n以上是编码器filter,是一进一出，原始数据进去出来编码后的数据。\n\n\tMSFilterDesc ms_tcpclient_send_desc={\n\t        MS_TCP_SEND_ID,\n\t        \"TcpClientSend\",\n\t        \"TcpClient_Send\",\n\t        MS_FILTER_OTHER,\n\t        \"tcpclient\",\n\t        1,  //进\n\t        0,  //出\n\t        tcp_send_init,\n\t\t\ttcp_send_preprocess,\n\t        tcp_send_process,\n\t\t\ttcp_send_postprocess,\n\t        tcp_send_uninit,\n\t        tcpclient_send_methods\n\t};\n以上是TCP数据发送filter，只有进没有出，数据进来之后都发送数据都发送出去了\n\n###4.2 filter里面new的结构体数据要记得free\n\n##5.例子：一个音频流启动过程\n\n\t\n\t#include \"mediastreamer/audiostream.h\"\n\t#include \"rtpsession.h\"\n\t#include \"mediastreamer/msrtp.h\"\n\t#include \"mediastreamer/mssndcard.h\"\n\t#include \"mediastreamer/msvolume.h\"\n\t#include\"mediastreamer/TcpClientFilter.h\"\n\t#include <signal.h>\n\t#include <stdio.h>\n\t\n\tstatic ms_mutex_t stream_mutex;\n\t\n\t//初始化结构体数据\n\tAudioStream* audio_stream_new() {\n\t\tAudioStream *stream = (AudioStream *)ms_new0 (AudioStream, 1);\n\t\treturn stream;\n\t}\n\t//释放音频流\n\tvoid audio_stream_free(AudioStream *stream) {\n\t\n\t\tif(stream->source!=NULL)\n\t\t\tms_filter_destroy(stream->source);\n\t\tif(stream->encoder!=NULL)\n\t\t\tms_filter_destroy(stream->encoder);\n\t\n\t        if(stream->tcpSend!=NULL)\n\t                ms_filter_destroy(stream->tcpSend);\n\t        if(stream->tcpRecv!=NULL)\n\t                ms_filter_destroy(stream->tcpRecv);\n\t        if(stream->dest!=NULL)\n\t                ms_filter_destroy(stream->dest);\n\t\n\t        if(stream->ticker!=NULL)\n\t        {\n\t                printf(\"ms_ticker_destroy begin r 41\\n\");\n\t\t\tms_ticker_destroy(stream->ticker);\n\t                printf(\"ms_ticker_destroy end  r43 audiostream.c \\n\");\n\t        }\n\t\n\t\n\t\tms_free(stream);\n\t        ms_mutex_destroy(&stream_mutex);\n\t        printf(\"ms_free(stream) end \\n\");\n\t}\n\t\n\t#define payload_type_set_number2(pt,n)\t(pt)->user_data=(void*)((long)n);\n\tstatic void dp_set_payload_type(PayloadType *const_pt, int number, const char *recv_fmtp)\n\t{\n\t\tpayload_type_set_number2(const_pt, number);\n\t\n\t\trtp_profile_set_payload(&av_profile,number,const_pt);\n\t}\n\t//启动音频流\n\tint audio_stream_start(AudioStream *stream,char* SeverIp, int SeverPort, char (*localSessionID)[4], char (*remoteSessioID)[4]){\n\t\n\t\n\t        ms_mutex_init(&stream_mutex,NULL);\n\t        ms_mutex_lock(&stream_mutex);\n\t\tif(stream==NULL)\n\t        {\n\t            ms_mutex_unlock(&stream_mutex);\n\t            return -1;\n\t        }\n\t\n\t        stream->decoder=ms_filter_new(MS_AMR_DECODER_ID);\n\t        if(stream->decoder==NULL){\n\t                        return -1;\n\t        }\n\t\n\t        stream->encoder=ms_filter_new(MS_AMR_ENCODER_ID);\n\t        if(stream->encoder==NULL){\n\t                        return -2;\n\t        }\n\t\n\t        stream->tcpSend=ms_filter_new(MS_TCP_SEND_ID);\n\t        if(stream->tcpSend==NULL){\n\t                ms_mutex_unlock(&stream_mutex);\n\t                return -9;\n\t        }\n\t\n\t        ms_filter_call_method(stream->tcpSend,MS_TCP_SEND_SET_LOCAL_FRAG,localSessionID[0]);\n\t        ms_filter_call_method(stream->tcpSend,MS_TCP_SEND_SET_REMOTE_FRAG,remoteSessioID[0]);\n\t        if(ms_filter_call_method(stream->tcpSend,MS_TCP_SEND_LOGIN,0)!=0){\n\t                printf(\"audiostream.c::audio_stream_start_call - TcpSendFilter fail to login\\n\");\n\t                ms_mutex_unlock(&stream_mutex);\n\t                return -19;\n\t        }\n\t\n\t        stream->tcpRecv=ms_filter_new(MS_TCP_READ_ID);\n\t        if(stream->tcpRecv==NULL){\n\t                ms_mutex_unlock(&stream_mutex);\n\t                return -10;\n\t        }\n\t        printf(\"audiostream.c::audio_stream_start_call - local:%02x%02x%02x%02x remote:%02x%02x%02x%02x\",localSessionID[1][0]&0xff,localSessionID[1][1]&0xff,localSessionID[1][2]&0xff,localSessionID[1][3]&0xff,\n\t                  remoteSessioID[1][0]&0xff,remoteSessioID[1][1]&0xff,remoteSessioID[1][2]&0xff,remoteSessioID[1][3]&0xff);\n\t        ms_filter_call_method(stream->tcpRecv,MS_TCP_READ_SET_LOCAL_FRAG,localSessionID[1]);\n\t        ms_filter_call_method(stream->tcpRecv,MS_TCP_READ_SET_REMOTE_FRAG,remoteSessioID[1]);\n\t        if(ms_filter_call_method(stream->tcpRecv,MS_TCP_READ_LOGIN,0)!=0){\n\t                printf(\"audiostream.c::audiio_stream_start_call - TcpReadFilter fail to login\\n\");\n\t                ms_mutex_unlock(&stream_mutex);\n\t                return -20;\n\t        }\n\t\n\t        stream->source=ms_filter_new(MS_LINUX_SOUND_READ_ID);\n\t        if(stream->source==NULL){\n\t                ms_mutex_unlock(&stream_mutex);\n\t                return -2;\n\t        }\n\t\n\t        stream->dest=ms_filter_new(MS_LINUX_SOUND_WRITE_ID);\n\t        if(stream->dest==NULL){\n\t                ms_mutex_unlock(&stream_mutex);\n\t                return -8;\n\t        }\n\t\n\t        ms_filter_link(stream->tcpRecv,0,stream->decoder,0);\n\t        ms_filter_link(stream->decoder,0,stream->dest, 0);\n\t        ms_filter_link(stream->source,0,stream->encoder,0);\n\t        ms_filter_link(stream->encoder,0,stream->tcpSend,0);\n\t\n\t        stream->ticker = ms_ticker_new();\n\t        if(stream->ticker==NULL){\n\t                ms_mutex_unlock(&stream_mutex);\n\t                return -6;\n\t        }\n\t\n\t        ms_ticker_set_name(stream->ticker,\"Audio MSTicker\");\n\t\n\t        ms_ticker_attach(stream->ticker, stream->source);\n\t\n\t        ms_ticker_attach(stream->ticker, stream->tcpRecv);\n\t\n\t        ms_mutex_unlock(&stream_mutex);\n\t\treturn 0;\n\t}\n\t//关闭音频流\n\tvoid audio_stream_stop(AudioStream *stream) {\n\t\t\t/* detach */\n\t\n\t        ms_mutex_lock(&stream_mutex);\n\t\n\t        int i=0;\n\t\n\t        if(stream->ticker != NULL && stream->source!=NULL)\n\t                ms_ticker_detach(stream->ticker, stream->source);\n\t\n\t        if(stream->ticker != NULL && stream->tcpRecv!=NULL)\n\t                   ms_ticker_detach(stream->ticker,stream->tcpRecv);\n\t\n\t        if(stream->tcpRecv!=NULL && stream->decoder!=NULL)\n\t                ms_filter_unlink(stream->tcpRecv, 0, stream->decoder, 0);\n\t\n\t\n\t        if(stream->decoder!=NULL && stream->dest!=NULL)\n\t                ms_filter_unlink(stream->decoder, 0, stream->dest, 0);\n\t\n\t        if(stream->source!=NULL && stream->encoder!=NULL)\n\t                ms_filter_unlink(stream->source, 0, stream->encoder, 0);\n\t\n\t        if(stream->encoder!=NULL && stream->tcpSend!=NULL)\n\t        {\n\t                printf(\"ms_filter_unlink(stream->encoder, 0, stream->tcpSend, 0) \\n\\n\");\n\t                ms_filter_unlink(stream->encoder, 0, stream->tcpSend, 0);\n\t        }\n\t\n\t\t\t/* destroy filter */\n\t        ms_mutex_unlock(&stream_mutex);\n\t\t\taudio_stream_free(stream);\n\t        printf(\"audio_stream_stop 10\\n\");\n\t}\n","slug":"mediastreamer","published":1,"updated":"2017-09-21T01:55:27.186Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7ttahvj000gde5l57rc03i7","content":"<p>#mediastreamer使用教程</p>\n<p>##1.各个函数功能简介<br><code>ms_filter_destroy</code> 释放filter资源</p>\n<p><code>ms_ticker_destroy</code>释放ticker</p>\n<p>说明：ticker为定时器线程，每隔10ms执行一次</p>\n<p><code>ms_filter_new</code>创建filter，传进参数为filter的ID</p>\n<p><code>ms_connection_helper_start</code>拿到filter链接起始位置</p>\n<p><code>ms_connection_helper_link</code>链接filter</p>\n<p><code>ms_filter_link</code>链接filter</p>\n<p><code>ms_ticker_new</code>创建ticker</p>\n<p>ticker说明：</p>\n<p>ticker是属于一个线程不能够运行两个阻塞式的过程，比如socks的发送与接收，必须将<br>发送和接收放在filter线程里面。</p>\n<p><code>ms_ticker_set_name</code>设置ticker名称</p>\n<p><code>ms_ticker_attach</code>将ticker附加到线程中</p>\n<p><code>ms_ticker_detach</code>去掉ticker</p>\n<p><code>ms_connection_helper_unlink</code>去掉filter链接</p>\n<p><code>ms_filter_unlink</code> 去掉filter链接</p>\n<p><code>ms_new filter</code>数据结构创建</p>\n<p><code>ms_free</code> 数据结构数据释放</p>\n<p><code>ms_queue_get(f-&gt;inpputs[0])</code>获取filter数据</p>\n<p><code>msgdsize</code>获取filter里面数据长度</p>\n<p><code>ms_queue_put(f-&gt;outputs[0],om)</code>往filter里面塞数据</p>\n<p><code>freemsg</code>释放filter数据</p>\n<p><code>ms_thread_join</code>在filter里面创建线程</p>\n<p><code>ms_filter_call_method</code>往filter里面发送数据</p>\n<p>##2.创建filter过程</p>\n<p>###2.1在Allfilters.h里面添加filter的ID</p>\n<p>###2.2在Alldescs.h里面添加filter结构体变量</p>\n<p>###2.3在实现filter的源文件里面添加相关头文件</p>\n<pre><code>#include &quot;msfilter.h&quot;\n#include &quot;msticker.h&quot;\n</code></pre><p>###2.4.一个标准的filter过程</p>\n<pre><code>#include &quot;msfilter.h&quot;\n#include &quot;msticker.h&quot;\n\nstatic void enc_init(MSFilter *f){\n\n}\n\nstatic void enc_uninit(MSFilter *f){\n\n}\n\nstatic void enc_preprocess(MSFilter *f)\n{\n}\n\nstatic void enc_process(MSFilter *f){\n\n\n}\n\nstatic void enc_postprocess(MSFilter *f){\n}\n\nstatic MSFilterMethod enc_methods[]={\n        {0,NULL}\n};\n\nMSFilterDesc ms_amr_enc_desc={\n        MS_AMR_ENCODER_ID, //filter ID\n        &quot;amrEnc&quot;,  //filter名称\n        &quot;amr encoder&quot;,\n        MS_FILTER_ENCODER,  //filter类型MS_FILTER_OTHER 其他,\n                            //MS_FILTER_ENCODER 编码器,\n                            //MS_FILTER_DECODER 解码器\n        &quot;amr&quot;,\n        1,\n        1,\n        enc_init,   //初始化操作\n        enc_preprocess,  //预初始化操作\n        enc_process,   //处理过程\n        enc_postprocess,  //预结束操作\n        enc_uninit,  //结束操作\n        enc_methods  //程序模块方法，用于参数传递\n};\n\n\nstatic void dec_init(MSFilter *f){\n\n}\n\nstatic void dec_uninit(MSFilter *f){\n\n}\n\nstatic void dec_preprocess(MSFilter *f){\n}\n\nstatic void dec_postprocess(MSFilter *f){\n}\n\nstatic void dec_process(MSFilter *f){\n\n}\n\nstatic MSFilterMethod dec_methods[]={\n        {0,NULL}\n};\n\nMSFilterDesc ms_amr_dec_desc={\n        MS_AMR_DECODER_ID,\n        &quot;amrDec&quot;,\n        &quot;amr decoder&quot;,\n        MS_FILTER_DECODER,\n        &quot;amr&quot;,\n        1,\n        1,\n        dec_init,\n        dec_preprocess,\n        dec_process,\n        dec_postprocess,\n        dec_uninit,\n        dec_methods\n};\n\nMS_FILTER_DESC_EXPORT(ms_amr_dec_desc)\nMS_FILTER_DESC_EXPORT(ms_amr_enc_desc)\n</code></pre><p>##3.替换编码器</p>\n<p>将原来silk编码器换为amr编码器</p>\n<p>###3.1创建amr的filter</p>\n<pre><code>stream-&gt;decoder=ms_filter_new(MS_AMR_DECODER_ID);\n</code></pre><p>###3.2链接编码filter</p>\n<pre><code>ms_filter_link(stream-&gt;tcpRecv,0,stream-&gt;decoder,0);\n</code></pre><p>##4.filter创建注意事项</p>\n<p>###4.1 filter里面数据流要对应</p>\n<pre><code>MSFilterDesc ms_amr_dec_desc={\n        MS_AMR_DECODER_ID,\n        &quot;amrDec&quot;,\n        &quot;amr decoder&quot;,\n        MS_FILTER_DECODER,\n        &quot;amr&quot;,\n        1,  //进\n        1,  //出\n        dec_init,\n        dec_preprocess,\n        dec_process,\n        dec_postprocess,\n        dec_uninit,\n        dec_methods\n};\n</code></pre><p>以上是编码器filter,是一进一出，原始数据进去出来编码后的数据。</p>\n<pre><code>MSFilterDesc ms_tcpclient_send_desc={\n        MS_TCP_SEND_ID,\n        &quot;TcpClientSend&quot;,\n        &quot;TcpClient_Send&quot;,\n        MS_FILTER_OTHER,\n        &quot;tcpclient&quot;,\n        1,  //进\n        0,  //出\n        tcp_send_init,\n        tcp_send_preprocess,\n        tcp_send_process,\n        tcp_send_postprocess,\n        tcp_send_uninit,\n        tcpclient_send_methods\n};\n</code></pre><p>以上是TCP数据发送filter，只有进没有出，数据进来之后都发送数据都发送出去了</p>\n<p>###4.2 filter里面new的结构体数据要记得free</p>\n<p>##5.例子：一个音频流启动过程</p>\n<pre><code>#include &quot;mediastreamer/audiostream.h&quot;\n#include &quot;rtpsession.h&quot;\n#include &quot;mediastreamer/msrtp.h&quot;\n#include &quot;mediastreamer/mssndcard.h&quot;\n#include &quot;mediastreamer/msvolume.h&quot;\n#include&quot;mediastreamer/TcpClientFilter.h&quot;\n#include &lt;signal.h&gt;\n#include &lt;stdio.h&gt;\n\nstatic ms_mutex_t stream_mutex;\n\n//初始化结构体数据\nAudioStream* audio_stream_new() {\n    AudioStream *stream = (AudioStream *)ms_new0 (AudioStream, 1);\n    return stream;\n}\n//释放音频流\nvoid audio_stream_free(AudioStream *stream) {\n\n    if(stream-&gt;source!=NULL)\n        ms_filter_destroy(stream-&gt;source);\n    if(stream-&gt;encoder!=NULL)\n        ms_filter_destroy(stream-&gt;encoder);\n\n        if(stream-&gt;tcpSend!=NULL)\n                ms_filter_destroy(stream-&gt;tcpSend);\n        if(stream-&gt;tcpRecv!=NULL)\n                ms_filter_destroy(stream-&gt;tcpRecv);\n        if(stream-&gt;dest!=NULL)\n                ms_filter_destroy(stream-&gt;dest);\n\n        if(stream-&gt;ticker!=NULL)\n        {\n                printf(&quot;ms_ticker_destroy begin r 41\\n&quot;);\n        ms_ticker_destroy(stream-&gt;ticker);\n                printf(&quot;ms_ticker_destroy end  r43 audiostream.c \\n&quot;);\n        }\n\n\n    ms_free(stream);\n        ms_mutex_destroy(&amp;stream_mutex);\n        printf(&quot;ms_free(stream) end \\n&quot;);\n}\n\n#define payload_type_set_number2(pt,n)    (pt)-&gt;user_data=(void*)((long)n);\nstatic void dp_set_payload_type(PayloadType *const_pt, int number, const char *recv_fmtp)\n{\n    payload_type_set_number2(const_pt, number);\n\n    rtp_profile_set_payload(&amp;av_profile,number,const_pt);\n}\n//启动音频流\nint audio_stream_start(AudioStream *stream,char* SeverIp, int SeverPort, char (*localSessionID)[4], char (*remoteSessioID)[4]){\n\n\n        ms_mutex_init(&amp;stream_mutex,NULL);\n        ms_mutex_lock(&amp;stream_mutex);\n    if(stream==NULL)\n        {\n            ms_mutex_unlock(&amp;stream_mutex);\n            return -1;\n        }\n\n        stream-&gt;decoder=ms_filter_new(MS_AMR_DECODER_ID);\n        if(stream-&gt;decoder==NULL){\n                        return -1;\n        }\n\n        stream-&gt;encoder=ms_filter_new(MS_AMR_ENCODER_ID);\n        if(stream-&gt;encoder==NULL){\n                        return -2;\n        }\n\n        stream-&gt;tcpSend=ms_filter_new(MS_TCP_SEND_ID);\n        if(stream-&gt;tcpSend==NULL){\n                ms_mutex_unlock(&amp;stream_mutex);\n                return -9;\n        }\n\n        ms_filter_call_method(stream-&gt;tcpSend,MS_TCP_SEND_SET_LOCAL_FRAG,localSessionID[0]);\n        ms_filter_call_method(stream-&gt;tcpSend,MS_TCP_SEND_SET_REMOTE_FRAG,remoteSessioID[0]);\n        if(ms_filter_call_method(stream-&gt;tcpSend,MS_TCP_SEND_LOGIN,0)!=0){\n                printf(&quot;audiostream.c::audio_stream_start_call - TcpSendFilter fail to login\\n&quot;);\n                ms_mutex_unlock(&amp;stream_mutex);\n                return -19;\n        }\n\n        stream-&gt;tcpRecv=ms_filter_new(MS_TCP_READ_ID);\n        if(stream-&gt;tcpRecv==NULL){\n                ms_mutex_unlock(&amp;stream_mutex);\n                return -10;\n        }\n        printf(&quot;audiostream.c::audio_stream_start_call - local:%02x%02x%02x%02x remote:%02x%02x%02x%02x&quot;,localSessionID[1][0]&amp;0xff,localSessionID[1][1]&amp;0xff,localSessionID[1][2]&amp;0xff,localSessionID[1][3]&amp;0xff,\n                  remoteSessioID[1][0]&amp;0xff,remoteSessioID[1][1]&amp;0xff,remoteSessioID[1][2]&amp;0xff,remoteSessioID[1][3]&amp;0xff);\n        ms_filter_call_method(stream-&gt;tcpRecv,MS_TCP_READ_SET_LOCAL_FRAG,localSessionID[1]);\n        ms_filter_call_method(stream-&gt;tcpRecv,MS_TCP_READ_SET_REMOTE_FRAG,remoteSessioID[1]);\n        if(ms_filter_call_method(stream-&gt;tcpRecv,MS_TCP_READ_LOGIN,0)!=0){\n                printf(&quot;audiostream.c::audiio_stream_start_call - TcpReadFilter fail to login\\n&quot;);\n                ms_mutex_unlock(&amp;stream_mutex);\n                return -20;\n        }\n\n        stream-&gt;source=ms_filter_new(MS_LINUX_SOUND_READ_ID);\n        if(stream-&gt;source==NULL){\n                ms_mutex_unlock(&amp;stream_mutex);\n                return -2;\n        }\n\n        stream-&gt;dest=ms_filter_new(MS_LINUX_SOUND_WRITE_ID);\n        if(stream-&gt;dest==NULL){\n                ms_mutex_unlock(&amp;stream_mutex);\n                return -8;\n        }\n\n        ms_filter_link(stream-&gt;tcpRecv,0,stream-&gt;decoder,0);\n        ms_filter_link(stream-&gt;decoder,0,stream-&gt;dest, 0);\n        ms_filter_link(stream-&gt;source,0,stream-&gt;encoder,0);\n        ms_filter_link(stream-&gt;encoder,0,stream-&gt;tcpSend,0);\n\n        stream-&gt;ticker = ms_ticker_new();\n        if(stream-&gt;ticker==NULL){\n                ms_mutex_unlock(&amp;stream_mutex);\n                return -6;\n        }\n\n        ms_ticker_set_name(stream-&gt;ticker,&quot;Audio MSTicker&quot;);\n\n        ms_ticker_attach(stream-&gt;ticker, stream-&gt;source);\n\n        ms_ticker_attach(stream-&gt;ticker, stream-&gt;tcpRecv);\n\n        ms_mutex_unlock(&amp;stream_mutex);\n    return 0;\n}\n//关闭音频流\nvoid audio_stream_stop(AudioStream *stream) {\n        /* detach */\n\n        ms_mutex_lock(&amp;stream_mutex);\n\n        int i=0;\n\n        if(stream-&gt;ticker != NULL &amp;&amp; stream-&gt;source!=NULL)\n                ms_ticker_detach(stream-&gt;ticker, stream-&gt;source);\n\n        if(stream-&gt;ticker != NULL &amp;&amp; stream-&gt;tcpRecv!=NULL)\n                   ms_ticker_detach(stream-&gt;ticker,stream-&gt;tcpRecv);\n\n        if(stream-&gt;tcpRecv!=NULL &amp;&amp; stream-&gt;decoder!=NULL)\n                ms_filter_unlink(stream-&gt;tcpRecv, 0, stream-&gt;decoder, 0);\n\n\n        if(stream-&gt;decoder!=NULL &amp;&amp; stream-&gt;dest!=NULL)\n                ms_filter_unlink(stream-&gt;decoder, 0, stream-&gt;dest, 0);\n\n        if(stream-&gt;source!=NULL &amp;&amp; stream-&gt;encoder!=NULL)\n                ms_filter_unlink(stream-&gt;source, 0, stream-&gt;encoder, 0);\n\n        if(stream-&gt;encoder!=NULL &amp;&amp; stream-&gt;tcpSend!=NULL)\n        {\n                printf(&quot;ms_filter_unlink(stream-&gt;encoder, 0, stream-&gt;tcpSend, 0) \\n\\n&quot;);\n                ms_filter_unlink(stream-&gt;encoder, 0, stream-&gt;tcpSend, 0);\n        }\n\n        /* destroy filter */\n        ms_mutex_unlock(&amp;stream_mutex);\n        audio_stream_free(stream);\n        printf(&quot;audio_stream_stop 10\\n&quot;);\n}\n</code></pre>","excerpt":"","more":"<p>#mediastreamer使用教程</p>\n<p>##1.各个函数功能简介<br><code>ms_filter_destroy</code> 释放filter资源</p>\n<p><code>ms_ticker_destroy</code>释放ticker</p>\n<p>说明：ticker为定时器线程，每隔10ms执行一次</p>\n<p><code>ms_filter_new</code>创建filter，传进参数为filter的ID</p>\n<p><code>ms_connection_helper_start</code>拿到filter链接起始位置</p>\n<p><code>ms_connection_helper_link</code>链接filter</p>\n<p><code>ms_filter_link</code>链接filter</p>\n<p><code>ms_ticker_new</code>创建ticker</p>\n<p>ticker说明：</p>\n<p>ticker是属于一个线程不能够运行两个阻塞式的过程，比如socks的发送与接收，必须将<br>发送和接收放在filter线程里面。</p>\n<p><code>ms_ticker_set_name</code>设置ticker名称</p>\n<p><code>ms_ticker_attach</code>将ticker附加到线程中</p>\n<p><code>ms_ticker_detach</code>去掉ticker</p>\n<p><code>ms_connection_helper_unlink</code>去掉filter链接</p>\n<p><code>ms_filter_unlink</code> 去掉filter链接</p>\n<p><code>ms_new filter</code>数据结构创建</p>\n<p><code>ms_free</code> 数据结构数据释放</p>\n<p><code>ms_queue_get(f-&gt;inpputs[0])</code>获取filter数据</p>\n<p><code>msgdsize</code>获取filter里面数据长度</p>\n<p><code>ms_queue_put(f-&gt;outputs[0],om)</code>往filter里面塞数据</p>\n<p><code>freemsg</code>释放filter数据</p>\n<p><code>ms_thread_join</code>在filter里面创建线程</p>\n<p><code>ms_filter_call_method</code>往filter里面发送数据</p>\n<p>##2.创建filter过程</p>\n<p>###2.1在Allfilters.h里面添加filter的ID</p>\n<p>###2.2在Alldescs.h里面添加filter结构体变量</p>\n<p>###2.3在实现filter的源文件里面添加相关头文件</p>\n<pre><code>#include &quot;msfilter.h&quot;\n#include &quot;msticker.h&quot;\n</code></pre><p>###2.4.一个标准的filter过程</p>\n<pre><code>#include &quot;msfilter.h&quot;\n#include &quot;msticker.h&quot;\n\nstatic void enc_init(MSFilter *f){\n\n}\n\nstatic void enc_uninit(MSFilter *f){\n\n}\n\nstatic void enc_preprocess(MSFilter *f)\n{\n}\n\nstatic void enc_process(MSFilter *f){\n\n\n}\n\nstatic void enc_postprocess(MSFilter *f){\n}\n\nstatic MSFilterMethod enc_methods[]={\n        {0,NULL}\n};\n\nMSFilterDesc ms_amr_enc_desc={\n        MS_AMR_ENCODER_ID, //filter ID\n        &quot;amrEnc&quot;,  //filter名称\n        &quot;amr encoder&quot;,\n        MS_FILTER_ENCODER,  //filter类型MS_FILTER_OTHER 其他,\n                            //MS_FILTER_ENCODER 编码器,\n                            //MS_FILTER_DECODER 解码器\n        &quot;amr&quot;,\n        1,\n        1,\n        enc_init,   //初始化操作\n        enc_preprocess,  //预初始化操作\n        enc_process,   //处理过程\n        enc_postprocess,  //预结束操作\n        enc_uninit,  //结束操作\n        enc_methods  //程序模块方法，用于参数传递\n};\n\n\nstatic void dec_init(MSFilter *f){\n\n}\n\nstatic void dec_uninit(MSFilter *f){\n\n}\n\nstatic void dec_preprocess(MSFilter *f){\n}\n\nstatic void dec_postprocess(MSFilter *f){\n}\n\nstatic void dec_process(MSFilter *f){\n\n}\n\nstatic MSFilterMethod dec_methods[]={\n        {0,NULL}\n};\n\nMSFilterDesc ms_amr_dec_desc={\n        MS_AMR_DECODER_ID,\n        &quot;amrDec&quot;,\n        &quot;amr decoder&quot;,\n        MS_FILTER_DECODER,\n        &quot;amr&quot;,\n        1,\n        1,\n        dec_init,\n        dec_preprocess,\n        dec_process,\n        dec_postprocess,\n        dec_uninit,\n        dec_methods\n};\n\nMS_FILTER_DESC_EXPORT(ms_amr_dec_desc)\nMS_FILTER_DESC_EXPORT(ms_amr_enc_desc)\n</code></pre><p>##3.替换编码器</p>\n<p>将原来silk编码器换为amr编码器</p>\n<p>###3.1创建amr的filter</p>\n<pre><code>stream-&gt;decoder=ms_filter_new(MS_AMR_DECODER_ID);\n</code></pre><p>###3.2链接编码filter</p>\n<pre><code>ms_filter_link(stream-&gt;tcpRecv,0,stream-&gt;decoder,0);\n</code></pre><p>##4.filter创建注意事项</p>\n<p>###4.1 filter里面数据流要对应</p>\n<pre><code>MSFilterDesc ms_amr_dec_desc={\n        MS_AMR_DECODER_ID,\n        &quot;amrDec&quot;,\n        &quot;amr decoder&quot;,\n        MS_FILTER_DECODER,\n        &quot;amr&quot;,\n        1,  //进\n        1,  //出\n        dec_init,\n        dec_preprocess,\n        dec_process,\n        dec_postprocess,\n        dec_uninit,\n        dec_methods\n};\n</code></pre><p>以上是编码器filter,是一进一出，原始数据进去出来编码后的数据。</p>\n<pre><code>MSFilterDesc ms_tcpclient_send_desc={\n        MS_TCP_SEND_ID,\n        &quot;TcpClientSend&quot;,\n        &quot;TcpClient_Send&quot;,\n        MS_FILTER_OTHER,\n        &quot;tcpclient&quot;,\n        1,  //进\n        0,  //出\n        tcp_send_init,\n        tcp_send_preprocess,\n        tcp_send_process,\n        tcp_send_postprocess,\n        tcp_send_uninit,\n        tcpclient_send_methods\n};\n</code></pre><p>以上是TCP数据发送filter，只有进没有出，数据进来之后都发送数据都发送出去了</p>\n<p>###4.2 filter里面new的结构体数据要记得free</p>\n<p>##5.例子：一个音频流启动过程</p>\n<pre><code>#include &quot;mediastreamer/audiostream.h&quot;\n#include &quot;rtpsession.h&quot;\n#include &quot;mediastreamer/msrtp.h&quot;\n#include &quot;mediastreamer/mssndcard.h&quot;\n#include &quot;mediastreamer/msvolume.h&quot;\n#include&quot;mediastreamer/TcpClientFilter.h&quot;\n#include &lt;signal.h&gt;\n#include &lt;stdio.h&gt;\n\nstatic ms_mutex_t stream_mutex;\n\n//初始化结构体数据\nAudioStream* audio_stream_new() {\n    AudioStream *stream = (AudioStream *)ms_new0 (AudioStream, 1);\n    return stream;\n}\n//释放音频流\nvoid audio_stream_free(AudioStream *stream) {\n\n    if(stream-&gt;source!=NULL)\n        ms_filter_destroy(stream-&gt;source);\n    if(stream-&gt;encoder!=NULL)\n        ms_filter_destroy(stream-&gt;encoder);\n\n        if(stream-&gt;tcpSend!=NULL)\n                ms_filter_destroy(stream-&gt;tcpSend);\n        if(stream-&gt;tcpRecv!=NULL)\n                ms_filter_destroy(stream-&gt;tcpRecv);\n        if(stream-&gt;dest!=NULL)\n                ms_filter_destroy(stream-&gt;dest);\n\n        if(stream-&gt;ticker!=NULL)\n        {\n                printf(&quot;ms_ticker_destroy begin r 41\\n&quot;);\n        ms_ticker_destroy(stream-&gt;ticker);\n                printf(&quot;ms_ticker_destroy end  r43 audiostream.c \\n&quot;);\n        }\n\n\n    ms_free(stream);\n        ms_mutex_destroy(&amp;stream_mutex);\n        printf(&quot;ms_free(stream) end \\n&quot;);\n}\n\n#define payload_type_set_number2(pt,n)    (pt)-&gt;user_data=(void*)((long)n);\nstatic void dp_set_payload_type(PayloadType *const_pt, int number, const char *recv_fmtp)\n{\n    payload_type_set_number2(const_pt, number);\n\n    rtp_profile_set_payload(&amp;av_profile,number,const_pt);\n}\n//启动音频流\nint audio_stream_start(AudioStream *stream,char* SeverIp, int SeverPort, char (*localSessionID)[4], char (*remoteSessioID)[4]){\n\n\n        ms_mutex_init(&amp;stream_mutex,NULL);\n        ms_mutex_lock(&amp;stream_mutex);\n    if(stream==NULL)\n        {\n            ms_mutex_unlock(&amp;stream_mutex);\n            return -1;\n        }\n\n        stream-&gt;decoder=ms_filter_new(MS_AMR_DECODER_ID);\n        if(stream-&gt;decoder==NULL){\n                        return -1;\n        }\n\n        stream-&gt;encoder=ms_filter_new(MS_AMR_ENCODER_ID);\n        if(stream-&gt;encoder==NULL){\n                        return -2;\n        }\n\n        stream-&gt;tcpSend=ms_filter_new(MS_TCP_SEND_ID);\n        if(stream-&gt;tcpSend==NULL){\n                ms_mutex_unlock(&amp;stream_mutex);\n                return -9;\n        }\n\n        ms_filter_call_method(stream-&gt;tcpSend,MS_TCP_SEND_SET_LOCAL_FRAG,localSessionID[0]);\n        ms_filter_call_method(stream-&gt;tcpSend,MS_TCP_SEND_SET_REMOTE_FRAG,remoteSessioID[0]);\n        if(ms_filter_call_method(stream-&gt;tcpSend,MS_TCP_SEND_LOGIN,0)!=0){\n                printf(&quot;audiostream.c::audio_stream_start_call - TcpSendFilter fail to login\\n&quot;);\n                ms_mutex_unlock(&amp;stream_mutex);\n                return -19;\n        }\n\n        stream-&gt;tcpRecv=ms_filter_new(MS_TCP_READ_ID);\n        if(stream-&gt;tcpRecv==NULL){\n                ms_mutex_unlock(&amp;stream_mutex);\n                return -10;\n        }\n        printf(&quot;audiostream.c::audio_stream_start_call - local:%02x%02x%02x%02x remote:%02x%02x%02x%02x&quot;,localSessionID[1][0]&amp;0xff,localSessionID[1][1]&amp;0xff,localSessionID[1][2]&amp;0xff,localSessionID[1][3]&amp;0xff,\n                  remoteSessioID[1][0]&amp;0xff,remoteSessioID[1][1]&amp;0xff,remoteSessioID[1][2]&amp;0xff,remoteSessioID[1][3]&amp;0xff);\n        ms_filter_call_method(stream-&gt;tcpRecv,MS_TCP_READ_SET_LOCAL_FRAG,localSessionID[1]);\n        ms_filter_call_method(stream-&gt;tcpRecv,MS_TCP_READ_SET_REMOTE_FRAG,remoteSessioID[1]);\n        if(ms_filter_call_method(stream-&gt;tcpRecv,MS_TCP_READ_LOGIN,0)!=0){\n                printf(&quot;audiostream.c::audiio_stream_start_call - TcpReadFilter fail to login\\n&quot;);\n                ms_mutex_unlock(&amp;stream_mutex);\n                return -20;\n        }\n\n        stream-&gt;source=ms_filter_new(MS_LINUX_SOUND_READ_ID);\n        if(stream-&gt;source==NULL){\n                ms_mutex_unlock(&amp;stream_mutex);\n                return -2;\n        }\n\n        stream-&gt;dest=ms_filter_new(MS_LINUX_SOUND_WRITE_ID);\n        if(stream-&gt;dest==NULL){\n                ms_mutex_unlock(&amp;stream_mutex);\n                return -8;\n        }\n\n        ms_filter_link(stream-&gt;tcpRecv,0,stream-&gt;decoder,0);\n        ms_filter_link(stream-&gt;decoder,0,stream-&gt;dest, 0);\n        ms_filter_link(stream-&gt;source,0,stream-&gt;encoder,0);\n        ms_filter_link(stream-&gt;encoder,0,stream-&gt;tcpSend,0);\n\n        stream-&gt;ticker = ms_ticker_new();\n        if(stream-&gt;ticker==NULL){\n                ms_mutex_unlock(&amp;stream_mutex);\n                return -6;\n        }\n\n        ms_ticker_set_name(stream-&gt;ticker,&quot;Audio MSTicker&quot;);\n\n        ms_ticker_attach(stream-&gt;ticker, stream-&gt;source);\n\n        ms_ticker_attach(stream-&gt;ticker, stream-&gt;tcpRecv);\n\n        ms_mutex_unlock(&amp;stream_mutex);\n    return 0;\n}\n//关闭音频流\nvoid audio_stream_stop(AudioStream *stream) {\n        /* detach */\n\n        ms_mutex_lock(&amp;stream_mutex);\n\n        int i=0;\n\n        if(stream-&gt;ticker != NULL &amp;&amp; stream-&gt;source!=NULL)\n                ms_ticker_detach(stream-&gt;ticker, stream-&gt;source);\n\n        if(stream-&gt;ticker != NULL &amp;&amp; stream-&gt;tcpRecv!=NULL)\n                   ms_ticker_detach(stream-&gt;ticker,stream-&gt;tcpRecv);\n\n        if(stream-&gt;tcpRecv!=NULL &amp;&amp; stream-&gt;decoder!=NULL)\n                ms_filter_unlink(stream-&gt;tcpRecv, 0, stream-&gt;decoder, 0);\n\n\n        if(stream-&gt;decoder!=NULL &amp;&amp; stream-&gt;dest!=NULL)\n                ms_filter_unlink(stream-&gt;decoder, 0, stream-&gt;dest, 0);\n\n        if(stream-&gt;source!=NULL &amp;&amp; stream-&gt;encoder!=NULL)\n                ms_filter_unlink(stream-&gt;source, 0, stream-&gt;encoder, 0);\n\n        if(stream-&gt;encoder!=NULL &amp;&amp; stream-&gt;tcpSend!=NULL)\n        {\n                printf(&quot;ms_filter_unlink(stream-&gt;encoder, 0, stream-&gt;tcpSend, 0) \\n\\n&quot;);\n                ms_filter_unlink(stream-&gt;encoder, 0, stream-&gt;tcpSend, 0);\n        }\n\n        /* destroy filter */\n        ms_mutex_unlock(&amp;stream_mutex);\n        audio_stream_free(stream);\n        printf(&quot;audio_stream_stop 10\\n&quot;);\n}\n</code></pre>"},{"title":"mysql udf插件开发","date":"2017-04-08T14:33:05.000Z","_content":"\n#编写mysql插件\n##查看mysql插件so目录\n###进入mysql后执行如下指令\n\tSHOW VARIABLES LIKE 'plugin_dir';\n\n显示\n\n\tplugin_dir =/usr/local/mysql/lib/plugin/\n编译\n\n\tgcc $(mysql_config --cflags) -shared -fPIC -o calc_distance_udf.so calc_distance_udf.c\n\n将生成so拷到指定目录\n\n\tcp calc_distance_udf.so /usr/local/mysql/lib/plugin/\n\n进入mysql创建funcation\n\n\tCREATE FUNCTION calc_distance_udf \n\t   RETURNS REAL\n\t   SONAME \"calc_distance_udf.so\";\n##注意\n\t如果以上创建function出错的时候要检查下so文件的权限是否可读。\n查看funcation\n\tUSE mysql;\n\tSELECT * FROM func;\n\n测试\n\n \tselect calc_distance_udf(1.0, 2.0, 3.0, 4.0);\n\n参考教程\n\n[http://blog.loftdigital.com/blog/how-to-write-mysql-functions-in-c](http://blog.loftdigital.com/blog/how-to-write-mysql-functions-in-c)\n\n#注意：\n `mysql udf`的执行方式是mysql程序启动的时候加载so文件到内存，有`FUNCATION`调用的时候，执行so里面的程序。所以更新so文件后要重启mysql服务。\n\n如果使用Ubuntu的apt直接安装mysql，编译的时候会出现找不到相应的头文件，执行以下命令\n\n\tsudo apt-get install libmysql++-dev\n\n还有在不同的平台下要使用对应的编译器重新编译，32位对应32位，64位对应64位。\n\n[自己编写DEMO](https://github.com/QUSIR/mysql_udf)","source":"_posts/mysql-udf插件开发.md","raw":"---\ntitle: mysql udf插件开发\ndate: 2017-04-08 22:33:05\ntags:\n---\n\n#编写mysql插件\n##查看mysql插件so目录\n###进入mysql后执行如下指令\n\tSHOW VARIABLES LIKE 'plugin_dir';\n\n显示\n\n\tplugin_dir =/usr/local/mysql/lib/plugin/\n编译\n\n\tgcc $(mysql_config --cflags) -shared -fPIC -o calc_distance_udf.so calc_distance_udf.c\n\n将生成so拷到指定目录\n\n\tcp calc_distance_udf.so /usr/local/mysql/lib/plugin/\n\n进入mysql创建funcation\n\n\tCREATE FUNCTION calc_distance_udf \n\t   RETURNS REAL\n\t   SONAME \"calc_distance_udf.so\";\n##注意\n\t如果以上创建function出错的时候要检查下so文件的权限是否可读。\n查看funcation\n\tUSE mysql;\n\tSELECT * FROM func;\n\n测试\n\n \tselect calc_distance_udf(1.0, 2.0, 3.0, 4.0);\n\n参考教程\n\n[http://blog.loftdigital.com/blog/how-to-write-mysql-functions-in-c](http://blog.loftdigital.com/blog/how-to-write-mysql-functions-in-c)\n\n#注意：\n `mysql udf`的执行方式是mysql程序启动的时候加载so文件到内存，有`FUNCATION`调用的时候，执行so里面的程序。所以更新so文件后要重启mysql服务。\n\n如果使用Ubuntu的apt直接安装mysql，编译的时候会出现找不到相应的头文件，执行以下命令\n\n\tsudo apt-get install libmysql++-dev\n\n还有在不同的平台下要使用对应的编译器重新编译，32位对应32位，64位对应64位。\n\n[自己编写DEMO](https://github.com/QUSIR/mysql_udf)","slug":"mysql-udf插件开发","published":1,"updated":"2017-09-21T01:55:27.186Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7ttahvl000hde5lqh2mxts7","content":"<p>#编写mysql插件</p>\n<p>##查看mysql插件so目录</p>\n<p>###进入mysql后执行如下指令<br>    SHOW VARIABLES LIKE ‘plugin_dir’;</p>\n<p>显示</p>\n<pre><code>plugin_dir =/usr/local/mysql/lib/plugin/\n</code></pre><p>编译</p>\n<pre><code>gcc $(mysql_config --cflags) -shared -fPIC -o calc_distance_udf.so calc_distance_udf.c\n</code></pre><p>将生成so拷到指定目录</p>\n<pre><code>cp calc_distance_udf.so /usr/local/mysql/lib/plugin/\n</code></pre><p>进入mysql创建funcation</p>\n<pre><code>CREATE FUNCTION calc_distance_udf \n   RETURNS REAL\n   SONAME &quot;calc_distance_udf.so&quot;;\n</code></pre><p>##注意<br>    如果以上创建function出错的时候要检查下so文件的权限是否可读。<br>查看funcation<br>    USE mysql;<br>    SELECT * FROM func;</p>\n<p>测试</p>\n<pre><code>select calc_distance_udf(1.0, 2.0, 3.0, 4.0);\n</code></pre><p>参考教程</p>\n<p><a href=\"http://blog.loftdigital.com/blog/how-to-write-mysql-functions-in-c\" target=\"_blank\" rel=\"external\">http://blog.loftdigital.com/blog/how-to-write-mysql-functions-in-c</a></p>\n<p>#注意：<br> <code>mysql udf</code>的执行方式是mysql程序启动的时候加载so文件到内存，有<code>FUNCATION</code>调用的时候，执行so里面的程序。所以更新so文件后要重启mysql服务。</p>\n<p>如果使用Ubuntu的apt直接安装mysql，编译的时候会出现找不到相应的头文件，执行以下命令</p>\n<pre><code>sudo apt-get install libmysql++-dev\n</code></pre><p>还有在不同的平台下要使用对应的编译器重新编译，32位对应32位，64位对应64位。</p>\n<p><a href=\"https://github.com/QUSIR/mysql_udf\" target=\"_blank\" rel=\"external\">自己编写DEMO</a></p>\n","excerpt":"","more":"<p>#编写mysql插件</p>\n<p>##查看mysql插件so目录</p>\n<p>###进入mysql后执行如下指令<br>    SHOW VARIABLES LIKE ‘plugin_dir’;</p>\n<p>显示</p>\n<pre><code>plugin_dir =/usr/local/mysql/lib/plugin/\n</code></pre><p>编译</p>\n<pre><code>gcc $(mysql_config --cflags) -shared -fPIC -o calc_distance_udf.so calc_distance_udf.c\n</code></pre><p>将生成so拷到指定目录</p>\n<pre><code>cp calc_distance_udf.so /usr/local/mysql/lib/plugin/\n</code></pre><p>进入mysql创建funcation</p>\n<pre><code>CREATE FUNCTION calc_distance_udf \n   RETURNS REAL\n   SONAME &quot;calc_distance_udf.so&quot;;\n</code></pre><p>##注意<br>    如果以上创建function出错的时候要检查下so文件的权限是否可读。<br>查看funcation<br>    USE mysql;<br>    SELECT * FROM func;</p>\n<p>测试</p>\n<pre><code>select calc_distance_udf(1.0, 2.0, 3.0, 4.0);\n</code></pre><p>参考教程</p>\n<p><a href=\"http://blog.loftdigital.com/blog/how-to-write-mysql-functions-in-c\">http://blog.loftdigital.com/blog/how-to-write-mysql-functions-in-c</a></p>\n<p>#注意：<br> <code>mysql udf</code>的执行方式是mysql程序启动的时候加载so文件到内存，有<code>FUNCATION</code>调用的时候，执行so里面的程序。所以更新so文件后要重启mysql服务。</p>\n<p>如果使用Ubuntu的apt直接安装mysql，编译的时候会出现找不到相应的头文件，执行以下命令</p>\n<pre><code>sudo apt-get install libmysql++-dev\n</code></pre><p>还有在不同的平台下要使用对应的编译器重新编译，32位对应32位，64位对应64位。</p>\n<p><a href=\"https://github.com/QUSIR/mysql_udf\">自己编写DEMO</a></p>\n"},{"title":"orangePi源码编译教程","date":"2017-02-14T13:36:30.000Z","_content":"\n#环境\n\tubuntu 12.04.5 64位 8G内存 \n\tjdk-6u45-linux-x64.bin 64位JDK6\n\t板子是 orangePC pc\n如果内存不够会编译不成功，安装好jdk6配置好环境变量\n  \n[jdk网盘下载链接](http://pan.baidu.com/s/1eR8pJKA) 密码：jkei\n#linux源码编译\n下载源码压缩包\n\n网址[http://www.orangepi.org/downloadresources/](http://www.orangepi.org/downloadresources/)\n\n###解压源码\ntar -xzvf h3-lichee-1.0.tar.gz\n解压出 lichee目录，进入该目录\n\nbuildroot: 工程编译脚本\nbrandy: boot，uboot 源码以及开源交叉编译工具 gcc-linaro\nlinux-3.4: 内核源码\ntools： 工程编译工具\nbuild.sh: 编译脚本\n###执行编译指令\n在lichee目录执行以下指令\n\n\t$ ./build.sh configA\n\n选择\n此时系统会提示芯片的选择，对于 OrangePi PC ，选择 sun8iw7p1\n\n此时系统会提示平台的选择，对于 OrangePi PC，选择 dragonboard\n\n此时系统会调试板子的选择，对于 OrangePi PC，选择 dolphin-p1\n\n编译成功后会如下显示\n\n![view](http://ohjvpki1b.bkt.clouddn.com/orangepi_PC_build_OK.png)\n\n###内核镜像文件和库的替换\n编译完成之后，将会目录下生成如下文件：\n\nboot： /lichee/tools/pack/chips/sun8iw7p1/bin/boot0_sdcard_sun8iw7p1.bin\n\nuboot： /lichee/tools/pack/chips/sun8iw7p1/bin/u-boot-sun8iw7p1.bin\n\nuImage： /lichee/out/sun8iw7p1/dragonboard/common/uImage\n\nlibs： /lichee/linux-3.4/output/lib/modules\n\n将以上生成文件替换原有系统目录下相应的文件\n\n源码网盘下载地址\n\n[百度网盘链接](http://pan.baidu.com/s/1jIp0XkM) 密码：lh9l\n\n\n#android源码编译\n\n[android源码链接](http://pan.baidu.com/s/1skMg0Lv) 密码：9zsj\n\n[makefile文件链接](http://pan.baidu.com/s/1qYrq9eG) 密码：x9ov\n\n###安装相应软件包\n\t$ sudo apt-get install git gnupg flex bison gperf build-essential \\\n\tzip curl libc6-dev libncurses5-dev:i386 x11proto-core-dev \\\n\tlibx11-dev:i386 libreadline6-dev:i386 libgl1-mesa-glx:i386 \\\n\tlibgl1-mesa-dev g++-multilib mingw32 tofrodos \\\n\tpython-markdown libxml2-utils xsltproc zlib1g-dev:i386\n\n\t$ sudo ln -s /usr/lib/i386-linux-gnu/mesa/libGL.so.1 /usr/lib/i386-linux-gnu/libGL.so\n\n###解压源码\n\t创建目录\n\tmkdir H3\n\t移动文件\n\tmv H3-homlet-1.0.tar.gz ./H3\n\t解压\n\ttar -xzvf H3-homlet-1.0.tar.gz\n解压完之后会得到两个目录\n\n\tandroid lichee\n\n###lichee源码编译\n\n\t$ cd lichee\n\t$ ./build.sh lunch\n![view](http://ohjvpki1b.bkt.clouddn.com/build_lichee.png)\n\n编译成功后打印信息\n\n![view](http://ohjvpki1b.bkt.clouddn.com/build_lichee_ok.png)\n\n###android代码编译\n\n\t$ cd android\n\t$ source ./build/envsetup.sh\n\t$ lunch dolphin_fvd_p1-eng #选择方案号\n\t$ extract-bsp #拷贝内核及驱动模块\n\n由于源码解压出来没有makefile文件，需要将makefile文件拷到目录下才能执行make命令\n\t\n\t$ make –j8 #后面的数值为同时编译的进程，依赖于主机的配置\n\t$ pack #打包生成固件\n\n![view](http://ohjvpki1b.bkt.clouddn.com/OrangePi_build_android_pack.png)\n\n","source":"_posts/orangePi源码编译教程.md","raw":"---\ntitle: orangePi源码编译教程\ndate: 2017-02-14 21:36:30\ntags:\n---\n\n#环境\n\tubuntu 12.04.5 64位 8G内存 \n\tjdk-6u45-linux-x64.bin 64位JDK6\n\t板子是 orangePC pc\n如果内存不够会编译不成功，安装好jdk6配置好环境变量\n  \n[jdk网盘下载链接](http://pan.baidu.com/s/1eR8pJKA) 密码：jkei\n#linux源码编译\n下载源码压缩包\n\n网址[http://www.orangepi.org/downloadresources/](http://www.orangepi.org/downloadresources/)\n\n###解压源码\ntar -xzvf h3-lichee-1.0.tar.gz\n解压出 lichee目录，进入该目录\n\nbuildroot: 工程编译脚本\nbrandy: boot，uboot 源码以及开源交叉编译工具 gcc-linaro\nlinux-3.4: 内核源码\ntools： 工程编译工具\nbuild.sh: 编译脚本\n###执行编译指令\n在lichee目录执行以下指令\n\n\t$ ./build.sh configA\n\n选择\n此时系统会提示芯片的选择，对于 OrangePi PC ，选择 sun8iw7p1\n\n此时系统会提示平台的选择，对于 OrangePi PC，选择 dragonboard\n\n此时系统会调试板子的选择，对于 OrangePi PC，选择 dolphin-p1\n\n编译成功后会如下显示\n\n![view](http://ohjvpki1b.bkt.clouddn.com/orangepi_PC_build_OK.png)\n\n###内核镜像文件和库的替换\n编译完成之后，将会目录下生成如下文件：\n\nboot： /lichee/tools/pack/chips/sun8iw7p1/bin/boot0_sdcard_sun8iw7p1.bin\n\nuboot： /lichee/tools/pack/chips/sun8iw7p1/bin/u-boot-sun8iw7p1.bin\n\nuImage： /lichee/out/sun8iw7p1/dragonboard/common/uImage\n\nlibs： /lichee/linux-3.4/output/lib/modules\n\n将以上生成文件替换原有系统目录下相应的文件\n\n源码网盘下载地址\n\n[百度网盘链接](http://pan.baidu.com/s/1jIp0XkM) 密码：lh9l\n\n\n#android源码编译\n\n[android源码链接](http://pan.baidu.com/s/1skMg0Lv) 密码：9zsj\n\n[makefile文件链接](http://pan.baidu.com/s/1qYrq9eG) 密码：x9ov\n\n###安装相应软件包\n\t$ sudo apt-get install git gnupg flex bison gperf build-essential \\\n\tzip curl libc6-dev libncurses5-dev:i386 x11proto-core-dev \\\n\tlibx11-dev:i386 libreadline6-dev:i386 libgl1-mesa-glx:i386 \\\n\tlibgl1-mesa-dev g++-multilib mingw32 tofrodos \\\n\tpython-markdown libxml2-utils xsltproc zlib1g-dev:i386\n\n\t$ sudo ln -s /usr/lib/i386-linux-gnu/mesa/libGL.so.1 /usr/lib/i386-linux-gnu/libGL.so\n\n###解压源码\n\t创建目录\n\tmkdir H3\n\t移动文件\n\tmv H3-homlet-1.0.tar.gz ./H3\n\t解压\n\ttar -xzvf H3-homlet-1.0.tar.gz\n解压完之后会得到两个目录\n\n\tandroid lichee\n\n###lichee源码编译\n\n\t$ cd lichee\n\t$ ./build.sh lunch\n![view](http://ohjvpki1b.bkt.clouddn.com/build_lichee.png)\n\n编译成功后打印信息\n\n![view](http://ohjvpki1b.bkt.clouddn.com/build_lichee_ok.png)\n\n###android代码编译\n\n\t$ cd android\n\t$ source ./build/envsetup.sh\n\t$ lunch dolphin_fvd_p1-eng #选择方案号\n\t$ extract-bsp #拷贝内核及驱动模块\n\n由于源码解压出来没有makefile文件，需要将makefile文件拷到目录下才能执行make命令\n\t\n\t$ make –j8 #后面的数值为同时编译的进程，依赖于主机的配置\n\t$ pack #打包生成固件\n\n![view](http://ohjvpki1b.bkt.clouddn.com/OrangePi_build_android_pack.png)\n\n","slug":"orangePi源码编译教程","published":1,"updated":"2017-09-21T01:55:27.186Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7ttahvm000ide5lud8g7wbc","content":"<p>#环境<br>    ubuntu 12.04.5 64位 8G内存<br>    jdk-6u45-linux-x64.bin 64位JDK6<br>    板子是 orangePC pc<br>如果内存不够会编译不成功，安装好jdk6配置好环境变量</p>\n<p><a href=\"http://pan.baidu.com/s/1eR8pJKA\" target=\"_blank\" rel=\"external\">jdk网盘下载链接</a> 密码：jkei</p>\n<p>#linux源码编译<br>下载源码压缩包</p>\n<p>网址<a href=\"http://www.orangepi.org/downloadresources/\" target=\"_blank\" rel=\"external\">http://www.orangepi.org/downloadresources/</a></p>\n<p>###解压源码<br>tar -xzvf h3-lichee-1.0.tar.gz<br>解压出 lichee目录，进入该目录</p>\n<p>buildroot: 工程编译脚本<br>brandy: boot，uboot 源码以及开源交叉编译工具 gcc-linaro<br>linux-3.4: 内核源码<br>tools： 工程编译工具<br>build.sh: 编译脚本</p>\n<p>###执行编译指令<br>在lichee目录执行以下指令</p>\n<pre><code>$ ./build.sh configA\n</code></pre><p>选择<br>此时系统会提示芯片的选择，对于 OrangePi PC ，选择 sun8iw7p1</p>\n<p>此时系统会提示平台的选择，对于 OrangePi PC，选择 dragonboard</p>\n<p>此时系统会调试板子的选择，对于 OrangePi PC，选择 dolphin-p1</p>\n<p>编译成功后会如下显示</p>\n<p><img src=\"http://ohjvpki1b.bkt.clouddn.com/orangepi_PC_build_OK.png\" alt=\"view\"></p>\n<p>###内核镜像文件和库的替换<br>编译完成之后，将会目录下生成如下文件：</p>\n<p>boot： /lichee/tools/pack/chips/sun8iw7p1/bin/boot0_sdcard_sun8iw7p1.bin</p>\n<p>uboot： /lichee/tools/pack/chips/sun8iw7p1/bin/u-boot-sun8iw7p1.bin</p>\n<p>uImage： /lichee/out/sun8iw7p1/dragonboard/common/uImage</p>\n<p>libs： /lichee/linux-3.4/output/lib/modules</p>\n<p>将以上生成文件替换原有系统目录下相应的文件</p>\n<p>源码网盘下载地址</p>\n<p><a href=\"http://pan.baidu.com/s/1jIp0XkM\" target=\"_blank\" rel=\"external\">百度网盘链接</a> 密码：lh9l</p>\n<p>#android源码编译</p>\n<p><a href=\"http://pan.baidu.com/s/1skMg0Lv\" target=\"_blank\" rel=\"external\">android源码链接</a> 密码：9zsj</p>\n<p><a href=\"http://pan.baidu.com/s/1qYrq9eG\" target=\"_blank\" rel=\"external\">makefile文件链接</a> 密码：x9ov</p>\n<p>###安装相应软件包<br>    $ sudo apt-get install git gnupg flex bison gperf build-essential \\<br>    zip curl libc6-dev libncurses5-dev:i386 x11proto-core-dev \\<br>    libx11-dev:i386 libreadline6-dev:i386 libgl1-mesa-glx:i386 \\<br>    libgl1-mesa-dev g++-multilib mingw32 tofrodos \\<br>    python-markdown libxml2-utils xsltproc zlib1g-dev:i386</p>\n<pre><code>$ sudo ln -s /usr/lib/i386-linux-gnu/mesa/libGL.so.1 /usr/lib/i386-linux-gnu/libGL.so\n</code></pre><p>###解压源码<br>    创建目录<br>    mkdir H3<br>    移动文件<br>    mv H3-homlet-1.0.tar.gz ./H3<br>    解压<br>    tar -xzvf H3-homlet-1.0.tar.gz<br>解压完之后会得到两个目录</p>\n<pre><code>android lichee\n</code></pre><p>###lichee源码编译</p>\n<pre><code>$ cd lichee\n$ ./build.sh lunch\n</code></pre><p><img src=\"http://ohjvpki1b.bkt.clouddn.com/build_lichee.png\" alt=\"view\"></p>\n<p>编译成功后打印信息</p>\n<p><img src=\"http://ohjvpki1b.bkt.clouddn.com/build_lichee_ok.png\" alt=\"view\"></p>\n<p>###android代码编译</p>\n<pre><code>$ cd android\n$ source ./build/envsetup.sh\n$ lunch dolphin_fvd_p1-eng #选择方案号\n$ extract-bsp #拷贝内核及驱动模块\n</code></pre><p>由于源码解压出来没有makefile文件，需要将makefile文件拷到目录下才能执行make命令</p>\n<pre><code>$ make –j8 #后面的数值为同时编译的进程，依赖于主机的配置\n$ pack #打包生成固件\n</code></pre><p><img src=\"http://ohjvpki1b.bkt.clouddn.com/OrangePi_build_android_pack.png\" alt=\"view\"></p>\n","excerpt":"","more":"<p>#环境<br>    ubuntu 12.04.5 64位 8G内存<br>    jdk-6u45-linux-x64.bin 64位JDK6<br>    板子是 orangePC pc<br>如果内存不够会编译不成功，安装好jdk6配置好环境变量</p>\n<p><a href=\"http://pan.baidu.com/s/1eR8pJKA\">jdk网盘下载链接</a> 密码：jkei</p>\n<p>#linux源码编译<br>下载源码压缩包</p>\n<p>网址<a href=\"http://www.orangepi.org/downloadresources/\">http://www.orangepi.org/downloadresources/</a></p>\n<p>###解压源码<br>tar -xzvf h3-lichee-1.0.tar.gz<br>解压出 lichee目录，进入该目录</p>\n<p>buildroot: 工程编译脚本<br>brandy: boot，uboot 源码以及开源交叉编译工具 gcc-linaro<br>linux-3.4: 内核源码<br>tools： 工程编译工具<br>build.sh: 编译脚本</p>\n<p>###执行编译指令<br>在lichee目录执行以下指令</p>\n<pre><code>$ ./build.sh configA\n</code></pre><p>选择<br>此时系统会提示芯片的选择，对于 OrangePi PC ，选择 sun8iw7p1</p>\n<p>此时系统会提示平台的选择，对于 OrangePi PC，选择 dragonboard</p>\n<p>此时系统会调试板子的选择，对于 OrangePi PC，选择 dolphin-p1</p>\n<p>编译成功后会如下显示</p>\n<p><img src=\"http://ohjvpki1b.bkt.clouddn.com/orangepi_PC_build_OK.png\" alt=\"view\"></p>\n<p>###内核镜像文件和库的替换<br>编译完成之后，将会目录下生成如下文件：</p>\n<p>boot： /lichee/tools/pack/chips/sun8iw7p1/bin/boot0_sdcard_sun8iw7p1.bin</p>\n<p>uboot： /lichee/tools/pack/chips/sun8iw7p1/bin/u-boot-sun8iw7p1.bin</p>\n<p>uImage： /lichee/out/sun8iw7p1/dragonboard/common/uImage</p>\n<p>libs： /lichee/linux-3.4/output/lib/modules</p>\n<p>将以上生成文件替换原有系统目录下相应的文件</p>\n<p>源码网盘下载地址</p>\n<p><a href=\"http://pan.baidu.com/s/1jIp0XkM\">百度网盘链接</a> 密码：lh9l</p>\n<p>#android源码编译</p>\n<p><a href=\"http://pan.baidu.com/s/1skMg0Lv\">android源码链接</a> 密码：9zsj</p>\n<p><a href=\"http://pan.baidu.com/s/1qYrq9eG\">makefile文件链接</a> 密码：x9ov</p>\n<p>###安装相应软件包<br>    $ sudo apt-get install git gnupg flex bison gperf build-essential \\<br>    zip curl libc6-dev libncurses5-dev:i386 x11proto-core-dev \\<br>    libx11-dev:i386 libreadline6-dev:i386 libgl1-mesa-glx:i386 \\<br>    libgl1-mesa-dev g++-multilib mingw32 tofrodos \\<br>    python-markdown libxml2-utils xsltproc zlib1g-dev:i386</p>\n<pre><code>$ sudo ln -s /usr/lib/i386-linux-gnu/mesa/libGL.so.1 /usr/lib/i386-linux-gnu/libGL.so\n</code></pre><p>###解压源码<br>    创建目录<br>    mkdir H3<br>    移动文件<br>    mv H3-homlet-1.0.tar.gz ./H3<br>    解压<br>    tar -xzvf H3-homlet-1.0.tar.gz<br>解压完之后会得到两个目录</p>\n<pre><code>android lichee\n</code></pre><p>###lichee源码编译</p>\n<pre><code>$ cd lichee\n$ ./build.sh lunch\n</code></pre><p><img src=\"http://ohjvpki1b.bkt.clouddn.com/build_lichee.png\" alt=\"view\"></p>\n<p>编译成功后打印信息</p>\n<p><img src=\"http://ohjvpki1b.bkt.clouddn.com/build_lichee_ok.png\" alt=\"view\"></p>\n<p>###android代码编译</p>\n<pre><code>$ cd android\n$ source ./build/envsetup.sh\n$ lunch dolphin_fvd_p1-eng #选择方案号\n$ extract-bsp #拷贝内核及驱动模块\n</code></pre><p>由于源码解压出来没有makefile文件，需要将makefile文件拷到目录下才能执行make命令</p>\n<pre><code>$ make –j8 #后面的数值为同时编译的进程，依赖于主机的配置\n$ pack #打包生成固件\n</code></pre><p><img src=\"http://ohjvpki1b.bkt.clouddn.com/OrangePi_build_android_pack.png\" alt=\"view\"></p>\n"},{"title":"poky raspbian开发","date":"2017-01-21T09:10:37.000Z","_content":"\n\n##安基本包\n\nUbuntu and Debian\n\n     $ sudo apt-get install gawk wget git-core diffstat unzip texinfo gcc-multilib \\\n     build-essential chrpath socat libsdl1.2-dev xterm\n                        \nFedora\n\n     $ sudo dnf install gawk make wget tar bzip2 gzip python3 unzip perl patch \\\n     diffutils diffstat git cpp gcc gcc-c++ glibc-devel texinfo chrpath \\\n     ccache perl-Data-Dumper perl-Text-ParseWords perl-Thread-Queue perl-bignum socat \\\n     findutils which SDL-devel xterm\n                        \nOpenSUSE\n\n     $ sudo zypper install python gcc gcc-c++ git chrpath make wget python-xml \\\n     diffstat makeinfo python-curses patch socat libSDL-devel xterm\n                        \nCentOS\n\n     $ sudo yum install gawk make wget tar bzip2 gzip python unzip perl patch \\\n     diffutils diffstat git cpp gcc gcc-c++ glibc-devel texinfo chrpath socat \\\n     perl-Data-Dumper perl-Text-ParseWords perl-Thread-Queue SDL-devel xterm\n                        \n\n##同步poky源代码\n\tgit clone https://git.yoctoproject.org/git/poky\n进入poky目录同步树莓派代码\n\n\tgit clone https://git.yoctoproject.org/git/meta-raspberrypi\n\n##初始化环境\n\tsource oe-init-build-env raspberrypi\n\n说明：指定目录raspberrypi\n\n##编辑配置文件\n\n\tvim ./conf/local.conf \n\n将\n\n\tMACHINE ??= \"raspberrypi2\"\n注释\n\n\t#PACKAGECONFIG_append_pn-qemu-native = \" sdl\"\n\t#PACKAGECONFIG_append_pn-nativesdk-qemu = \" sdl\"\n\t#ASSUME_PROVIDED += \"libsdl-native\"\n\n文件末尾增加\n\tGPU_MEN = \"16\"\n\n说明：16为CPU核数\n\n\tvim ./conf/bblayers.conf\n修改成以下\n\n\tBBLAYERS ?= \" \\\n\t  /home/gsta/liang/poky/meta \\\n\t  /home/gsta/liang/poky/meta-yocto \\\n\t  /home/gsta/liang/poky/meta-yocto-bsp \\\n\t  /home/gsta/liang/poky/meta-raspberrypi \\\n\t  \"\n\t##增加树莓派目录\n\tBBLAYERS_NON_REMOVABLE ?= \" \\\n\t  /home/gsta/liang/poky/meta \\\n\t  /home/gsta/liang/poky/meta-yocto \\\n\t  \"\n\t\n\n##生成\n\tbitbake rpi-basic-image\n\n注意：同步过程很漫长，同步过程中一定要开启git代理和终端代理\n\n整个同步下来大概有18G\n\n\n##错误处理\n\n\tbitbake complains if run as root\n\t\n\troot@eb4b9143265d:/work/build-test01# bitbake -k core-image-sato\n\tERROR:  OE-core's config sanity checker detected a potential misconfiguration.\n\t    Either fix the cause of this error or at your own risk disable the checker (see sanity.conf).\n\t    Following is the list of potential problems / advisories:\n\t\n\t    Do not use Bitbake as root.\n\tERROR: Execution of event handler 'check_sanity_eventhandler' failed\n\tERROR: Command execution failed: Exited with 1\n\t\n\tSummary: There were 3 ERROR messages shown, returning a non-zero exit code.\n\troot@eb4b9143265d:/work/build-test01#\n\tWorkaround:\n\t\n\t$ touch conf/sanity.conf","source":"_posts/poky-raspbian开发.md","raw":"---\ntitle: poky raspbian开发\ndate: 2017-01-21 17:10:37\ntags:\n---\n\n\n##安基本包\n\nUbuntu and Debian\n\n     $ sudo apt-get install gawk wget git-core diffstat unzip texinfo gcc-multilib \\\n     build-essential chrpath socat libsdl1.2-dev xterm\n                        \nFedora\n\n     $ sudo dnf install gawk make wget tar bzip2 gzip python3 unzip perl patch \\\n     diffutils diffstat git cpp gcc gcc-c++ glibc-devel texinfo chrpath \\\n     ccache perl-Data-Dumper perl-Text-ParseWords perl-Thread-Queue perl-bignum socat \\\n     findutils which SDL-devel xterm\n                        \nOpenSUSE\n\n     $ sudo zypper install python gcc gcc-c++ git chrpath make wget python-xml \\\n     diffstat makeinfo python-curses patch socat libSDL-devel xterm\n                        \nCentOS\n\n     $ sudo yum install gawk make wget tar bzip2 gzip python unzip perl patch \\\n     diffutils diffstat git cpp gcc gcc-c++ glibc-devel texinfo chrpath socat \\\n     perl-Data-Dumper perl-Text-ParseWords perl-Thread-Queue SDL-devel xterm\n                        \n\n##同步poky源代码\n\tgit clone https://git.yoctoproject.org/git/poky\n进入poky目录同步树莓派代码\n\n\tgit clone https://git.yoctoproject.org/git/meta-raspberrypi\n\n##初始化环境\n\tsource oe-init-build-env raspberrypi\n\n说明：指定目录raspberrypi\n\n##编辑配置文件\n\n\tvim ./conf/local.conf \n\n将\n\n\tMACHINE ??= \"raspberrypi2\"\n注释\n\n\t#PACKAGECONFIG_append_pn-qemu-native = \" sdl\"\n\t#PACKAGECONFIG_append_pn-nativesdk-qemu = \" sdl\"\n\t#ASSUME_PROVIDED += \"libsdl-native\"\n\n文件末尾增加\n\tGPU_MEN = \"16\"\n\n说明：16为CPU核数\n\n\tvim ./conf/bblayers.conf\n修改成以下\n\n\tBBLAYERS ?= \" \\\n\t  /home/gsta/liang/poky/meta \\\n\t  /home/gsta/liang/poky/meta-yocto \\\n\t  /home/gsta/liang/poky/meta-yocto-bsp \\\n\t  /home/gsta/liang/poky/meta-raspberrypi \\\n\t  \"\n\t##增加树莓派目录\n\tBBLAYERS_NON_REMOVABLE ?= \" \\\n\t  /home/gsta/liang/poky/meta \\\n\t  /home/gsta/liang/poky/meta-yocto \\\n\t  \"\n\t\n\n##生成\n\tbitbake rpi-basic-image\n\n注意：同步过程很漫长，同步过程中一定要开启git代理和终端代理\n\n整个同步下来大概有18G\n\n\n##错误处理\n\n\tbitbake complains if run as root\n\t\n\troot@eb4b9143265d:/work/build-test01# bitbake -k core-image-sato\n\tERROR:  OE-core's config sanity checker detected a potential misconfiguration.\n\t    Either fix the cause of this error or at your own risk disable the checker (see sanity.conf).\n\t    Following is the list of potential problems / advisories:\n\t\n\t    Do not use Bitbake as root.\n\tERROR: Execution of event handler 'check_sanity_eventhandler' failed\n\tERROR: Command execution failed: Exited with 1\n\t\n\tSummary: There were 3 ERROR messages shown, returning a non-zero exit code.\n\troot@eb4b9143265d:/work/build-test01#\n\tWorkaround:\n\t\n\t$ touch conf/sanity.conf","slug":"poky-raspbian开发","published":1,"updated":"2017-09-21T01:55:27.186Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7ttahvo000jde5lkobz5ep8","content":"<p>##安基本包</p>\n<p>Ubuntu and Debian</p>\n<pre><code>$ sudo apt-get install gawk wget git-core diffstat unzip texinfo gcc-multilib \\\nbuild-essential chrpath socat libsdl1.2-dev xterm\n</code></pre><p>Fedora</p>\n<pre><code>$ sudo dnf install gawk make wget tar bzip2 gzip python3 unzip perl patch \\\ndiffutils diffstat git cpp gcc gcc-c++ glibc-devel texinfo chrpath \\\nccache perl-Data-Dumper perl-Text-ParseWords perl-Thread-Queue perl-bignum socat \\\nfindutils which SDL-devel xterm\n</code></pre><p>OpenSUSE</p>\n<pre><code>$ sudo zypper install python gcc gcc-c++ git chrpath make wget python-xml \\\ndiffstat makeinfo python-curses patch socat libSDL-devel xterm\n</code></pre><p>CentOS</p>\n<pre><code>$ sudo yum install gawk make wget tar bzip2 gzip python unzip perl patch \\\ndiffutils diffstat git cpp gcc gcc-c++ glibc-devel texinfo chrpath socat \\\nperl-Data-Dumper perl-Text-ParseWords perl-Thread-Queue SDL-devel xterm\n</code></pre><p>##同步poky源代码<br>    git clone <a href=\"https://git.yoctoproject.org/git/poky\" target=\"_blank\" rel=\"external\">https://git.yoctoproject.org/git/poky</a><br>进入poky目录同步树莓派代码</p>\n<pre><code>git clone https://git.yoctoproject.org/git/meta-raspberrypi\n</code></pre><p>##初始化环境<br>    source oe-init-build-env raspberrypi</p>\n<p>说明：指定目录raspberrypi</p>\n<p>##编辑配置文件</p>\n<pre><code>vim ./conf/local.conf \n</code></pre><p>将</p>\n<pre><code>MACHINE ??= &quot;raspberrypi2&quot;\n</code></pre><p>注释</p>\n<pre><code>#PACKAGECONFIG_append_pn-qemu-native = &quot; sdl&quot;\n#PACKAGECONFIG_append_pn-nativesdk-qemu = &quot; sdl&quot;\n#ASSUME_PROVIDED += &quot;libsdl-native&quot;\n</code></pre><p>文件末尾增加<br>    GPU_MEN = “16”</p>\n<p>说明：16为CPU核数</p>\n<pre><code>vim ./conf/bblayers.conf\n</code></pre><p>修改成以下</p>\n<pre><code>BBLAYERS ?= &quot; \\\n  /home/gsta/liang/poky/meta \\\n  /home/gsta/liang/poky/meta-yocto \\\n  /home/gsta/liang/poky/meta-yocto-bsp \\\n  /home/gsta/liang/poky/meta-raspberrypi \\\n  &quot;\n##增加树莓派目录\nBBLAYERS_NON_REMOVABLE ?= &quot; \\\n  /home/gsta/liang/poky/meta \\\n  /home/gsta/liang/poky/meta-yocto \\\n  &quot;\n</code></pre><p>##生成<br>    bitbake rpi-basic-image</p>\n<p>注意：同步过程很漫长，同步过程中一定要开启git代理和终端代理</p>\n<p>整个同步下来大概有18G</p>\n<p>##错误处理</p>\n<pre><code>bitbake complains if run as root\n\nroot@eb4b9143265d:/work/build-test01# bitbake -k core-image-sato\nERROR:  OE-core&apos;s config sanity checker detected a potential misconfiguration.\n    Either fix the cause of this error or at your own risk disable the checker (see sanity.conf).\n    Following is the list of potential problems / advisories:\n\n    Do not use Bitbake as root.\nERROR: Execution of event handler &apos;check_sanity_eventhandler&apos; failed\nERROR: Command execution failed: Exited with 1\n\nSummary: There were 3 ERROR messages shown, returning a non-zero exit code.\nroot@eb4b9143265d:/work/build-test01#\nWorkaround:\n\n$ touch conf/sanity.conf\n</code></pre>","excerpt":"","more":"<p>##安基本包</p>\n<p>Ubuntu and Debian</p>\n<pre><code>$ sudo apt-get install gawk wget git-core diffstat unzip texinfo gcc-multilib \\\nbuild-essential chrpath socat libsdl1.2-dev xterm\n</code></pre><p>Fedora</p>\n<pre><code>$ sudo dnf install gawk make wget tar bzip2 gzip python3 unzip perl patch \\\ndiffutils diffstat git cpp gcc gcc-c++ glibc-devel texinfo chrpath \\\nccache perl-Data-Dumper perl-Text-ParseWords perl-Thread-Queue perl-bignum socat \\\nfindutils which SDL-devel xterm\n</code></pre><p>OpenSUSE</p>\n<pre><code>$ sudo zypper install python gcc gcc-c++ git chrpath make wget python-xml \\\ndiffstat makeinfo python-curses patch socat libSDL-devel xterm\n</code></pre><p>CentOS</p>\n<pre><code>$ sudo yum install gawk make wget tar bzip2 gzip python unzip perl patch \\\ndiffutils diffstat git cpp gcc gcc-c++ glibc-devel texinfo chrpath socat \\\nperl-Data-Dumper perl-Text-ParseWords perl-Thread-Queue SDL-devel xterm\n</code></pre><p>##同步poky源代码<br>    git clone <a href=\"https://git.yoctoproject.org/git/poky\">https://git.yoctoproject.org/git/poky</a><br>进入poky目录同步树莓派代码</p>\n<pre><code>git clone https://git.yoctoproject.org/git/meta-raspberrypi\n</code></pre><p>##初始化环境<br>    source oe-init-build-env raspberrypi</p>\n<p>说明：指定目录raspberrypi</p>\n<p>##编辑配置文件</p>\n<pre><code>vim ./conf/local.conf \n</code></pre><p>将</p>\n<pre><code>MACHINE ??= &quot;raspberrypi2&quot;\n</code></pre><p>注释</p>\n<pre><code>#PACKAGECONFIG_append_pn-qemu-native = &quot; sdl&quot;\n#PACKAGECONFIG_append_pn-nativesdk-qemu = &quot; sdl&quot;\n#ASSUME_PROVIDED += &quot;libsdl-native&quot;\n</code></pre><p>文件末尾增加<br>    GPU_MEN = “16”</p>\n<p>说明：16为CPU核数</p>\n<pre><code>vim ./conf/bblayers.conf\n</code></pre><p>修改成以下</p>\n<pre><code>BBLAYERS ?= &quot; \\\n  /home/gsta/liang/poky/meta \\\n  /home/gsta/liang/poky/meta-yocto \\\n  /home/gsta/liang/poky/meta-yocto-bsp \\\n  /home/gsta/liang/poky/meta-raspberrypi \\\n  &quot;\n##增加树莓派目录\nBBLAYERS_NON_REMOVABLE ?= &quot; \\\n  /home/gsta/liang/poky/meta \\\n  /home/gsta/liang/poky/meta-yocto \\\n  &quot;\n</code></pre><p>##生成<br>    bitbake rpi-basic-image</p>\n<p>注意：同步过程很漫长，同步过程中一定要开启git代理和终端代理</p>\n<p>整个同步下来大概有18G</p>\n<p>##错误处理</p>\n<pre><code>bitbake complains if run as root\n\nroot@eb4b9143265d:/work/build-test01# bitbake -k core-image-sato\nERROR:  OE-core&apos;s config sanity checker detected a potential misconfiguration.\n    Either fix the cause of this error or at your own risk disable the checker (see sanity.conf).\n    Following is the list of potential problems / advisories:\n\n    Do not use Bitbake as root.\nERROR: Execution of event handler &apos;check_sanity_eventhandler&apos; failed\nERROR: Command execution failed: Exited with 1\n\nSummary: There were 3 ERROR messages shown, returning a non-zero exit code.\nroot@eb4b9143265d:/work/build-test01#\nWorkaround:\n\n$ touch conf/sanity.conf\n</code></pre>"},{"title":"poky raspbian教程","date":"2017-01-21T09:09:05.000Z","_content":"\n快速链接\n===========\nGit仓库web前端：\n    http://git.yoctoproject.org/cgit/cgit.cgi/meta-raspberrypi/\n邮件列表（yocto邮件列表）：\n    yocto@yoctoproject.org\n问题管理（Github问题）：\n    https://github.com/agherzan/meta-raspberrypi/issues\n\n\n内容：\n=========\n1.说明\nYocto BSP层 - 树莓派\n    2.A. 如何使用它\n    2.B. 图片\n3.可选构建配置\n    3.A. 压缩的部署文件\n    3.B. GPU内存\n    3.C. 添加购买的许可编解码器\n    3.D. 禁用过扫描\n    3.E. 设置超频选项\n    3.F. 视频摄像机支持V4L2驱动程序\n    3.G. 启用离线合成支持\n    3.H. 在控制台支持上启用kgdb\n    3.I. 引导到U-Boot\n    3.J. 图像与Initramfs\n    3.K. 设备树支持\n    3.L. 使能SPI总线\n    3.M. 使能I2C\n    3.N. 启用PiTFT支持\n    3.O. 启用UART支持\n4.额外的应用程序\n    4.A. omxplayer\n5.板卡配置\n    5.A. 音频路由\n源代码和镜像\n7.贡献\n    7.A. 邮件列表\n    7.B. Github问题\n8.维护人员\n\n\n1.说明\n==============\n\n这是RaspberryPi设备的通用硬件特定BSP覆盖。\n\n更多信息，请访问：\n                   http://www.raspberrypi.org/（官方网站）\n\nmeta-raspberrypi的核心BSP部分应该与不同的工作\nOpenEmbedded / Yocto分布和层堆栈，例如：\n* Distro-less（仅适用于OE-Core）。\n* Angstrom。\n* Yocto / Poky（测试的主要焦点）。\n\nYocto BSP层 - 树莓派\n================================\n\n此图层取决于：\n\nURI：git：//git.yoctoproject.org/poky\nbranch：master\n修订：HEAD\n\nURI：git：//git.openembedded.org/meta-openembedded\n层：元 - 元，元多媒体\nbranch：master\n修订：HEAD\n\n2.A. 如何使用它\n==================\n一个。source poky / oe-init-build-env rpi-build\nb。将所需的图层添加到bblayers.conf：\n    -  meta-raspberrypi\nC。将local.conf中的MACHINE设置为所支持的主板之一：\n    -  raspberrypi\n    -  raspberrypi0\n    -  raspberrypi2\n    -  raspberrypi3\nd。bitbake rpi-hwup-image\ne。dd到SD卡生成的sdimg文件（如果使用rpi-sdimg.xz，请使用xzcat）\nF。启动RPI。\n\n2.B. 图片\n-  ===========\n* rpi-hwup-image\n    硬件图像\n* rpi-basic-image\n    基于rpi-hwup-image和一些添加的功能（例如：splash）\n* rpi-test-image\n    基于rpi-basic-image的图像，其中包含了大部分的包\n    层和一些媒体样本。\n\n3.可选构建配置\n=============================\n\n存在一组用户可以影响构建的不同参数的方式。\n我们在这里列出与这个BSP密切相关或特定于它的那些。对于其余的\n请检查：http：//www.yoctoproject.org/docs/latest/ref-manual/ref-manual.html\n\n3.A. 压缩的部署文件\n==============================\n1.在local.conf中覆盖IMAGE_FSTYPES\n    IMAGE_FSTYPES =“tar.bz2 ext3.xz”\n2.在local.conf中覆盖SDIMG_ROOTFS_TYPE\n    SDIMG_ROOTFS_TYPE =“ext3.xz”\n3.在local.conf中覆盖SDIMG_COMPRESSION\n    SDIMG_COMPRESSION =“xz”\n*容纳以上的值到您自己的需要（例如：ext3 / ext4）。\n\n3.B. GPU内存\n===============\n变量：详细信息\nGPU_MEM：GPU内存（兆字节）。设置ARM和之间的内存分割\n              GPU。ARM获取剩余的内存。最小16.默认64。\nGPU_MEM_256：256MB Raspberry Pi的GPU内存（兆字节）。忽略了\n              512MB RP。覆盖gpu_mem。Max 192.默认值未设置。\nGPU_MEM_512：512MB Raspberry Pi的GPU内存（兆字节）。忽略了\n              256MB RP。覆盖gpu_mem。默认值未设置。\nGPU_MEM_1024：1024MB Raspberry Pi的GPU内存（兆字节）。忽略了\n              256MB / 512MB RP。覆盖gpu_mem。最大944.默认值未设置。\n\n3.C. 添加购买的许可证编解码器\n===============================\n要添加您自己的许可，请使用变量KEY_DECODE_MPG2和KEY_DECODE_WVC1\nlocal.conf。例：\nKEY_DECODE_MPG2 =“12345678”\nKEY_DECODE_WVC1 =“12345678”\n您可以提供更多许可证（以逗号分隔）。例：\nKEY_DECODE_WVC1 =“0x12345678,0xabcdabcd，0x87654321”\n\n3.D. 禁用过扫描\n=====================\n默认情况下，GPU在视频输出周围添加一个黑色边框以补偿\n切断图像的一部分的电视。要禁用此设置此变量\nlocal.conf：\nDISABLE_OVERSCAN =“1”\n\n3.E. 设置超频选项\n===========================\nRaspberry PI可以超频。到现在超频到“涡轮\n模式“由raspbery正式支持，不会失去保修。\n检查config.txt有关选项和模式的详细描述。例：\n＃Turbo模式\nARM_FREQ =“1000”\nCORE_FREQ =“500”\nSDRAM_FREQ =“500”\nOVER_VOLTAGE =“6”\n\n3.F. 视频摄像机支持V4L2驱动程序\n=======================================\n设置此变量以启用对摄像机的支持（需要Linux 3.12.4+）\nVIDEO_CAMERA =“1”\n\n3.G. 启用离线合成支持\n=====================================\n设置此变量以启用对dispmanx脱机合成的支持\nDISPMANX_OFFLINE =“1”\n\n这将使固件回退到离线合成\nDispmanx元素。通常，在扫描期间，在线完成合成，\n但不能处理太多的元素。当离线启用时，屏幕外\n缓冲区被分配用于合成。当场景复杂度（数量和大小\n的元素）高，合成将发生离线进入缓冲区。\n\n大力推荐Wayland / Weston。\n\n参见：http：//wayland.freedesktop.org/raspberrypi.html\n\n3.H. 在控制台支持上启用kgdb\n===================================\n要将kdbg控制台（kgdboc）参数添加到内核命令行，\n在local.conf中设置此变量：\nENABLE_KGDB =“1”\n\n3.I. 引导到U-Boot\n===================\n要使u-boot加载内核映像，请在local.conf中设置\nKERNEL_IMAGETYPE =“uImage”\n\n这将使kernel.img是u-boot映像，这将加载uImage。\n默认情况下，kernel.img是实际的内核映像（例如Image）。\n\n3.J. 图像与Initramfs\n=======================\n要构建initramfs映像：\n    *设置这3个内核变量（例如在linux-raspberrypi.inc中）\n        -  kernel_configure_variable BLK_DEV_INITRD y\n        -  kernel_configure_variable INITRAMFS_SOURCE“”\n        -  kernel_configure_variable RD_GZIP y\n    *设置yocto变量（例如在linux-raspberrypi.inc中）\n        - INITRAMFS_IMAGE =“ ”\n        -  INITRAMFS_IMAGE_BUNDLE =“1”\n    *设置meta-rasberrypi变量（例如，在raspberrypi.conf中）\n        -  KERNEL_INITRAMFS =“-initramfs”\n\n3.K. 设备树支持\n=======================\n仅当使用linux-raspberrypi 3.18+时，才支持RPi的设备树\n内核。\n\n    *设置KERNEL_DEVICETREE（在conf / machine / raspberrypi.conf中）\n        - 在内核安装任务之前将预告片添加到内核映像。\n          在创建SDCard映像时，将修改此内核\n          引导分区（作为kernel.img）以及DeviceTree blob（.dtb文件）。\n\n注意：对于内核> = 3.18，始终禁用KERNEL_DEVICETREE\n      较老的内核版本。\n\n3.L. 使能SPI总线\n====================\n当使用设备树内核时，设置此变量以启用SPI总线\nENABLE_SPI_BUS =“1”\n\n3.M. 使能I2C\n===============\n当使用设备树内核时，设置此变量以启用I2C\nENABLE_I2C =“1”\n\n3.N. 启用PiTFT支持\n=======================\n使用PiTFT屏幕的基本支持可以通过添加启用\n下面在local.conf中：\n\nMACHINE_FEATURES + =“pitft”\n  - 这将启用SPI总线和i2c设备树，它也将设置\n    控制台的framebuffer和PiTFT上的x服务器。\n\n注意：为了使这个工作，PiTFT模型的叠加必须构建，\n      添加和指定（dtoverlay = 在config.txt）\n\n以下是在meta-raspberrypi中当前支持的PiTFT模型的列表，\n模型名应该作为MACHINE_FEATURES在local.conf中添加，如下所示：\n    -  MACHINE_FEATURES + =“pitft “。\n\n当前支持的型号列表：\n    -  pitft22\n    -  pitft28r\n\n3.O. 启用UART\n===============\n\n默认情况下，RaspberryPi 1，2和CM将启用UART控制台。\n\nRaspberryPi 3没有默认启用UART，因为这需要一个\n固定核心频率和enable_uart将其设置为最小。某些\n操作 -  60fps h264解码，高质量去隔行 - 这不是\n在ARM上执行可能会受到影响，我们不想这样对用户\n谁不想使用串口。需要串口控制台支持的用户\nRaspberryPi3必须在local.conf中明确设置：ENABLE_UART =“1”。\n\n参考：https：//github.com/raspberrypi/firmware/issues/553\n      https://github.com/RPi-Distro/repo/issues/22\n\n4.额外的应用程序\n=============\n\n4.A. omxplayer\n==============\nomxplayer取决于具有商业许可证的libav。所以为了成为\n能够编译omxplayer你将需要whiteflag商业许可证\n添加到local.conf：\nLICENSE_FLAGS_WHITELIST =“commercial”\n\n5.板卡配置\n======================\n\n5.A. 音频路由\n==================\n加载音频驱动程序\n\n    modprobe snd-bcm2835\n\n测试音频播放\n\n    例如aplay test.wav\n\n请注意，如果没有连接HDMI，则会从3.5英寸插孔连接器发出音频\n如预期。但是，如果连接了HDMI显示器，则没有音频输出\n插孔连接器。\n\n要通过3.5in插孔连接器强制音频路由\n\n    amixer cset numid = 3 1\n\namixer cset的选项有：\n\n    0 =自动\n    1 =耳机\n    2 = hdmi\n\n源代码和镜像\n==========================\n\n主要仓库：\n    git：//git.yoctoproject.org/meta-raspberrypi\n    http://git.yoctoproject.org/git/meta-raspberrypi\n\nGithub镜像：\n    https://github.com/agherzan/meta-raspberrypi\n\nBitbucket镜子：\n    https://bitbucket.org/agherzan/meta-raspberrypi\n\n\n贡献\n===============\n\n7.A. 邮件列表\n=================\n我们使用的主要通信工具是邮件列表：\n    yocto@yoctoproject.org\n    https://lists.yoctoproject.org/listinfo/yocto\n\n随时提出任何问题，但总是在你的电子邮件主题\n与“[meta-raspberrypi]”。这是因为我们使用“yocto”邮件列表和\n不是一个perticular'meta-raspberrypi'邮件列表。\n\n要贡献这个层，你应该发送补丁以供审查\n以上指定的邮件列表。\n补丁应该符合开放补丁指南：\nhttp://www.openembedded.org/wiki/Commit_Patch_Message_Guidelines\n\n\n创建修补程序时，请使用类似：\n\n    git format-patch -s --subject-prefix ='meta-raspberrypi] [PATCH'origin\n\n当发送补丁到邮件列表时，请使用类似：\n\n    git send-email --to yocto@yoctoproject.org \n\n7.B. Github的问题\n==================\n为了管理和跟踪meta-raspberrypi问题，我们使用github问题：\n    https://github.com/agherzan/meta-raspberrypi/issues\n\n如果你推补丁有一个github问题相关联，请提供\n发布号在提交日志就在“签署者”行之前。示例行\n为一个错误：\n    [问题＃13]\n\n\n8.维护人员\n==============\n\n    安德烈Gherzan ","source":"_posts/poky-raspbian教程.md","raw":"---\ntitle: poky raspbian教程\ndate: 2017-01-21 17:09:05\ntags:\n---\n\n快速链接\n===========\nGit仓库web前端：\n    http://git.yoctoproject.org/cgit/cgit.cgi/meta-raspberrypi/\n邮件列表（yocto邮件列表）：\n    yocto@yoctoproject.org\n问题管理（Github问题）：\n    https://github.com/agherzan/meta-raspberrypi/issues\n\n\n内容：\n=========\n1.说明\nYocto BSP层 - 树莓派\n    2.A. 如何使用它\n    2.B. 图片\n3.可选构建配置\n    3.A. 压缩的部署文件\n    3.B. GPU内存\n    3.C. 添加购买的许可编解码器\n    3.D. 禁用过扫描\n    3.E. 设置超频选项\n    3.F. 视频摄像机支持V4L2驱动程序\n    3.G. 启用离线合成支持\n    3.H. 在控制台支持上启用kgdb\n    3.I. 引导到U-Boot\n    3.J. 图像与Initramfs\n    3.K. 设备树支持\n    3.L. 使能SPI总线\n    3.M. 使能I2C\n    3.N. 启用PiTFT支持\n    3.O. 启用UART支持\n4.额外的应用程序\n    4.A. omxplayer\n5.板卡配置\n    5.A. 音频路由\n源代码和镜像\n7.贡献\n    7.A. 邮件列表\n    7.B. Github问题\n8.维护人员\n\n\n1.说明\n==============\n\n这是RaspberryPi设备的通用硬件特定BSP覆盖。\n\n更多信息，请访问：\n                   http://www.raspberrypi.org/（官方网站）\n\nmeta-raspberrypi的核心BSP部分应该与不同的工作\nOpenEmbedded / Yocto分布和层堆栈，例如：\n* Distro-less（仅适用于OE-Core）。\n* Angstrom。\n* Yocto / Poky（测试的主要焦点）。\n\nYocto BSP层 - 树莓派\n================================\n\n此图层取决于：\n\nURI：git：//git.yoctoproject.org/poky\nbranch：master\n修订：HEAD\n\nURI：git：//git.openembedded.org/meta-openembedded\n层：元 - 元，元多媒体\nbranch：master\n修订：HEAD\n\n2.A. 如何使用它\n==================\n一个。source poky / oe-init-build-env rpi-build\nb。将所需的图层添加到bblayers.conf：\n    -  meta-raspberrypi\nC。将local.conf中的MACHINE设置为所支持的主板之一：\n    -  raspberrypi\n    -  raspberrypi0\n    -  raspberrypi2\n    -  raspberrypi3\nd。bitbake rpi-hwup-image\ne。dd到SD卡生成的sdimg文件（如果使用rpi-sdimg.xz，请使用xzcat）\nF。启动RPI。\n\n2.B. 图片\n-  ===========\n* rpi-hwup-image\n    硬件图像\n* rpi-basic-image\n    基于rpi-hwup-image和一些添加的功能（例如：splash）\n* rpi-test-image\n    基于rpi-basic-image的图像，其中包含了大部分的包\n    层和一些媒体样本。\n\n3.可选构建配置\n=============================\n\n存在一组用户可以影响构建的不同参数的方式。\n我们在这里列出与这个BSP密切相关或特定于它的那些。对于其余的\n请检查：http：//www.yoctoproject.org/docs/latest/ref-manual/ref-manual.html\n\n3.A. 压缩的部署文件\n==============================\n1.在local.conf中覆盖IMAGE_FSTYPES\n    IMAGE_FSTYPES =“tar.bz2 ext3.xz”\n2.在local.conf中覆盖SDIMG_ROOTFS_TYPE\n    SDIMG_ROOTFS_TYPE =“ext3.xz”\n3.在local.conf中覆盖SDIMG_COMPRESSION\n    SDIMG_COMPRESSION =“xz”\n*容纳以上的值到您自己的需要（例如：ext3 / ext4）。\n\n3.B. GPU内存\n===============\n变量：详细信息\nGPU_MEM：GPU内存（兆字节）。设置ARM和之间的内存分割\n              GPU。ARM获取剩余的内存。最小16.默认64。\nGPU_MEM_256：256MB Raspberry Pi的GPU内存（兆字节）。忽略了\n              512MB RP。覆盖gpu_mem。Max 192.默认值未设置。\nGPU_MEM_512：512MB Raspberry Pi的GPU内存（兆字节）。忽略了\n              256MB RP。覆盖gpu_mem。默认值未设置。\nGPU_MEM_1024：1024MB Raspberry Pi的GPU内存（兆字节）。忽略了\n              256MB / 512MB RP。覆盖gpu_mem。最大944.默认值未设置。\n\n3.C. 添加购买的许可证编解码器\n===============================\n要添加您自己的许可，请使用变量KEY_DECODE_MPG2和KEY_DECODE_WVC1\nlocal.conf。例：\nKEY_DECODE_MPG2 =“12345678”\nKEY_DECODE_WVC1 =“12345678”\n您可以提供更多许可证（以逗号分隔）。例：\nKEY_DECODE_WVC1 =“0x12345678,0xabcdabcd，0x87654321”\n\n3.D. 禁用过扫描\n=====================\n默认情况下，GPU在视频输出周围添加一个黑色边框以补偿\n切断图像的一部分的电视。要禁用此设置此变量\nlocal.conf：\nDISABLE_OVERSCAN =“1”\n\n3.E. 设置超频选项\n===========================\nRaspberry PI可以超频。到现在超频到“涡轮\n模式“由raspbery正式支持，不会失去保修。\n检查config.txt有关选项和模式的详细描述。例：\n＃Turbo模式\nARM_FREQ =“1000”\nCORE_FREQ =“500”\nSDRAM_FREQ =“500”\nOVER_VOLTAGE =“6”\n\n3.F. 视频摄像机支持V4L2驱动程序\n=======================================\n设置此变量以启用对摄像机的支持（需要Linux 3.12.4+）\nVIDEO_CAMERA =“1”\n\n3.G. 启用离线合成支持\n=====================================\n设置此变量以启用对dispmanx脱机合成的支持\nDISPMANX_OFFLINE =“1”\n\n这将使固件回退到离线合成\nDispmanx元素。通常，在扫描期间，在线完成合成，\n但不能处理太多的元素。当离线启用时，屏幕外\n缓冲区被分配用于合成。当场景复杂度（数量和大小\n的元素）高，合成将发生离线进入缓冲区。\n\n大力推荐Wayland / Weston。\n\n参见：http：//wayland.freedesktop.org/raspberrypi.html\n\n3.H. 在控制台支持上启用kgdb\n===================================\n要将kdbg控制台（kgdboc）参数添加到内核命令行，\n在local.conf中设置此变量：\nENABLE_KGDB =“1”\n\n3.I. 引导到U-Boot\n===================\n要使u-boot加载内核映像，请在local.conf中设置\nKERNEL_IMAGETYPE =“uImage”\n\n这将使kernel.img是u-boot映像，这将加载uImage。\n默认情况下，kernel.img是实际的内核映像（例如Image）。\n\n3.J. 图像与Initramfs\n=======================\n要构建initramfs映像：\n    *设置这3个内核变量（例如在linux-raspberrypi.inc中）\n        -  kernel_configure_variable BLK_DEV_INITRD y\n        -  kernel_configure_variable INITRAMFS_SOURCE“”\n        -  kernel_configure_variable RD_GZIP y\n    *设置yocto变量（例如在linux-raspberrypi.inc中）\n        - INITRAMFS_IMAGE =“ ”\n        -  INITRAMFS_IMAGE_BUNDLE =“1”\n    *设置meta-rasberrypi变量（例如，在raspberrypi.conf中）\n        -  KERNEL_INITRAMFS =“-initramfs”\n\n3.K. 设备树支持\n=======================\n仅当使用linux-raspberrypi 3.18+时，才支持RPi的设备树\n内核。\n\n    *设置KERNEL_DEVICETREE（在conf / machine / raspberrypi.conf中）\n        - 在内核安装任务之前将预告片添加到内核映像。\n          在创建SDCard映像时，将修改此内核\n          引导分区（作为kernel.img）以及DeviceTree blob（.dtb文件）。\n\n注意：对于内核> = 3.18，始终禁用KERNEL_DEVICETREE\n      较老的内核版本。\n\n3.L. 使能SPI总线\n====================\n当使用设备树内核时，设置此变量以启用SPI总线\nENABLE_SPI_BUS =“1”\n\n3.M. 使能I2C\n===============\n当使用设备树内核时，设置此变量以启用I2C\nENABLE_I2C =“1”\n\n3.N. 启用PiTFT支持\n=======================\n使用PiTFT屏幕的基本支持可以通过添加启用\n下面在local.conf中：\n\nMACHINE_FEATURES + =“pitft”\n  - 这将启用SPI总线和i2c设备树，它也将设置\n    控制台的framebuffer和PiTFT上的x服务器。\n\n注意：为了使这个工作，PiTFT模型的叠加必须构建，\n      添加和指定（dtoverlay = 在config.txt）\n\n以下是在meta-raspberrypi中当前支持的PiTFT模型的列表，\n模型名应该作为MACHINE_FEATURES在local.conf中添加，如下所示：\n    -  MACHINE_FEATURES + =“pitft “。\n\n当前支持的型号列表：\n    -  pitft22\n    -  pitft28r\n\n3.O. 启用UART\n===============\n\n默认情况下，RaspberryPi 1，2和CM将启用UART控制台。\n\nRaspberryPi 3没有默认启用UART，因为这需要一个\n固定核心频率和enable_uart将其设置为最小。某些\n操作 -  60fps h264解码，高质量去隔行 - 这不是\n在ARM上执行可能会受到影响，我们不想这样对用户\n谁不想使用串口。需要串口控制台支持的用户\nRaspberryPi3必须在local.conf中明确设置：ENABLE_UART =“1”。\n\n参考：https：//github.com/raspberrypi/firmware/issues/553\n      https://github.com/RPi-Distro/repo/issues/22\n\n4.额外的应用程序\n=============\n\n4.A. omxplayer\n==============\nomxplayer取决于具有商业许可证的libav。所以为了成为\n能够编译omxplayer你将需要whiteflag商业许可证\n添加到local.conf：\nLICENSE_FLAGS_WHITELIST =“commercial”\n\n5.板卡配置\n======================\n\n5.A. 音频路由\n==================\n加载音频驱动程序\n\n    modprobe snd-bcm2835\n\n测试音频播放\n\n    例如aplay test.wav\n\n请注意，如果没有连接HDMI，则会从3.5英寸插孔连接器发出音频\n如预期。但是，如果连接了HDMI显示器，则没有音频输出\n插孔连接器。\n\n要通过3.5in插孔连接器强制音频路由\n\n    amixer cset numid = 3 1\n\namixer cset的选项有：\n\n    0 =自动\n    1 =耳机\n    2 = hdmi\n\n源代码和镜像\n==========================\n\n主要仓库：\n    git：//git.yoctoproject.org/meta-raspberrypi\n    http://git.yoctoproject.org/git/meta-raspberrypi\n\nGithub镜像：\n    https://github.com/agherzan/meta-raspberrypi\n\nBitbucket镜子：\n    https://bitbucket.org/agherzan/meta-raspberrypi\n\n\n贡献\n===============\n\n7.A. 邮件列表\n=================\n我们使用的主要通信工具是邮件列表：\n    yocto@yoctoproject.org\n    https://lists.yoctoproject.org/listinfo/yocto\n\n随时提出任何问题，但总是在你的电子邮件主题\n与“[meta-raspberrypi]”。这是因为我们使用“yocto”邮件列表和\n不是一个perticular'meta-raspberrypi'邮件列表。\n\n要贡献这个层，你应该发送补丁以供审查\n以上指定的邮件列表。\n补丁应该符合开放补丁指南：\nhttp://www.openembedded.org/wiki/Commit_Patch_Message_Guidelines\n\n\n创建修补程序时，请使用类似：\n\n    git format-patch -s --subject-prefix ='meta-raspberrypi] [PATCH'origin\n\n当发送补丁到邮件列表时，请使用类似：\n\n    git send-email --to yocto@yoctoproject.org \n\n7.B. Github的问题\n==================\n为了管理和跟踪meta-raspberrypi问题，我们使用github问题：\n    https://github.com/agherzan/meta-raspberrypi/issues\n\n如果你推补丁有一个github问题相关联，请提供\n发布号在提交日志就在“签署者”行之前。示例行\n为一个错误：\n    [问题＃13]\n\n\n8.维护人员\n==============\n\n    安德烈Gherzan ","slug":"poky-raspbian教程","published":1,"updated":"2017-09-21T01:55:27.190Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7ttahvs000kde5loaeuudvb","content":"<h1 id=\"快速链接\"><a href=\"#快速链接\" class=\"headerlink\" title=\"快速链接\"></a>快速链接</h1><p>Git仓库web前端：<br>    <a href=\"http://git.yoctoproject.org/cgit/cgit.cgi/meta-raspberrypi/\" target=\"_blank\" rel=\"external\">http://git.yoctoproject.org/cgit/cgit.cgi/meta-raspberrypi/</a><br>邮件列表（yocto邮件列表）：<br>    yocto@yoctoproject.org<br>问题管理（Github问题）：<br>    <a href=\"https://github.com/agherzan/meta-raspberrypi/issues\" target=\"_blank\" rel=\"external\">https://github.com/agherzan/meta-raspberrypi/issues</a></p>\n<h1 id=\"内容：\"><a href=\"#内容：\" class=\"headerlink\" title=\"内容：\"></a>内容：</h1><p>1.说明<br>Yocto BSP层 - 树莓派<br>    2.A. 如何使用它<br>    2.B. 图片<br>3.可选构建配置<br>    3.A. 压缩的部署文件<br>    3.B. GPU内存<br>    3.C. 添加购买的许可编解码器<br>    3.D. 禁用过扫描<br>    3.E. 设置超频选项<br>    3.F. 视频摄像机支持V4L2驱动程序<br>    3.G. 启用离线合成支持<br>    3.H. 在控制台支持上启用kgdb<br>    3.I. 引导到U-Boot<br>    3.J. 图像与Initramfs<br>    3.K. 设备树支持<br>    3.L. 使能SPI总线<br>    3.M. 使能I2C<br>    3.N. 启用PiTFT支持<br>    3.O. 启用UART支持<br>4.额外的应用程序<br>    4.A. omxplayer<br>5.板卡配置<br>    5.A. 音频路由<br>源代码和镜像<br>7.贡献<br>    7.A. 邮件列表<br>    7.B. Github问题<br>8.维护人员</p>\n<h1 id=\"1-说明\"><a href=\"#1-说明\" class=\"headerlink\" title=\"1.说明\"></a>1.说明</h1><p>这是RaspberryPi设备的通用硬件特定BSP覆盖。</p>\n<p>更多信息，请访问：<br>                   <a href=\"http://www.raspberrypi.org/（官方网站）\" target=\"_blank\" rel=\"external\">http://www.raspberrypi.org/（官方网站）</a></p>\n<p>meta-raspberrypi的核心BSP部分应该与不同的工作<br>OpenEmbedded / Yocto分布和层堆栈，例如：</p>\n<ul>\n<li>Distro-less（仅适用于OE-Core）。</li>\n<li>Angstrom。</li>\n<li>Yocto / Poky（测试的主要焦点）。</li>\n</ul>\n<h1 id=\"Yocto-BSP层-树莓派\"><a href=\"#Yocto-BSP层-树莓派\" class=\"headerlink\" title=\"Yocto BSP层 - 树莓派\"></a>Yocto BSP层 - 树莓派</h1><p>此图层取决于：</p>\n<p>URI：git：//git.yoctoproject.org/poky<br>branch：master<br>修订：HEAD</p>\n<p>URI：git：//git.openembedded.org/meta-openembedded<br>层：元 - 元，元多媒体<br>branch：master<br>修订：HEAD</p>\n<h1 id=\"2-A-如何使用它\"><a href=\"#2-A-如何使用它\" class=\"headerlink\" title=\"2.A. 如何使用它\"></a>2.A. 如何使用它</h1><p>一个。source poky / oe-init-build-env rpi-build<br>b。将所需的图层添加到bblayers.conf：</p>\n<pre><code>-  meta-raspberrypi\n</code></pre><p>C。将local.conf中的MACHINE设置为所支持的主板之一：</p>\n<pre><code>-  raspberrypi\n-  raspberrypi0\n-  raspberrypi2\n-  raspberrypi3\n</code></pre><p>d。bitbake rpi-hwup-image<br>e。dd到SD卡生成的sdimg文件（如果使用rpi-sdimg.xz，请使用xzcat）<br>F。启动RPI。</p>\n<p>2.B. 图片</p>\n<ul>\n<li>===========</li>\n</ul>\n<ul>\n<li>rpi-hwup-image<br>  硬件图像</li>\n<li>rpi-basic-image<br>  基于rpi-hwup-image和一些添加的功能（例如：splash）</li>\n<li>rpi-test-image<br>  基于rpi-basic-image的图像，其中包含了大部分的包<br>  层和一些媒体样本。</li>\n</ul>\n<h1 id=\"3-可选构建配置\"><a href=\"#3-可选构建配置\" class=\"headerlink\" title=\"3.可选构建配置\"></a>3.可选构建配置</h1><p>存在一组用户可以影响构建的不同参数的方式。<br>我们在这里列出与这个BSP密切相关或特定于它的那些。对于其余的<br>请检查：http：//www.yoctoproject.org/docs/latest/ref-manual/ref-manual.html</p>\n<h1 id=\"3-A-压缩的部署文件\"><a href=\"#3-A-压缩的部署文件\" class=\"headerlink\" title=\"3.A. 压缩的部署文件\"></a>3.A. 压缩的部署文件</h1><p>1.在local.conf中覆盖IMAGE_FSTYPES<br>    IMAGE_FSTYPES =“tar.bz2 ext3.xz”<br>2.在local.conf中覆盖SDIMG_ROOTFS_TYPE<br>    SDIMG_ROOTFS_TYPE =“ext3.xz”<br>3.在local.conf中覆盖SDIMG_COMPRESSION<br>    SDIMG_COMPRESSION =“xz”<br>*容纳以上的值到您自己的需要（例如：ext3 / ext4）。</p>\n<h1 id=\"3-B-GPU内存\"><a href=\"#3-B-GPU内存\" class=\"headerlink\" title=\"3.B. GPU内存\"></a>3.B. GPU内存</h1><p>变量：详细信息<br>GPU_MEM：GPU内存（兆字节）。设置ARM和之间的内存分割<br>              GPU。ARM获取剩余的内存。最小16.默认64。<br>GPU_MEM_256：256MB Raspberry Pi的GPU内存（兆字节）。忽略了<br>              512MB RP。覆盖gpu_mem。Max 192.默认值未设置。<br>GPU_MEM_512：512MB Raspberry Pi的GPU内存（兆字节）。忽略了<br>              256MB RP。覆盖gpu_mem。默认值未设置。<br>GPU_MEM_1024：1024MB Raspberry Pi的GPU内存（兆字节）。忽略了<br>              256MB / 512MB RP。覆盖gpu_mem。最大944.默认值未设置。</p>\n<h1 id=\"3-C-添加购买的许可证编解码器\"><a href=\"#3-C-添加购买的许可证编解码器\" class=\"headerlink\" title=\"3.C. 添加购买的许可证编解码器\"></a>3.C. 添加购买的许可证编解码器</h1><p>要添加您自己的许可，请使用变量KEY_DECODE_MPG2和KEY_DECODE_WVC1<br>local.conf。例：<br>KEY_DECODE_MPG2 =“12345678”<br>KEY_DECODE_WVC1 =“12345678”<br>您可以提供更多许可证（以逗号分隔）。例：<br>KEY_DECODE_WVC1 =“0x12345678,0xabcdabcd，0x87654321”</p>\n<h1 id=\"3-D-禁用过扫描\"><a href=\"#3-D-禁用过扫描\" class=\"headerlink\" title=\"3.D. 禁用过扫描\"></a>3.D. 禁用过扫描</h1><p>默认情况下，GPU在视频输出周围添加一个黑色边框以补偿<br>切断图像的一部分的电视。要禁用此设置此变量<br>local.conf：<br>DISABLE_OVERSCAN =“1”</p>\n<h1 id=\"3-E-设置超频选项\"><a href=\"#3-E-设置超频选项\" class=\"headerlink\" title=\"3.E. 设置超频选项\"></a>3.E. 设置超频选项</h1><p>Raspberry PI可以超频。到现在超频到“涡轮<br>模式“由raspbery正式支持，不会失去保修。<br>检查config.txt有关选项和模式的详细描述。例：<br>＃Turbo模式<br>ARM_FREQ =“1000”<br>CORE_FREQ =“500”<br>SDRAM_FREQ =“500”<br>OVER_VOLTAGE =“6”</p>\n<h1 id=\"3-F-视频摄像机支持V4L2驱动程序\"><a href=\"#3-F-视频摄像机支持V4L2驱动程序\" class=\"headerlink\" title=\"3.F. 视频摄像机支持V4L2驱动程序\"></a>3.F. 视频摄像机支持V4L2驱动程序</h1><p>设置此变量以启用对摄像机的支持（需要Linux 3.12.4+）<br>VIDEO_CAMERA =“1”</p>\n<h1 id=\"3-G-启用离线合成支持\"><a href=\"#3-G-启用离线合成支持\" class=\"headerlink\" title=\"3.G. 启用离线合成支持\"></a>3.G. 启用离线合成支持</h1><p>设置此变量以启用对dispmanx脱机合成的支持<br>DISPMANX_OFFLINE =“1”</p>\n<p>这将使固件回退到离线合成<br>Dispmanx元素。通常，在扫描期间，在线完成合成，<br>但不能处理太多的元素。当离线启用时，屏幕外<br>缓冲区被分配用于合成。当场景复杂度（数量和大小<br>的元素）高，合成将发生离线进入缓冲区。</p>\n<p>大力推荐Wayland / Weston。</p>\n<p>参见：http：//wayland.freedesktop.org/raspberrypi.html</p>\n<h1 id=\"3-H-在控制台支持上启用kgdb\"><a href=\"#3-H-在控制台支持上启用kgdb\" class=\"headerlink\" title=\"3.H. 在控制台支持上启用kgdb\"></a>3.H. 在控制台支持上启用kgdb</h1><p>要将kdbg控制台（kgdboc）参数添加到内核命令行，<br>在local.conf中设置此变量：<br>ENABLE_KGDB =“1”</p>\n<h1 id=\"3-I-引导到U-Boot\"><a href=\"#3-I-引导到U-Boot\" class=\"headerlink\" title=\"3.I. 引导到U-Boot\"></a>3.I. 引导到U-Boot</h1><p>要使u-boot加载内核映像，请在local.conf中设置<br>KERNEL_IMAGETYPE =“uImage”</p>\n<p>这将使kernel.img是u-boot映像，这将加载uImage。<br>默认情况下，kernel.img是实际的内核映像（例如Image）。</p>\n<h1 id=\"3-J-图像与Initramfs\"><a href=\"#3-J-图像与Initramfs\" class=\"headerlink\" title=\"3.J. 图像与Initramfs\"></a>3.J. 图像与Initramfs</h1><p>要构建initramfs映像：<br>    *设置这3个内核变量（例如在linux-raspberrypi.inc中）</p>\n<pre><code>    -  kernel_configure_variable BLK_DEV_INITRD y\n    -  kernel_configure_variable INITRAMFS_SOURCE“”\n    -  kernel_configure_variable RD_GZIP y\n*设置yocto变量（例如在linux-raspberrypi.inc中）\n    - INITRAMFS_IMAGE =“ ”\n    -  INITRAMFS_IMAGE_BUNDLE =“1”\n*设置meta-rasberrypi变量（例如，在raspberrypi.conf中）\n    -  KERNEL_INITRAMFS =“-initramfs”\n</code></pre><h1 id=\"3-K-设备树支持\"><a href=\"#3-K-设备树支持\" class=\"headerlink\" title=\"3.K. 设备树支持\"></a>3.K. 设备树支持</h1><p>仅当使用linux-raspberrypi 3.18+时，才支持RPi的设备树<br>内核。</p>\n<pre><code>*设置KERNEL_DEVICETREE（在conf / machine / raspberrypi.conf中）\n    - 在内核安装任务之前将预告片添加到内核映像。\n      在创建SDCard映像时，将修改此内核\n      引导分区（作为kernel.img）以及DeviceTree blob（.dtb文件）。\n</code></pre><p>注意：对于内核&gt; = 3.18，始终禁用KERNEL_DEVICETREE<br>      较老的内核版本。</p>\n<h1 id=\"3-L-使能SPI总线\"><a href=\"#3-L-使能SPI总线\" class=\"headerlink\" title=\"3.L. 使能SPI总线\"></a>3.L. 使能SPI总线</h1><p>当使用设备树内核时，设置此变量以启用SPI总线<br>ENABLE_SPI_BUS =“1”</p>\n<h1 id=\"3-M-使能I2C\"><a href=\"#3-M-使能I2C\" class=\"headerlink\" title=\"3.M. 使能I2C\"></a>3.M. 使能I2C</h1><p>当使用设备树内核时，设置此变量以启用I2C<br>ENABLE_I2C =“1”</p>\n<h1 id=\"3-N-启用PiTFT支持\"><a href=\"#3-N-启用PiTFT支持\" class=\"headerlink\" title=\"3.N. 启用PiTFT支持\"></a>3.N. 启用PiTFT支持</h1><p>使用PiTFT屏幕的基本支持可以通过添加启用<br>下面在local.conf中：</p>\n<p>MACHINE_FEATURES + =“pitft”</p>\n<ul>\n<li>这将启用SPI总线和i2c设备树，它也将设置<br>控制台的framebuffer和PiTFT上的x服务器。</li>\n</ul>\n<p>注意：为了使这个工作，PiTFT模型的叠加必须构建，<br>      添加和指定（dtoverlay = 在config.txt）</p>\n<p>以下是在meta-raspberrypi中当前支持的PiTFT模型的列表，<br>模型名应该作为MACHINE_FEATURES在local.conf中添加，如下所示：</p>\n<pre><code>-  MACHINE_FEATURES + =“pitft “。\n</code></pre><p>当前支持的型号列表：</p>\n<pre><code>-  pitft22\n-  pitft28r\n</code></pre><h1 id=\"3-O-启用UART\"><a href=\"#3-O-启用UART\" class=\"headerlink\" title=\"3.O. 启用UART\"></a>3.O. 启用UART</h1><p>默认情况下，RaspberryPi 1，2和CM将启用UART控制台。</p>\n<p>RaspberryPi 3没有默认启用UART，因为这需要一个<br>固定核心频率和enable_uart将其设置为最小。某些<br>操作 -  60fps h264解码，高质量去隔行 - 这不是<br>在ARM上执行可能会受到影响，我们不想这样对用户<br>谁不想使用串口。需要串口控制台支持的用户<br>RaspberryPi3必须在local.conf中明确设置：ENABLE_UART =“1”。</p>\n<p>参考：https：//github.com/raspberrypi/firmware/issues/553<br>      <a href=\"https://github.com/RPi-Distro/repo/issues/22\" target=\"_blank\" rel=\"external\">https://github.com/RPi-Distro/repo/issues/22</a></p>\n<h1 id=\"4-额外的应用程序\"><a href=\"#4-额外的应用程序\" class=\"headerlink\" title=\"4.额外的应用程序\"></a>4.额外的应用程序</h1><h1 id=\"4-A-omxplayer\"><a href=\"#4-A-omxplayer\" class=\"headerlink\" title=\"4.A. omxplayer\"></a>4.A. omxplayer</h1><p>omxplayer取决于具有商业许可证的libav。所以为了成为<br>能够编译omxplayer你将需要whiteflag商业许可证<br>添加到local.conf：<br>LICENSE_FLAGS_WHITELIST =“commercial”</p>\n<h1 id=\"5-板卡配置\"><a href=\"#5-板卡配置\" class=\"headerlink\" title=\"5.板卡配置\"></a>5.板卡配置</h1><h1 id=\"5-A-音频路由\"><a href=\"#5-A-音频路由\" class=\"headerlink\" title=\"5.A. 音频路由\"></a>5.A. 音频路由</h1><p>加载音频驱动程序</p>\n<pre><code>modprobe snd-bcm2835\n</code></pre><p>测试音频播放</p>\n<pre><code>例如aplay test.wav\n</code></pre><p>请注意，如果没有连接HDMI，则会从3.5英寸插孔连接器发出音频<br>如预期。但是，如果连接了HDMI显示器，则没有音频输出<br>插孔连接器。</p>\n<p>要通过3.5in插孔连接器强制音频路由</p>\n<pre><code>amixer cset numid = 3 1\n</code></pre><p>amixer cset的选项有：</p>\n<pre><code>0 =自动\n1 =耳机\n2 = hdmi\n</code></pre><h1 id=\"源代码和镜像\"><a href=\"#源代码和镜像\" class=\"headerlink\" title=\"源代码和镜像\"></a>源代码和镜像</h1><p>主要仓库：<br>    git：//git.yoctoproject.org/meta-raspberrypi<br>    <a href=\"http://git.yoctoproject.org/git/meta-raspberrypi\" target=\"_blank\" rel=\"external\">http://git.yoctoproject.org/git/meta-raspberrypi</a></p>\n<p>Github镜像：<br>    <a href=\"https://github.com/agherzan/meta-raspberrypi\" target=\"_blank\" rel=\"external\">https://github.com/agherzan/meta-raspberrypi</a></p>\n<p>Bitbucket镜子：<br>    <a href=\"https://bitbucket.org/agherzan/meta-raspberrypi\" target=\"_blank\" rel=\"external\">https://bitbucket.org/agherzan/meta-raspberrypi</a></p>\n<h1 id=\"贡献\"><a href=\"#贡献\" class=\"headerlink\" title=\"贡献\"></a>贡献</h1><h1 id=\"7-A-邮件列表\"><a href=\"#7-A-邮件列表\" class=\"headerlink\" title=\"7.A. 邮件列表\"></a>7.A. 邮件列表</h1><p>我们使用的主要通信工具是邮件列表：<br>    yocto@yoctoproject.org<br>    <a href=\"https://lists.yoctoproject.org/listinfo/yocto\" target=\"_blank\" rel=\"external\">https://lists.yoctoproject.org/listinfo/yocto</a></p>\n<p>随时提出任何问题，但总是在你的电子邮件主题<br>与“[meta-raspberrypi]”。这是因为我们使用“yocto”邮件列表和<br>不是一个perticular’meta-raspberrypi’邮件列表。</p>\n<p>要贡献这个层，你应该发送补丁以供审查<br>以上指定的邮件列表。<br>补丁应该符合开放补丁指南：<br><a href=\"http://www.openembedded.org/wiki/Commit_Patch_Message_Guidelines\" target=\"_blank\" rel=\"external\">http://www.openembedded.org/wiki/Commit_Patch_Message_Guidelines</a></p>\n<p>创建修补程序时，请使用类似：</p>\n<pre><code>git format-patch -s --subject-prefix =&apos;meta-raspberrypi] [PATCH&apos;origin\n</code></pre><p>当发送补丁到邮件列表时，请使用类似：</p>\n<pre><code>git send-email --to yocto@yoctoproject.org \n</code></pre><h1 id=\"7-B-Github的问题\"><a href=\"#7-B-Github的问题\" class=\"headerlink\" title=\"7.B. Github的问题\"></a>7.B. Github的问题</h1><p>为了管理和跟踪meta-raspberrypi问题，我们使用github问题：<br>    <a href=\"https://github.com/agherzan/meta-raspberrypi/issues\" target=\"_blank\" rel=\"external\">https://github.com/agherzan/meta-raspberrypi/issues</a></p>\n<p>如果你推补丁有一个github问题相关联，请提供<br>发布号在提交日志就在“签署者”行之前。示例行<br>为一个错误：<br>    [问题＃13]</p>\n<h1 id=\"8-维护人员\"><a href=\"#8-维护人员\" class=\"headerlink\" title=\"8.维护人员\"></a>8.维护人员</h1><pre><code>安德烈Gherzan \n</code></pre>","excerpt":"","more":"<h1 id=\"快速链接\"><a href=\"#快速链接\" class=\"headerlink\" title=\"快速链接\"></a>快速链接</h1><p>Git仓库web前端：<br>    <a href=\"http://git.yoctoproject.org/cgit/cgit.cgi/meta-raspberrypi/\">http://git.yoctoproject.org/cgit/cgit.cgi/meta-raspberrypi/</a><br>邮件列表（yocto邮件列表）：<br>    yocto@yoctoproject.org<br>问题管理（Github问题）：<br>    <a href=\"https://github.com/agherzan/meta-raspberrypi/issues\">https://github.com/agherzan/meta-raspberrypi/issues</a></p>\n<h1 id=\"内容：\"><a href=\"#内容：\" class=\"headerlink\" title=\"内容：\"></a>内容：</h1><p>1.说明<br>Yocto BSP层 - 树莓派<br>    2.A. 如何使用它<br>    2.B. 图片<br>3.可选构建配置<br>    3.A. 压缩的部署文件<br>    3.B. GPU内存<br>    3.C. 添加购买的许可编解码器<br>    3.D. 禁用过扫描<br>    3.E. 设置超频选项<br>    3.F. 视频摄像机支持V4L2驱动程序<br>    3.G. 启用离线合成支持<br>    3.H. 在控制台支持上启用kgdb<br>    3.I. 引导到U-Boot<br>    3.J. 图像与Initramfs<br>    3.K. 设备树支持<br>    3.L. 使能SPI总线<br>    3.M. 使能I2C<br>    3.N. 启用PiTFT支持<br>    3.O. 启用UART支持<br>4.额外的应用程序<br>    4.A. omxplayer<br>5.板卡配置<br>    5.A. 音频路由<br>源代码和镜像<br>7.贡献<br>    7.A. 邮件列表<br>    7.B. Github问题<br>8.维护人员</p>\n<h1 id=\"1-说明\"><a href=\"#1-说明\" class=\"headerlink\" title=\"1.说明\"></a>1.说明</h1><p>这是RaspberryPi设备的通用硬件特定BSP覆盖。</p>\n<p>更多信息，请访问：<br>                   <a href=\"http://www.raspberrypi.org/（官方网站）\">http://www.raspberrypi.org/（官方网站）</a></p>\n<p>meta-raspberrypi的核心BSP部分应该与不同的工作<br>OpenEmbedded / Yocto分布和层堆栈，例如：</p>\n<ul>\n<li>Distro-less（仅适用于OE-Core）。</li>\n<li>Angstrom。</li>\n<li>Yocto / Poky（测试的主要焦点）。</li>\n</ul>\n<h1 id=\"Yocto-BSP层-树莓派\"><a href=\"#Yocto-BSP层-树莓派\" class=\"headerlink\" title=\"Yocto BSP层 - 树莓派\"></a>Yocto BSP层 - 树莓派</h1><p>此图层取决于：</p>\n<p>URI：git：//git.yoctoproject.org/poky<br>branch：master<br>修订：HEAD</p>\n<p>URI：git：//git.openembedded.org/meta-openembedded<br>层：元 - 元，元多媒体<br>branch：master<br>修订：HEAD</p>\n<h1 id=\"2-A-如何使用它\"><a href=\"#2-A-如何使用它\" class=\"headerlink\" title=\"2.A. 如何使用它\"></a>2.A. 如何使用它</h1><p>一个。source poky / oe-init-build-env rpi-build<br>b。将所需的图层添加到bblayers.conf：</p>\n<pre><code>-  meta-raspberrypi\n</code></pre><p>C。将local.conf中的MACHINE设置为所支持的主板之一：</p>\n<pre><code>-  raspberrypi\n-  raspberrypi0\n-  raspberrypi2\n-  raspberrypi3\n</code></pre><p>d。bitbake rpi-hwup-image<br>e。dd到SD卡生成的sdimg文件（如果使用rpi-sdimg.xz，请使用xzcat）<br>F。启动RPI。</p>\n<p>2.B. 图片</p>\n<ul>\n<li>===========</li>\n</ul>\n<ul>\n<li>rpi-hwup-image<br>  硬件图像</li>\n<li>rpi-basic-image<br>  基于rpi-hwup-image和一些添加的功能（例如：splash）</li>\n<li>rpi-test-image<br>  基于rpi-basic-image的图像，其中包含了大部分的包<br>  层和一些媒体样本。</li>\n</ul>\n<h1 id=\"3-可选构建配置\"><a href=\"#3-可选构建配置\" class=\"headerlink\" title=\"3.可选构建配置\"></a>3.可选构建配置</h1><p>存在一组用户可以影响构建的不同参数的方式。<br>我们在这里列出与这个BSP密切相关或特定于它的那些。对于其余的<br>请检查：http：//www.yoctoproject.org/docs/latest/ref-manual/ref-manual.html</p>\n<h1 id=\"3-A-压缩的部署文件\"><a href=\"#3-A-压缩的部署文件\" class=\"headerlink\" title=\"3.A. 压缩的部署文件\"></a>3.A. 压缩的部署文件</h1><p>1.在local.conf中覆盖IMAGE_FSTYPES<br>    IMAGE_FSTYPES =“tar.bz2 ext3.xz”<br>2.在local.conf中覆盖SDIMG_ROOTFS_TYPE<br>    SDIMG_ROOTFS_TYPE =“ext3.xz”<br>3.在local.conf中覆盖SDIMG_COMPRESSION<br>    SDIMG_COMPRESSION =“xz”<br>*容纳以上的值到您自己的需要（例如：ext3 / ext4）。</p>\n<h1 id=\"3-B-GPU内存\"><a href=\"#3-B-GPU内存\" class=\"headerlink\" title=\"3.B. GPU内存\"></a>3.B. GPU内存</h1><p>变量：详细信息<br>GPU_MEM：GPU内存（兆字节）。设置ARM和之间的内存分割<br>              GPU。ARM获取剩余的内存。最小16.默认64。<br>GPU_MEM_256：256MB Raspberry Pi的GPU内存（兆字节）。忽略了<br>              512MB RP。覆盖gpu_mem。Max 192.默认值未设置。<br>GPU_MEM_512：512MB Raspberry Pi的GPU内存（兆字节）。忽略了<br>              256MB RP。覆盖gpu_mem。默认值未设置。<br>GPU_MEM_1024：1024MB Raspberry Pi的GPU内存（兆字节）。忽略了<br>              256MB / 512MB RP。覆盖gpu_mem。最大944.默认值未设置。</p>\n<h1 id=\"3-C-添加购买的许可证编解码器\"><a href=\"#3-C-添加购买的许可证编解码器\" class=\"headerlink\" title=\"3.C. 添加购买的许可证编解码器\"></a>3.C. 添加购买的许可证编解码器</h1><p>要添加您自己的许可，请使用变量KEY_DECODE_MPG2和KEY_DECODE_WVC1<br>local.conf。例：<br>KEY_DECODE_MPG2 =“12345678”<br>KEY_DECODE_WVC1 =“12345678”<br>您可以提供更多许可证（以逗号分隔）。例：<br>KEY_DECODE_WVC1 =“0x12345678,0xabcdabcd，0x87654321”</p>\n<h1 id=\"3-D-禁用过扫描\"><a href=\"#3-D-禁用过扫描\" class=\"headerlink\" title=\"3.D. 禁用过扫描\"></a>3.D. 禁用过扫描</h1><p>默认情况下，GPU在视频输出周围添加一个黑色边框以补偿<br>切断图像的一部分的电视。要禁用此设置此变量<br>local.conf：<br>DISABLE_OVERSCAN =“1”</p>\n<h1 id=\"3-E-设置超频选项\"><a href=\"#3-E-设置超频选项\" class=\"headerlink\" title=\"3.E. 设置超频选项\"></a>3.E. 设置超频选项</h1><p>Raspberry PI可以超频。到现在超频到“涡轮<br>模式“由raspbery正式支持，不会失去保修。<br>检查config.txt有关选项和模式的详细描述。例：<br>＃Turbo模式<br>ARM_FREQ =“1000”<br>CORE_FREQ =“500”<br>SDRAM_FREQ =“500”<br>OVER_VOLTAGE =“6”</p>\n<h1 id=\"3-F-视频摄像机支持V4L2驱动程序\"><a href=\"#3-F-视频摄像机支持V4L2驱动程序\" class=\"headerlink\" title=\"3.F. 视频摄像机支持V4L2驱动程序\"></a>3.F. 视频摄像机支持V4L2驱动程序</h1><p>设置此变量以启用对摄像机的支持（需要Linux 3.12.4+）<br>VIDEO_CAMERA =“1”</p>\n<h1 id=\"3-G-启用离线合成支持\"><a href=\"#3-G-启用离线合成支持\" class=\"headerlink\" title=\"3.G. 启用离线合成支持\"></a>3.G. 启用离线合成支持</h1><p>设置此变量以启用对dispmanx脱机合成的支持<br>DISPMANX_OFFLINE =“1”</p>\n<p>这将使固件回退到离线合成<br>Dispmanx元素。通常，在扫描期间，在线完成合成，<br>但不能处理太多的元素。当离线启用时，屏幕外<br>缓冲区被分配用于合成。当场景复杂度（数量和大小<br>的元素）高，合成将发生离线进入缓冲区。</p>\n<p>大力推荐Wayland / Weston。</p>\n<p>参见：http：//wayland.freedesktop.org/raspberrypi.html</p>\n<h1 id=\"3-H-在控制台支持上启用kgdb\"><a href=\"#3-H-在控制台支持上启用kgdb\" class=\"headerlink\" title=\"3.H. 在控制台支持上启用kgdb\"></a>3.H. 在控制台支持上启用kgdb</h1><p>要将kdbg控制台（kgdboc）参数添加到内核命令行，<br>在local.conf中设置此变量：<br>ENABLE_KGDB =“1”</p>\n<h1 id=\"3-I-引导到U-Boot\"><a href=\"#3-I-引导到U-Boot\" class=\"headerlink\" title=\"3.I. 引导到U-Boot\"></a>3.I. 引导到U-Boot</h1><p>要使u-boot加载内核映像，请在local.conf中设置<br>KERNEL_IMAGETYPE =“uImage”</p>\n<p>这将使kernel.img是u-boot映像，这将加载uImage。<br>默认情况下，kernel.img是实际的内核映像（例如Image）。</p>\n<h1 id=\"3-J-图像与Initramfs\"><a href=\"#3-J-图像与Initramfs\" class=\"headerlink\" title=\"3.J. 图像与Initramfs\"></a>3.J. 图像与Initramfs</h1><p>要构建initramfs映像：<br>    *设置这3个内核变量（例如在linux-raspberrypi.inc中）</p>\n<pre><code>    -  kernel_configure_variable BLK_DEV_INITRD y\n    -  kernel_configure_variable INITRAMFS_SOURCE“”\n    -  kernel_configure_variable RD_GZIP y\n*设置yocto变量（例如在linux-raspberrypi.inc中）\n    - INITRAMFS_IMAGE =“ ”\n    -  INITRAMFS_IMAGE_BUNDLE =“1”\n*设置meta-rasberrypi变量（例如，在raspberrypi.conf中）\n    -  KERNEL_INITRAMFS =“-initramfs”\n</code></pre><h1 id=\"3-K-设备树支持\"><a href=\"#3-K-设备树支持\" class=\"headerlink\" title=\"3.K. 设备树支持\"></a>3.K. 设备树支持</h1><p>仅当使用linux-raspberrypi 3.18+时，才支持RPi的设备树<br>内核。</p>\n<pre><code>*设置KERNEL_DEVICETREE（在conf / machine / raspberrypi.conf中）\n    - 在内核安装任务之前将预告片添加到内核映像。\n      在创建SDCard映像时，将修改此内核\n      引导分区（作为kernel.img）以及DeviceTree blob（.dtb文件）。\n</code></pre><p>注意：对于内核&gt; = 3.18，始终禁用KERNEL_DEVICETREE<br>      较老的内核版本。</p>\n<h1 id=\"3-L-使能SPI总线\"><a href=\"#3-L-使能SPI总线\" class=\"headerlink\" title=\"3.L. 使能SPI总线\"></a>3.L. 使能SPI总线</h1><p>当使用设备树内核时，设置此变量以启用SPI总线<br>ENABLE_SPI_BUS =“1”</p>\n<h1 id=\"3-M-使能I2C\"><a href=\"#3-M-使能I2C\" class=\"headerlink\" title=\"3.M. 使能I2C\"></a>3.M. 使能I2C</h1><p>当使用设备树内核时，设置此变量以启用I2C<br>ENABLE_I2C =“1”</p>\n<h1 id=\"3-N-启用PiTFT支持\"><a href=\"#3-N-启用PiTFT支持\" class=\"headerlink\" title=\"3.N. 启用PiTFT支持\"></a>3.N. 启用PiTFT支持</h1><p>使用PiTFT屏幕的基本支持可以通过添加启用<br>下面在local.conf中：</p>\n<p>MACHINE_FEATURES + =“pitft”</p>\n<ul>\n<li>这将启用SPI总线和i2c设备树，它也将设置<br>控制台的framebuffer和PiTFT上的x服务器。</li>\n</ul>\n<p>注意：为了使这个工作，PiTFT模型的叠加必须构建，<br>      添加和指定（dtoverlay = 在config.txt）</p>\n<p>以下是在meta-raspberrypi中当前支持的PiTFT模型的列表，<br>模型名应该作为MACHINE_FEATURES在local.conf中添加，如下所示：</p>\n<pre><code>-  MACHINE_FEATURES + =“pitft “。\n</code></pre><p>当前支持的型号列表：</p>\n<pre><code>-  pitft22\n-  pitft28r\n</code></pre><h1 id=\"3-O-启用UART\"><a href=\"#3-O-启用UART\" class=\"headerlink\" title=\"3.O. 启用UART\"></a>3.O. 启用UART</h1><p>默认情况下，RaspberryPi 1，2和CM将启用UART控制台。</p>\n<p>RaspberryPi 3没有默认启用UART，因为这需要一个<br>固定核心频率和enable_uart将其设置为最小。某些<br>操作 -  60fps h264解码，高质量去隔行 - 这不是<br>在ARM上执行可能会受到影响，我们不想这样对用户<br>谁不想使用串口。需要串口控制台支持的用户<br>RaspberryPi3必须在local.conf中明确设置：ENABLE_UART =“1”。</p>\n<p>参考：https：//github.com/raspberrypi/firmware/issues/553<br>      <a href=\"https://github.com/RPi-Distro/repo/issues/22\">https://github.com/RPi-Distro/repo/issues/22</a></p>\n<h1 id=\"4-额外的应用程序\"><a href=\"#4-额外的应用程序\" class=\"headerlink\" title=\"4.额外的应用程序\"></a>4.额外的应用程序</h1><h1 id=\"4-A-omxplayer\"><a href=\"#4-A-omxplayer\" class=\"headerlink\" title=\"4.A. omxplayer\"></a>4.A. omxplayer</h1><p>omxplayer取决于具有商业许可证的libav。所以为了成为<br>能够编译omxplayer你将需要whiteflag商业许可证<br>添加到local.conf：<br>LICENSE_FLAGS_WHITELIST =“commercial”</p>\n<h1 id=\"5-板卡配置\"><a href=\"#5-板卡配置\" class=\"headerlink\" title=\"5.板卡配置\"></a>5.板卡配置</h1><h1 id=\"5-A-音频路由\"><a href=\"#5-A-音频路由\" class=\"headerlink\" title=\"5.A. 音频路由\"></a>5.A. 音频路由</h1><p>加载音频驱动程序</p>\n<pre><code>modprobe snd-bcm2835\n</code></pre><p>测试音频播放</p>\n<pre><code>例如aplay test.wav\n</code></pre><p>请注意，如果没有连接HDMI，则会从3.5英寸插孔连接器发出音频<br>如预期。但是，如果连接了HDMI显示器，则没有音频输出<br>插孔连接器。</p>\n<p>要通过3.5in插孔连接器强制音频路由</p>\n<pre><code>amixer cset numid = 3 1\n</code></pre><p>amixer cset的选项有：</p>\n<pre><code>0 =自动\n1 =耳机\n2 = hdmi\n</code></pre><h1 id=\"源代码和镜像\"><a href=\"#源代码和镜像\" class=\"headerlink\" title=\"源代码和镜像\"></a>源代码和镜像</h1><p>主要仓库：<br>    git：//git.yoctoproject.org/meta-raspberrypi<br>    <a href=\"http://git.yoctoproject.org/git/meta-raspberrypi\">http://git.yoctoproject.org/git/meta-raspberrypi</a></p>\n<p>Github镜像：<br>    <a href=\"https://github.com/agherzan/meta-raspberrypi\">https://github.com/agherzan/meta-raspberrypi</a></p>\n<p>Bitbucket镜子：<br>    <a href=\"https://bitbucket.org/agherzan/meta-raspberrypi\">https://bitbucket.org/agherzan/meta-raspberrypi</a></p>\n<h1 id=\"贡献\"><a href=\"#贡献\" class=\"headerlink\" title=\"贡献\"></a>贡献</h1><h1 id=\"7-A-邮件列表\"><a href=\"#7-A-邮件列表\" class=\"headerlink\" title=\"7.A. 邮件列表\"></a>7.A. 邮件列表</h1><p>我们使用的主要通信工具是邮件列表：<br>    yocto@yoctoproject.org<br>    <a href=\"https://lists.yoctoproject.org/listinfo/yocto\">https://lists.yoctoproject.org/listinfo/yocto</a></p>\n<p>随时提出任何问题，但总是在你的电子邮件主题<br>与“[meta-raspberrypi]”。这是因为我们使用“yocto”邮件列表和<br>不是一个perticular’meta-raspberrypi’邮件列表。</p>\n<p>要贡献这个层，你应该发送补丁以供审查<br>以上指定的邮件列表。<br>补丁应该符合开放补丁指南：<br><a href=\"http://www.openembedded.org/wiki/Commit_Patch_Message_Guidelines\">http://www.openembedded.org/wiki/Commit_Patch_Message_Guidelines</a></p>\n<p>创建修补程序时，请使用类似：</p>\n<pre><code>git format-patch -s --subject-prefix =&apos;meta-raspberrypi] [PATCH&apos;origin\n</code></pre><p>当发送补丁到邮件列表时，请使用类似：</p>\n<pre><code>git send-email --to yocto@yoctoproject.org \n</code></pre><h1 id=\"7-B-Github的问题\"><a href=\"#7-B-Github的问题\" class=\"headerlink\" title=\"7.B. Github的问题\"></a>7.B. Github的问题</h1><p>为了管理和跟踪meta-raspberrypi问题，我们使用github问题：<br>    <a href=\"https://github.com/agherzan/meta-raspberrypi/issues\">https://github.com/agherzan/meta-raspberrypi/issues</a></p>\n<p>如果你推补丁有一个github问题相关联，请提供<br>发布号在提交日志就在“签署者”行之前。示例行<br>为一个错误：<br>    [问题＃13]</p>\n<h1 id=\"8-维护人员\"><a href=\"#8-维护人员\" class=\"headerlink\" title=\"8.维护人员\"></a>8.维护人员</h1><pre><code>安德烈Gherzan \n</code></pre>"},{"title":"raspbian更新内核","date":"2017-01-21T09:11:13.000Z","_content":"\n\n\n\n##获取升级所需源码\n\n###1)下载地址：\n\n官方网址：[raspberrypi](https://github.com/raspberrypi)\n\n\n`firmware`:树莓派的交叉编译好的二进制内核、模块、库、bootloader\n\n`linux`:内核源码\n\n`tools`:编译内核和其他源码所需的工具——交叉编译器等\n\n我们只需要以上三个文件即可，下面的工程可以了解一下\n\n`documentation`:树莓派离线帮助文档，教你如何使用、部署树莓派（树莓派官方使用教程）\n\n`userland`：arm端用户空间的一些应用库的源码——vc视频硬浮点、EGL、mmal、openVG等\n\n`hats：Hardware Attached on Top`，树莓派 B+型板子的扩展板资料\n\n`maynard`：一个gtk写成的桌面环境\n\n`scratch`：一个简易、可视化编程环境\n\n`noobs`:一个树莓派镜像管理工具，他可以让你在一个树莓派上部署多个镜像\n\n`weston`：一个应用程序\n\n`target_fs`：树莓派最小文件系统，使用busybox制作\n\n`quake3`：雷神之锤3有线开发源码firmwareb\n\n\n\n\n点到所需要下载的工程，左上角选版本，右方有一个download ZIP按钮可直接下载（笔者下载完成后，在Linux中解压提示出错，windows又非常慢切内核建议不要在windows环境解压，所以笔者不建议使用这种办法）\n\n##使用Git下载\n\t$ mkdir raspeberrypi_src\n\t$ cd raspberrypi_src\n\t$ git clone git://github.com/raspberrypi/firmware.git\n\t$ git clone git://github.com/raspberrypi/linux.git\n\t$ git clone git://github.com/raspberrypi/tools.git\n\n会得到三个文件夹：\nfirmware linux tools\n\n##编译、提取内核及其模块\n\n###获得内核配置文件\n在运行的树莓派中运行：\n\n\t$ls /proc/\n\n可看到一个叫config.gz的文件，他是当前的树莓派配置选项记录文件，我们将他拷出，放入我们的内核源码目录树下\n\n\t$cp /proc/config /home/pi\n我们这里使用前面交过的samba拷出并拷入内核源码目录下，不熟悉的人可参考前面文章\n\n在linux内核源码下执行：\n\n\t$zcat config.gz > .config\n\n\n\n##配置、编译内核\n###修改内核源码makefile ARCH类型和编译器路径\n$vi Makefile +195\n找到以上类似代码，改为\n\n\tARCH\t\t?= arm\n\tCROSS_COMPILE\t?= ../tools/arm-bcm2708/arm-bcm2708hardfp-linux-gnueabi/bin/arm-bcm2708hardfp-linux-gnueabi-\n\n###查看、修改配置选项\n\t$make menuconfig\n\n\n如果不做修改，直接选中exit即可（注意使用键盘操作）\n\n###编译内核镜像\n\t$make\n在arch/arm/boot目录下可以看到一个叫zImage的文件，就是我们新的内核\n\n但是树莓派需要另外一种格式的镜像，需要进行处理一下，执行以下命令\n\n\t$cd tools/mkimage\n\n\t$./imagetool-uncompressed.py ../../linux/arch/arm/boot/zImage\n即可在当前文件夹下看到一个叫：kernel.img的文件，就是我们需要的新内核了\n\n###提取modules\n上一步其实不但编译出来了内核的源码，一些模块文件也编译出来了，这里我们提取一下\n\n\t$cd raspberrypi_src\n\t$mkdir modules\n\t$cd linux\n\t$ make modules_install INSTALL_MOD_PATH=../modules\n即可在modules得到我们需要的模块文件\n\n##升级RPi的kernel、Firmware、lib\n将SD卡拔下插在电脑上（可使用读卡器）\n###升级内核\n将新编好的内核拷入SD卡，改名为：kernel_new.img\n打开boot目录下\n找到config.txt文件，加入：kernel=kernel_new.img这一行\n\n###升级boot\n将firmware/boot/目录下 以下文件拷入SD卡boot目录：fbootcode.bin fixup.dat fixup_cd.dat start.elf\n\n###更新vc库及内核modules\n编译出来的modules/lib/modules拷入树莓派文件系统/lib下","source":"_posts/raspbian更新内核.md","raw":"---\ntitle: raspbian更新内核\ndate: 2017-01-21 17:11:13\ntags:\n---\n\n\n\n\n##获取升级所需源码\n\n###1)下载地址：\n\n官方网址：[raspberrypi](https://github.com/raspberrypi)\n\n\n`firmware`:树莓派的交叉编译好的二进制内核、模块、库、bootloader\n\n`linux`:内核源码\n\n`tools`:编译内核和其他源码所需的工具——交叉编译器等\n\n我们只需要以上三个文件即可，下面的工程可以了解一下\n\n`documentation`:树莓派离线帮助文档，教你如何使用、部署树莓派（树莓派官方使用教程）\n\n`userland`：arm端用户空间的一些应用库的源码——vc视频硬浮点、EGL、mmal、openVG等\n\n`hats：Hardware Attached on Top`，树莓派 B+型板子的扩展板资料\n\n`maynard`：一个gtk写成的桌面环境\n\n`scratch`：一个简易、可视化编程环境\n\n`noobs`:一个树莓派镜像管理工具，他可以让你在一个树莓派上部署多个镜像\n\n`weston`：一个应用程序\n\n`target_fs`：树莓派最小文件系统，使用busybox制作\n\n`quake3`：雷神之锤3有线开发源码firmwareb\n\n\n\n\n点到所需要下载的工程，左上角选版本，右方有一个download ZIP按钮可直接下载（笔者下载完成后，在Linux中解压提示出错，windows又非常慢切内核建议不要在windows环境解压，所以笔者不建议使用这种办法）\n\n##使用Git下载\n\t$ mkdir raspeberrypi_src\n\t$ cd raspberrypi_src\n\t$ git clone git://github.com/raspberrypi/firmware.git\n\t$ git clone git://github.com/raspberrypi/linux.git\n\t$ git clone git://github.com/raspberrypi/tools.git\n\n会得到三个文件夹：\nfirmware linux tools\n\n##编译、提取内核及其模块\n\n###获得内核配置文件\n在运行的树莓派中运行：\n\n\t$ls /proc/\n\n可看到一个叫config.gz的文件，他是当前的树莓派配置选项记录文件，我们将他拷出，放入我们的内核源码目录树下\n\n\t$cp /proc/config /home/pi\n我们这里使用前面交过的samba拷出并拷入内核源码目录下，不熟悉的人可参考前面文章\n\n在linux内核源码下执行：\n\n\t$zcat config.gz > .config\n\n\n\n##配置、编译内核\n###修改内核源码makefile ARCH类型和编译器路径\n$vi Makefile +195\n找到以上类似代码，改为\n\n\tARCH\t\t?= arm\n\tCROSS_COMPILE\t?= ../tools/arm-bcm2708/arm-bcm2708hardfp-linux-gnueabi/bin/arm-bcm2708hardfp-linux-gnueabi-\n\n###查看、修改配置选项\n\t$make menuconfig\n\n\n如果不做修改，直接选中exit即可（注意使用键盘操作）\n\n###编译内核镜像\n\t$make\n在arch/arm/boot目录下可以看到一个叫zImage的文件，就是我们新的内核\n\n但是树莓派需要另外一种格式的镜像，需要进行处理一下，执行以下命令\n\n\t$cd tools/mkimage\n\n\t$./imagetool-uncompressed.py ../../linux/arch/arm/boot/zImage\n即可在当前文件夹下看到一个叫：kernel.img的文件，就是我们需要的新内核了\n\n###提取modules\n上一步其实不但编译出来了内核的源码，一些模块文件也编译出来了，这里我们提取一下\n\n\t$cd raspberrypi_src\n\t$mkdir modules\n\t$cd linux\n\t$ make modules_install INSTALL_MOD_PATH=../modules\n即可在modules得到我们需要的模块文件\n\n##升级RPi的kernel、Firmware、lib\n将SD卡拔下插在电脑上（可使用读卡器）\n###升级内核\n将新编好的内核拷入SD卡，改名为：kernel_new.img\n打开boot目录下\n找到config.txt文件，加入：kernel=kernel_new.img这一行\n\n###升级boot\n将firmware/boot/目录下 以下文件拷入SD卡boot目录：fbootcode.bin fixup.dat fixup_cd.dat start.elf\n\n###更新vc库及内核modules\n编译出来的modules/lib/modules拷入树莓派文件系统/lib下","slug":"raspbian更新内核","published":1,"updated":"2017-09-21T01:55:27.190Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7ttahvv000lde5ly7gm94rw","content":"<p>##获取升级所需源码</p>\n<p>###1)下载地址：</p>\n<p>官方网址：<a href=\"https://github.com/raspberrypi\" target=\"_blank\" rel=\"external\">raspberrypi</a></p>\n<p><code>firmware</code>:树莓派的交叉编译好的二进制内核、模块、库、bootloader</p>\n<p><code>linux</code>:内核源码</p>\n<p><code>tools</code>:编译内核和其他源码所需的工具——交叉编译器等</p>\n<p>我们只需要以上三个文件即可，下面的工程可以了解一下</p>\n<p><code>documentation</code>:树莓派离线帮助文档，教你如何使用、部署树莓派（树莓派官方使用教程）</p>\n<p><code>userland</code>：arm端用户空间的一些应用库的源码——vc视频硬浮点、EGL、mmal、openVG等</p>\n<p><code>hats：Hardware Attached on Top</code>，树莓派 B+型板子的扩展板资料</p>\n<p><code>maynard</code>：一个gtk写成的桌面环境</p>\n<p><code>scratch</code>：一个简易、可视化编程环境</p>\n<p><code>noobs</code>:一个树莓派镜像管理工具，他可以让你在一个树莓派上部署多个镜像</p>\n<p><code>weston</code>：一个应用程序</p>\n<p><code>target_fs</code>：树莓派最小文件系统，使用busybox制作</p>\n<p><code>quake3</code>：雷神之锤3有线开发源码firmwareb</p>\n<p>点到所需要下载的工程，左上角选版本，右方有一个download ZIP按钮可直接下载（笔者下载完成后，在Linux中解压提示出错，windows又非常慢切内核建议不要在windows环境解压，所以笔者不建议使用这种办法）</p>\n<p>##使用Git下载<br>    $ mkdir raspeberrypi_src<br>    $ cd raspberrypi_src<br>    $ git clone git://github.com/raspberrypi/firmware.git<br>    $ git clone git://github.com/raspberrypi/linux.git<br>    $ git clone git://github.com/raspberrypi/tools.git</p>\n<p>会得到三个文件夹：<br>firmware linux tools</p>\n<p>##编译、提取内核及其模块</p>\n<p>###获得内核配置文件<br>在运行的树莓派中运行：</p>\n<pre><code>$ls /proc/\n</code></pre><p>可看到一个叫config.gz的文件，他是当前的树莓派配置选项记录文件，我们将他拷出，放入我们的内核源码目录树下</p>\n<pre><code>$cp /proc/config /home/pi\n</code></pre><p>我们这里使用前面交过的samba拷出并拷入内核源码目录下，不熟悉的人可参考前面文章</p>\n<p>在linux内核源码下执行：</p>\n<pre><code>$zcat config.gz &gt; .config\n</code></pre><p>##配置、编译内核</p>\n<p>###修改内核源码makefile ARCH类型和编译器路径<br>$vi Makefile +195<br>找到以上类似代码，改为</p>\n<pre><code>ARCH        ?= arm\nCROSS_COMPILE    ?= ../tools/arm-bcm2708/arm-bcm2708hardfp-linux-gnueabi/bin/arm-bcm2708hardfp-linux-gnueabi-\n</code></pre><p>###查看、修改配置选项<br>    $make menuconfig</p>\n<p>如果不做修改，直接选中exit即可（注意使用键盘操作）</p>\n<p>###编译内核镜像<br>    $make<br>在arch/arm/boot目录下可以看到一个叫zImage的文件，就是我们新的内核</p>\n<p>但是树莓派需要另外一种格式的镜像，需要进行处理一下，执行以下命令</p>\n<pre><code>$cd tools/mkimage\n\n$./imagetool-uncompressed.py ../../linux/arch/arm/boot/zImage\n</code></pre><p>即可在当前文件夹下看到一个叫：kernel.img的文件，就是我们需要的新内核了</p>\n<p>###提取modules<br>上一步其实不但编译出来了内核的源码，一些模块文件也编译出来了，这里我们提取一下</p>\n<pre><code>$cd raspberrypi_src\n$mkdir modules\n$cd linux\n$ make modules_install INSTALL_MOD_PATH=../modules\n</code></pre><p>即可在modules得到我们需要的模块文件</p>\n<p>##升级RPi的kernel、Firmware、lib<br>将SD卡拔下插在电脑上（可使用读卡器）</p>\n<p>###升级内核<br>将新编好的内核拷入SD卡，改名为：kernel_new.img<br>打开boot目录下<br>找到config.txt文件，加入：kernel=kernel_new.img这一行</p>\n<p>###升级boot<br>将firmware/boot/目录下 以下文件拷入SD卡boot目录：fbootcode.bin fixup.dat fixup_cd.dat start.elf</p>\n<p>###更新vc库及内核modules<br>编译出来的modules/lib/modules拷入树莓派文件系统/lib下</p>\n","excerpt":"","more":"<p>##获取升级所需源码</p>\n<p>###1)下载地址：</p>\n<p>官方网址：<a href=\"https://github.com/raspberrypi\">raspberrypi</a></p>\n<p><code>firmware</code>:树莓派的交叉编译好的二进制内核、模块、库、bootloader</p>\n<p><code>linux</code>:内核源码</p>\n<p><code>tools</code>:编译内核和其他源码所需的工具——交叉编译器等</p>\n<p>我们只需要以上三个文件即可，下面的工程可以了解一下</p>\n<p><code>documentation</code>:树莓派离线帮助文档，教你如何使用、部署树莓派（树莓派官方使用教程）</p>\n<p><code>userland</code>：arm端用户空间的一些应用库的源码——vc视频硬浮点、EGL、mmal、openVG等</p>\n<p><code>hats：Hardware Attached on Top</code>，树莓派 B+型板子的扩展板资料</p>\n<p><code>maynard</code>：一个gtk写成的桌面环境</p>\n<p><code>scratch</code>：一个简易、可视化编程环境</p>\n<p><code>noobs</code>:一个树莓派镜像管理工具，他可以让你在一个树莓派上部署多个镜像</p>\n<p><code>weston</code>：一个应用程序</p>\n<p><code>target_fs</code>：树莓派最小文件系统，使用busybox制作</p>\n<p><code>quake3</code>：雷神之锤3有线开发源码firmwareb</p>\n<p>点到所需要下载的工程，左上角选版本，右方有一个download ZIP按钮可直接下载（笔者下载完成后，在Linux中解压提示出错，windows又非常慢切内核建议不要在windows环境解压，所以笔者不建议使用这种办法）</p>\n<p>##使用Git下载<br>    $ mkdir raspeberrypi_src<br>    $ cd raspberrypi_src<br>    $ git clone git://github.com/raspberrypi/firmware.git<br>    $ git clone git://github.com/raspberrypi/linux.git<br>    $ git clone git://github.com/raspberrypi/tools.git</p>\n<p>会得到三个文件夹：<br>firmware linux tools</p>\n<p>##编译、提取内核及其模块</p>\n<p>###获得内核配置文件<br>在运行的树莓派中运行：</p>\n<pre><code>$ls /proc/\n</code></pre><p>可看到一个叫config.gz的文件，他是当前的树莓派配置选项记录文件，我们将他拷出，放入我们的内核源码目录树下</p>\n<pre><code>$cp /proc/config /home/pi\n</code></pre><p>我们这里使用前面交过的samba拷出并拷入内核源码目录下，不熟悉的人可参考前面文章</p>\n<p>在linux内核源码下执行：</p>\n<pre><code>$zcat config.gz &gt; .config\n</code></pre><p>##配置、编译内核</p>\n<p>###修改内核源码makefile ARCH类型和编译器路径<br>$vi Makefile +195<br>找到以上类似代码，改为</p>\n<pre><code>ARCH        ?= arm\nCROSS_COMPILE    ?= ../tools/arm-bcm2708/arm-bcm2708hardfp-linux-gnueabi/bin/arm-bcm2708hardfp-linux-gnueabi-\n</code></pre><p>###查看、修改配置选项<br>    $make menuconfig</p>\n<p>如果不做修改，直接选中exit即可（注意使用键盘操作）</p>\n<p>###编译内核镜像<br>    $make<br>在arch/arm/boot目录下可以看到一个叫zImage的文件，就是我们新的内核</p>\n<p>但是树莓派需要另外一种格式的镜像，需要进行处理一下，执行以下命令</p>\n<pre><code>$cd tools/mkimage\n\n$./imagetool-uncompressed.py ../../linux/arch/arm/boot/zImage\n</code></pre><p>即可在当前文件夹下看到一个叫：kernel.img的文件，就是我们需要的新内核了</p>\n<p>###提取modules<br>上一步其实不但编译出来了内核的源码，一些模块文件也编译出来了，这里我们提取一下</p>\n<pre><code>$cd raspberrypi_src\n$mkdir modules\n$cd linux\n$ make modules_install INSTALL_MOD_PATH=../modules\n</code></pre><p>即可在modules得到我们需要的模块文件</p>\n<p>##升级RPi的kernel、Firmware、lib<br>将SD卡拔下插在电脑上（可使用读卡器）</p>\n<p>###升级内核<br>将新编好的内核拷入SD卡，改名为：kernel_new.img<br>打开boot目录下<br>找到config.txt文件，加入：kernel=kernel_new.img这一行</p>\n<p>###升级boot<br>将firmware/boot/目录下 以下文件拷入SD卡boot目录：fbootcode.bin fixup.dat fixup_cd.dat start.elf</p>\n<p>###更新vc库及内核modules<br>编译出来的modules/lib/modules拷入树莓派文件系统/lib下</p>\n"},{"title":"ubuntu16.04搭建xrdp远程桌面链接","date":"2017-03-12T15:24:34.000Z","_content":"\n\n#说明\n\nxrdp支持xfce4和mate桌面,不支持gnome和ubuntu桌面\n\n由于之前安装xfce4桌面后屏幕上显示一条黑线，所以选择放弃使用xfce4桌面使用mate桌面。\n##安装mate桌面\n\n\tsudo apt-get install mate-core mate-desktop-environment mate-notification-daemon\n\n#安装tightvncserver\n\tsudo apt-get install tightvncserver\n#安装xrdp\n\tsudo apt-get install xrdp\n\n#配置xrdp\n\techo mate-session >~/.xsession\n\tvim /etc/xrdp/startwm.sh\n\t#在./etc/X11/Xsession前插入\n\tmate-session\n\t#重启xrdp\n\tcd /etc/init.d/\n#卸载xrdp和tightvncserver\n\n\tsudo apt-get purge xrdp\n\n\tsudo apt-get purge tightvncserver\n\n\n#要注意地方\n\t一定要先装tightvncserver后装xrdp,不能够装vnc4server，已改为tightvncserver.\n#完成的效果图\n\n![view](http://ohjvpki1b.bkt.clouddn.com/mate_view.png)","source":"_posts/ubuntu16-04搭建xrdp远程桌面链接.md","raw":"---\ntitle: ubuntu16.04搭建xrdp远程桌面链接\ndate: 2017-03-12 23:24:34\ntags:\n---\n\n\n#说明\n\nxrdp支持xfce4和mate桌面,不支持gnome和ubuntu桌面\n\n由于之前安装xfce4桌面后屏幕上显示一条黑线，所以选择放弃使用xfce4桌面使用mate桌面。\n##安装mate桌面\n\n\tsudo apt-get install mate-core mate-desktop-environment mate-notification-daemon\n\n#安装tightvncserver\n\tsudo apt-get install tightvncserver\n#安装xrdp\n\tsudo apt-get install xrdp\n\n#配置xrdp\n\techo mate-session >~/.xsession\n\tvim /etc/xrdp/startwm.sh\n\t#在./etc/X11/Xsession前插入\n\tmate-session\n\t#重启xrdp\n\tcd /etc/init.d/\n#卸载xrdp和tightvncserver\n\n\tsudo apt-get purge xrdp\n\n\tsudo apt-get purge tightvncserver\n\n\n#要注意地方\n\t一定要先装tightvncserver后装xrdp,不能够装vnc4server，已改为tightvncserver.\n#完成的效果图\n\n![view](http://ohjvpki1b.bkt.clouddn.com/mate_view.png)","slug":"ubuntu16-04搭建xrdp远程桌面链接","published":1,"updated":"2017-09-21T01:55:27.190Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7ttahvx000mde5l2bf3iblg","content":"<p>#说明</p>\n<p>xrdp支持xfce4和mate桌面,不支持gnome和ubuntu桌面</p>\n<p>由于之前安装xfce4桌面后屏幕上显示一条黑线，所以选择放弃使用xfce4桌面使用mate桌面。</p>\n<p>##安装mate桌面</p>\n<pre><code>sudo apt-get install mate-core mate-desktop-environment mate-notification-daemon\n</code></pre><p>#安装tightvncserver<br>    sudo apt-get install tightvncserver</p>\n<p>#安装xrdp<br>    sudo apt-get install xrdp</p>\n<p>#配置xrdp<br>    echo mate-session &gt;~/.xsession<br>    vim /etc/xrdp/startwm.sh</p>\n<pre><code>#在./etc/X11/Xsession前插入\nmate-session\n#重启xrdp\ncd /etc/init.d/\n</code></pre><p>#卸载xrdp和tightvncserver</p>\n<pre><code>sudo apt-get purge xrdp\n\nsudo apt-get purge tightvncserver\n</code></pre><p>#要注意地方<br>    一定要先装tightvncserver后装xrdp,不能够装vnc4server，已改为tightvncserver.</p>\n<p>#完成的效果图</p>\n<p><img src=\"http://ohjvpki1b.bkt.clouddn.com/mate_view.png\" alt=\"view\"></p>\n","excerpt":"","more":"<p>#说明</p>\n<p>xrdp支持xfce4和mate桌面,不支持gnome和ubuntu桌面</p>\n<p>由于之前安装xfce4桌面后屏幕上显示一条黑线，所以选择放弃使用xfce4桌面使用mate桌面。</p>\n<p>##安装mate桌面</p>\n<pre><code>sudo apt-get install mate-core mate-desktop-environment mate-notification-daemon\n</code></pre><p>#安装tightvncserver<br>    sudo apt-get install tightvncserver</p>\n<p>#安装xrdp<br>    sudo apt-get install xrdp</p>\n<p>#配置xrdp<br>    echo mate-session &gt;~/.xsession<br>    vim /etc/xrdp/startwm.sh</p>\n<pre><code>#在./etc/X11/Xsession前插入\nmate-session\n#重启xrdp\ncd /etc/init.d/\n</code></pre><p>#卸载xrdp和tightvncserver</p>\n<pre><code>sudo apt-get purge xrdp\n\nsudo apt-get purge tightvncserver\n</code></pre><p>#要注意地方<br>    一定要先装tightvncserver后装xrdp,不能够装vnc4server，已改为tightvncserver.</p>\n<p>#完成的效果图</p>\n<p><img src=\"http://ohjvpki1b.bkt.clouddn.com/mate_view.png\" alt=\"view\"></p>\n"},{"title":"使用ndk编译c可执行程序","date":"2016-12-19T13:30:20.000Z","_content":"##1.创建工程目录\n\n&emsp;在ubuntu系统下搭建好ndk编译环境,创建test目录\n\n\tmkdir test\n在test目录下创建jni目录\n\tcd test\n\tmkdir jni\n\n##2.编写源代码\n\nvim hello-exe.c\n\n\t#include<stdio.h>\n\t\n\tint main(){\n\t printf(\"hello\\n\");\n\t return 0;\n\t}\n\n##3.创建android makefile文件\n\n创建Android.mk和Application.mk文件，在jni目录下\n\nAndroid.mk\n\n\tLOCAL_PATH := $(call my-dir)\n\n\tinclude $(CLEAR_VARS)\n\t\n\tLOCAL_CFLAGS += -fPIE  \n\tLOCAL_LDFLAGS += -fPIE -pie\n\t\n\n\tLOCAL_MODULE\t:=hello-exe\n\t\n\tLOCAL_SRC_FILES\t:=hello-exe.c\n\t\n\tinclude $(BUILD_EXECUTABLE)  \n\nApplication.mk\n\n\tAPP_ABI := all\n\n##说明：\n&emsp;如果将程序拷到sd卡内会出现无法修改程序的可执行权限，可以拷贝到手机内部存储再修改。\n\n如果程序执行的时候提示PIE出错则要在android.mk里面添加以下两段字段\n\n\tLOCAL_CFLAGS += -fPIE  \n\tLOCAL_LDFLAGS += -fPIE -pie\n\n[源程序](http://ohjvpki1b.bkt.clouddn.com/ndk%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91.7z)","source":"_posts/使用ndk编译c可执行程序.md","raw":"---\ntitle: 使用ndk编译c可执行程序\ndate: 2016-12-19 21:30:20\ntags:\n---\n##1.创建工程目录\n\n&emsp;在ubuntu系统下搭建好ndk编译环境,创建test目录\n\n\tmkdir test\n在test目录下创建jni目录\n\tcd test\n\tmkdir jni\n\n##2.编写源代码\n\nvim hello-exe.c\n\n\t#include<stdio.h>\n\t\n\tint main(){\n\t printf(\"hello\\n\");\n\t return 0;\n\t}\n\n##3.创建android makefile文件\n\n创建Android.mk和Application.mk文件，在jni目录下\n\nAndroid.mk\n\n\tLOCAL_PATH := $(call my-dir)\n\n\tinclude $(CLEAR_VARS)\n\t\n\tLOCAL_CFLAGS += -fPIE  \n\tLOCAL_LDFLAGS += -fPIE -pie\n\t\n\n\tLOCAL_MODULE\t:=hello-exe\n\t\n\tLOCAL_SRC_FILES\t:=hello-exe.c\n\t\n\tinclude $(BUILD_EXECUTABLE)  \n\nApplication.mk\n\n\tAPP_ABI := all\n\n##说明：\n&emsp;如果将程序拷到sd卡内会出现无法修改程序的可执行权限，可以拷贝到手机内部存储再修改。\n\n如果程序执行的时候提示PIE出错则要在android.mk里面添加以下两段字段\n\n\tLOCAL_CFLAGS += -fPIE  \n\tLOCAL_LDFLAGS += -fPIE -pie\n\n[源程序](http://ohjvpki1b.bkt.clouddn.com/ndk%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91.7z)","slug":"使用ndk编译c可执行程序","published":1,"updated":"2017-09-21T01:55:27.190Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7ttahvy000nde5l8hf31477","content":"<p>##1.创建工程目录</p>\n<p>&emsp;在ubuntu系统下搭建好ndk编译环境,创建test目录</p>\n<pre><code>mkdir test\n</code></pre><p>在test目录下创建jni目录<br>    cd test<br>    mkdir jni</p>\n<p>##2.编写源代码</p>\n<p>vim hello-exe.c</p>\n<pre><code>#include&lt;stdio.h&gt;\n\nint main(){\n printf(&quot;hello\\n&quot;);\n return 0;\n}\n</code></pre><p>##3.创建android makefile文件</p>\n<p>创建Android.mk和Application.mk文件，在jni目录下</p>\n<p>Android.mk</p>\n<pre><code>LOCAL_PATH := $(call my-dir)\n\ninclude $(CLEAR_VARS)\n\nLOCAL_CFLAGS += -fPIE  \nLOCAL_LDFLAGS += -fPIE -pie\n\n\nLOCAL_MODULE    :=hello-exe\n\nLOCAL_SRC_FILES    :=hello-exe.c\n\ninclude $(BUILD_EXECUTABLE)  \n</code></pre><p>Application.mk</p>\n<pre><code>APP_ABI := all\n</code></pre><p>##说明：<br>&emsp;如果将程序拷到sd卡内会出现无法修改程序的可执行权限，可以拷贝到手机内部存储再修改。</p>\n<p>如果程序执行的时候提示PIE出错则要在android.mk里面添加以下两段字段</p>\n<pre><code>LOCAL_CFLAGS += -fPIE  \nLOCAL_LDFLAGS += -fPIE -pie\n</code></pre><p><a href=\"http://ohjvpki1b.bkt.clouddn.com/ndk%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91.7z\" target=\"_blank\" rel=\"external\">源程序</a></p>\n","excerpt":"","more":"<p>##1.创建工程目录</p>\n<p>&emsp;在ubuntu系统下搭建好ndk编译环境,创建test目录</p>\n<pre><code>mkdir test\n</code></pre><p>在test目录下创建jni目录<br>    cd test<br>    mkdir jni</p>\n<p>##2.编写源代码</p>\n<p>vim hello-exe.c</p>\n<pre><code>#include&lt;stdio.h&gt;\n\nint main(){\n printf(&quot;hello\\n&quot;);\n return 0;\n}\n</code></pre><p>##3.创建android makefile文件</p>\n<p>创建Android.mk和Application.mk文件，在jni目录下</p>\n<p>Android.mk</p>\n<pre><code>LOCAL_PATH := $(call my-dir)\n\ninclude $(CLEAR_VARS)\n\nLOCAL_CFLAGS += -fPIE  \nLOCAL_LDFLAGS += -fPIE -pie\n\n\nLOCAL_MODULE    :=hello-exe\n\nLOCAL_SRC_FILES    :=hello-exe.c\n\ninclude $(BUILD_EXECUTABLE)  \n</code></pre><p>Application.mk</p>\n<pre><code>APP_ABI := all\n</code></pre><p>##说明：<br>&emsp;如果将程序拷到sd卡内会出现无法修改程序的可执行权限，可以拷贝到手机内部存储再修改。</p>\n<p>如果程序执行的时候提示PIE出错则要在android.mk里面添加以下两段字段</p>\n<pre><code>LOCAL_CFLAGS += -fPIE  \nLOCAL_LDFLAGS += -fPIE -pie\n</code></pre><p><a href=\"http://ohjvpki1b.bkt.clouddn.com/ndk%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91.7z\">源程序</a></p>\n"},{"title":"加速android源码编译","date":"2016-12-19T13:28:44.000Z","_content":"## 添加缓存环境变量 :\n在 ~/.bashrc 环境变量文件中 添加 ` export USE_CCACHE=1 `环境变量,  加速随后的编译过程; \n##分配缓存磁盘大小\n为 ccache 指定磁盘中的一部分大小, 用于缓存, 使用` prebuilts/misc/linux-x86/ccache/ccache -M 50G` 命令,大小可以自己设定，20G也可以。\n\n##命令执行位置\n在 Android 源码根目录执行 `prebuilts/misc/linux-x86/ccache/ccache -M 50G` 命令;","source":"_posts/加速android源码编译.md","raw":"---\ntitle: 加速android源码编译\ndate: 2016-12-19 21:28:44\ntags:\n---\n## 添加缓存环境变量 :\n在 ~/.bashrc 环境变量文件中 添加 ` export USE_CCACHE=1 `环境变量,  加速随后的编译过程; \n##分配缓存磁盘大小\n为 ccache 指定磁盘中的一部分大小, 用于缓存, 使用` prebuilts/misc/linux-x86/ccache/ccache -M 50G` 命令,大小可以自己设定，20G也可以。\n\n##命令执行位置\n在 Android 源码根目录执行 `prebuilts/misc/linux-x86/ccache/ccache -M 50G` 命令;","slug":"加速android源码编译","published":1,"updated":"2017-09-21T01:55:27.190Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7ttahvz000ode5l3m8mnar3","content":"<h2 id=\"添加缓存环境变量\"><a href=\"#添加缓存环境变量\" class=\"headerlink\" title=\"添加缓存环境变量 :\"></a>添加缓存环境变量 :</h2><p>在 ~/.bashrc 环境变量文件中 添加 <code>export USE_CCACHE=1</code>环境变量,  加速随后的编译过程; </p>\n<p>##分配缓存磁盘大小<br>为 ccache 指定磁盘中的一部分大小, 用于缓存, 使用<code>prebuilts/misc/linux-x86/ccache/ccache -M 50G</code> 命令,大小可以自己设定，20G也可以。</p>\n<p>##命令执行位置<br>在 Android 源码根目录执行 <code>prebuilts/misc/linux-x86/ccache/ccache -M 50G</code> 命令;</p>\n","excerpt":"","more":"<h2 id=\"添加缓存环境变量\"><a href=\"#添加缓存环境变量\" class=\"headerlink\" title=\"添加缓存环境变量 :\"></a>添加缓存环境变量 :</h2><p>在 ~/.bashrc 环境变量文件中 添加 <code>export USE_CCACHE=1</code>环境变量,  加速随后的编译过程; </p>\n<p>##分配缓存磁盘大小<br>为 ccache 指定磁盘中的一部分大小, 用于缓存, 使用<code>prebuilts/misc/linux-x86/ccache/ccache -M 50G</code> 命令,大小可以自己设定，20G也可以。</p>\n<p>##命令执行位置<br>在 Android 源码根目录执行 <code>prebuilts/misc/linux-x86/ccache/ccache -M 50G</code> 命令;</p>\n"},{"title":"各种Android手机Root方法","date":"2016-12-19T13:21:06.000Z","_content":"##Root的介绍\n\n\n&emsp;谷歌的android系统管理员用户就叫做root，该帐户拥有整个系统至高无上的权利，它可以访问和修改你手机几乎所有的文件，只有root才具备最高级别的管理权限。我们root手机的过程也就是获得手机最高使用权限的过程。同时为了防止不良软件也取得root用户的权限，当我们在root的过程中，还会给系统装一个程序，用来作为运行提示，由用户来决定，是否给予最高权限。这个程序的名字叫做Superuser.apk。当某些程序执行su指令想取得系统最高权限的时候，Superuser就会自动启动，拦截该动作并作出询问，当用户认为该程序可以安全使用的时候，那么我们就选择允许，否则，可以禁止该程序继续取得最高权限。Root的过程其实就是把su文件放到/system/bin/ `Superuser.apk` 放到system/app下面，还需要设置/system/bin/su可以让任意用户可运行，有set uid和set gid的权限。即要在android机器上运行命令：`adb shell chmod 4755 /system/bin/su`。而通常，厂商是不会允许我们随便这么去做的，我们就需要利用操作系统的各种漏洞，来完成这个过程。\n\n特别说明：我们烧机中的Eng版本并没有Root权限\n\n##说明\n&emsp;想手机root必须要在android系统内加入su程序，再安装对su管理的apk程序。\n\n##方法\n&emsp;在手机刷了第三方的`recovery`前提下，通过刷zip的方式刷入`su`和`apk`程序。\n\n##步骤\n\n###去官网下载SuperSU压缩包\n网址[http://www.supersu.com/](http://www.supersu.com/)\n\n可能需要翻墙\n进入该网站后进入download\n\n下载压缩包\n![](http://ohjvpki1b.bkt.clouddn.com/qusirSuperSU.png)\n\n进入recovery，刷入zip文件\n\n![](http://ohjvpki1b.bkt.clouddn.com/qusirrecovery_install_zip.jpg)\n\n","source":"_posts/各种Android手机Root方法.md","raw":"---\ntitle: 各种Android手机Root方法\ndate: 2016-12-19 21:21:06\ntags:\n---\n##Root的介绍\n\n\n&emsp;谷歌的android系统管理员用户就叫做root，该帐户拥有整个系统至高无上的权利，它可以访问和修改你手机几乎所有的文件，只有root才具备最高级别的管理权限。我们root手机的过程也就是获得手机最高使用权限的过程。同时为了防止不良软件也取得root用户的权限，当我们在root的过程中，还会给系统装一个程序，用来作为运行提示，由用户来决定，是否给予最高权限。这个程序的名字叫做Superuser.apk。当某些程序执行su指令想取得系统最高权限的时候，Superuser就会自动启动，拦截该动作并作出询问，当用户认为该程序可以安全使用的时候，那么我们就选择允许，否则，可以禁止该程序继续取得最高权限。Root的过程其实就是把su文件放到/system/bin/ `Superuser.apk` 放到system/app下面，还需要设置/system/bin/su可以让任意用户可运行，有set uid和set gid的权限。即要在android机器上运行命令：`adb shell chmod 4755 /system/bin/su`。而通常，厂商是不会允许我们随便这么去做的，我们就需要利用操作系统的各种漏洞，来完成这个过程。\n\n特别说明：我们烧机中的Eng版本并没有Root权限\n\n##说明\n&emsp;想手机root必须要在android系统内加入su程序，再安装对su管理的apk程序。\n\n##方法\n&emsp;在手机刷了第三方的`recovery`前提下，通过刷zip的方式刷入`su`和`apk`程序。\n\n##步骤\n\n###去官网下载SuperSU压缩包\n网址[http://www.supersu.com/](http://www.supersu.com/)\n\n可能需要翻墙\n进入该网站后进入download\n\n下载压缩包\n![](http://ohjvpki1b.bkt.clouddn.com/qusirSuperSU.png)\n\n进入recovery，刷入zip文件\n\n![](http://ohjvpki1b.bkt.clouddn.com/qusirrecovery_install_zip.jpg)\n\n","slug":"各种Android手机Root方法","published":1,"updated":"2017-09-21T01:55:27.190Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7ttahw2000pde5lire67owc","content":"<p>##Root的介绍</p>\n<p>&emsp;谷歌的android系统管理员用户就叫做root，该帐户拥有整个系统至高无上的权利，它可以访问和修改你手机几乎所有的文件，只有root才具备最高级别的管理权限。我们root手机的过程也就是获得手机最高使用权限的过程。同时为了防止不良软件也取得root用户的权限，当我们在root的过程中，还会给系统装一个程序，用来作为运行提示，由用户来决定，是否给予最高权限。这个程序的名字叫做Superuser.apk。当某些程序执行su指令想取得系统最高权限的时候，Superuser就会自动启动，拦截该动作并作出询问，当用户认为该程序可以安全使用的时候，那么我们就选择允许，否则，可以禁止该程序继续取得最高权限。Root的过程其实就是把su文件放到/system/bin/ <code>Superuser.apk</code> 放到system/app下面，还需要设置/system/bin/su可以让任意用户可运行，有set uid和set gid的权限。即要在android机器上运行命令：<code>adb shell chmod 4755 /system/bin/su</code>。而通常，厂商是不会允许我们随便这么去做的，我们就需要利用操作系统的各种漏洞，来完成这个过程。</p>\n<p>特别说明：我们烧机中的Eng版本并没有Root权限</p>\n<p>##说明<br>&emsp;想手机root必须要在android系统内加入su程序，再安装对su管理的apk程序。</p>\n<p>##方法<br>&emsp;在手机刷了第三方的<code>recovery</code>前提下，通过刷zip的方式刷入<code>su</code>和<code>apk</code>程序。</p>\n<p>##步骤</p>\n<p>###去官网下载SuperSU压缩包<br>网址<a href=\"http://www.supersu.com/\" target=\"_blank\" rel=\"external\">http://www.supersu.com/</a></p>\n<p>可能需要翻墙<br>进入该网站后进入download</p>\n<p>下载压缩包<br><img src=\"http://ohjvpki1b.bkt.clouddn.com/qusirSuperSU.png\" alt=\"\"></p>\n<p>进入recovery，刷入zip文件</p>\n<p><img src=\"http://ohjvpki1b.bkt.clouddn.com/qusirrecovery_install_zip.jpg\" alt=\"\"></p>\n","excerpt":"","more":"<p>##Root的介绍</p>\n<p>&emsp;谷歌的android系统管理员用户就叫做root，该帐户拥有整个系统至高无上的权利，它可以访问和修改你手机几乎所有的文件，只有root才具备最高级别的管理权限。我们root手机的过程也就是获得手机最高使用权限的过程。同时为了防止不良软件也取得root用户的权限，当我们在root的过程中，还会给系统装一个程序，用来作为运行提示，由用户来决定，是否给予最高权限。这个程序的名字叫做Superuser.apk。当某些程序执行su指令想取得系统最高权限的时候，Superuser就会自动启动，拦截该动作并作出询问，当用户认为该程序可以安全使用的时候，那么我们就选择允许，否则，可以禁止该程序继续取得最高权限。Root的过程其实就是把su文件放到/system/bin/ <code>Superuser.apk</code> 放到system/app下面，还需要设置/system/bin/su可以让任意用户可运行，有set uid和set gid的权限。即要在android机器上运行命令：<code>adb shell chmod 4755 /system/bin/su</code>。而通常，厂商是不会允许我们随便这么去做的，我们就需要利用操作系统的各种漏洞，来完成这个过程。</p>\n<p>特别说明：我们烧机中的Eng版本并没有Root权限</p>\n<p>##说明<br>&emsp;想手机root必须要在android系统内加入su程序，再安装对su管理的apk程序。</p>\n<p>##方法<br>&emsp;在手机刷了第三方的<code>recovery</code>前提下，通过刷zip的方式刷入<code>su</code>和<code>apk</code>程序。</p>\n<p>##步骤</p>\n<p>###去官网下载SuperSU压缩包<br>网址<a href=\"http://www.supersu.com/\">http://www.supersu.com/</a></p>\n<p>可能需要翻墙<br>进入该网站后进入download</p>\n<p>下载压缩包<br><img src=\"http://ohjvpki1b.bkt.clouddn.com/qusirSuperSU.png\" alt=\"\"></p>\n<p>进入recovery，刷入zip文件</p>\n<p><img src=\"http://ohjvpki1b.bkt.clouddn.com/qusirrecovery_install_zip.jpg\" alt=\"\"></p>\n"},{"title":"各种开源Android 系统定制","date":"2016-12-19T13:21:36.000Z","_content":"\n#MIUI\n![MIUI](http://ohjvpki1b.bkt.clouddn.com/miui-logo.jpg)\nMIUI是由小米科技开发的Android装置系统。2016年2月24日，MIUI全球用户超过1.7亿。部分开源代码托管在[GitHub](https://github.com/MiCode/)\n\n[官网](www.miui.com)\n\n[国际网站](http://en.miui.com/)\n\n[http://miuiandroid.com/](http://miuiandroid.com/)\n\n#Flyme\n![Flyme](http://ohjvpki1b.bkt.clouddn.com/flyme.jpg)\n\n[Flyme GitHub](https://github.com/FlymeOS)\n\nFlyme OS是由魅族科技开发的基于AOSP或YunOS的设备固件。\n\n[官网](http://www.flymeos.com/)\n\n#AOSP\n![AOSP](http://ohjvpki1b.bkt.clouddn.com/Android-logo-wordmark.png)\n\n\"Android Open-Source Project\"的缩写\n中文意为\"Android 开放源代码项目\"\n\nandroid原生态的系统。\n\n[官网](https://source.android.com/)\n#CyanogenMod\n![CyanogenMod](http://ohjvpki1b.bkt.clouddn.com/Cyanogen-Inc-new-logo.jpg)\n\nCyanogenMod（英语发音：/saɪ.ˈæn.oʊ.ˌdʒɛn.mɒd/），缩写作“CM”，是一个基于Android，供智能手机和平板电脑使用的操作系统固件。它是基于Google发布的Android源码，再加上原创或第三方程式码而开发的开放源代码软件，并使用滚动更新开发模式。\n\n[GitHub](https://github.com/CyanogenMod)\n\n[官网](https://www.cyanogenmod.org/)\n#PAC-ROM\n![PAC-ROM](http://ohjvpki1b.bkt.clouddn.com/banner.png)\n\nPAC - ROM是只读存储器与许多定制选项一起提供了一个纯粹的Android界面。正如它的名字一样，它像偏执狂的Android.\n\n[官网](http://www.pac-rom.com/)\n\n[GitHub](https://github.com/PAC-ROM)","source":"_posts/各种开源Android-系统定制.md","raw":"---\ntitle: 各种开源Android 系统定制\ndate: 2016-12-19 21:21:36\ntags:\n---\n\n#MIUI\n![MIUI](http://ohjvpki1b.bkt.clouddn.com/miui-logo.jpg)\nMIUI是由小米科技开发的Android装置系统。2016年2月24日，MIUI全球用户超过1.7亿。部分开源代码托管在[GitHub](https://github.com/MiCode/)\n\n[官网](www.miui.com)\n\n[国际网站](http://en.miui.com/)\n\n[http://miuiandroid.com/](http://miuiandroid.com/)\n\n#Flyme\n![Flyme](http://ohjvpki1b.bkt.clouddn.com/flyme.jpg)\n\n[Flyme GitHub](https://github.com/FlymeOS)\n\nFlyme OS是由魅族科技开发的基于AOSP或YunOS的设备固件。\n\n[官网](http://www.flymeos.com/)\n\n#AOSP\n![AOSP](http://ohjvpki1b.bkt.clouddn.com/Android-logo-wordmark.png)\n\n\"Android Open-Source Project\"的缩写\n中文意为\"Android 开放源代码项目\"\n\nandroid原生态的系统。\n\n[官网](https://source.android.com/)\n#CyanogenMod\n![CyanogenMod](http://ohjvpki1b.bkt.clouddn.com/Cyanogen-Inc-new-logo.jpg)\n\nCyanogenMod（英语发音：/saɪ.ˈæn.oʊ.ˌdʒɛn.mɒd/），缩写作“CM”，是一个基于Android，供智能手机和平板电脑使用的操作系统固件。它是基于Google发布的Android源码，再加上原创或第三方程式码而开发的开放源代码软件，并使用滚动更新开发模式。\n\n[GitHub](https://github.com/CyanogenMod)\n\n[官网](https://www.cyanogenmod.org/)\n#PAC-ROM\n![PAC-ROM](http://ohjvpki1b.bkt.clouddn.com/banner.png)\n\nPAC - ROM是只读存储器与许多定制选项一起提供了一个纯粹的Android界面。正如它的名字一样，它像偏执狂的Android.\n\n[官网](http://www.pac-rom.com/)\n\n[GitHub](https://github.com/PAC-ROM)","slug":"各种开源Android-系统定制","published":1,"updated":"2017-09-21T01:55:27.190Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7ttahw5000qde5lbf0r2hh1","content":"<p>#MIUI<br><img src=\"http://ohjvpki1b.bkt.clouddn.com/miui-logo.jpg\" alt=\"MIUI\"><br>MIUI是由小米科技开发的Android装置系统。2016年2月24日，MIUI全球用户超过1.7亿。部分开源代码托管在<a href=\"https://github.com/MiCode/\" target=\"_blank\" rel=\"external\">GitHub</a></p>\n<p><a href=\"www.miui.com\">官网</a></p>\n<p><a href=\"http://en.miui.com/\" target=\"_blank\" rel=\"external\">国际网站</a></p>\n<p><a href=\"http://miuiandroid.com/\" target=\"_blank\" rel=\"external\">http://miuiandroid.com/</a></p>\n<p>#Flyme<br><img src=\"http://ohjvpki1b.bkt.clouddn.com/flyme.jpg\" alt=\"Flyme\"></p>\n<p><a href=\"https://github.com/FlymeOS\" target=\"_blank\" rel=\"external\">Flyme GitHub</a></p>\n<p>Flyme OS是由魅族科技开发的基于AOSP或YunOS的设备固件。</p>\n<p><a href=\"http://www.flymeos.com/\" target=\"_blank\" rel=\"external\">官网</a></p>\n<p>#AOSP<br><img src=\"http://ohjvpki1b.bkt.clouddn.com/Android-logo-wordmark.png\" alt=\"AOSP\"></p>\n<p>“Android Open-Source Project”的缩写<br>中文意为”Android 开放源代码项目”</p>\n<p>android原生态的系统。</p>\n<p><a href=\"https://source.android.com/\" target=\"_blank\" rel=\"external\">官网</a></p>\n<p>#CyanogenMod<br><img src=\"http://ohjvpki1b.bkt.clouddn.com/Cyanogen-Inc-new-logo.jpg\" alt=\"CyanogenMod\"></p>\n<p>CyanogenMod（英语发音：/saɪ.ˈæn.oʊ.ˌdʒɛn.mɒd/），缩写作“CM”，是一个基于Android，供智能手机和平板电脑使用的操作系统固件。它是基于Google发布的Android源码，再加上原创或第三方程式码而开发的开放源代码软件，并使用滚动更新开发模式。</p>\n<p><a href=\"https://github.com/CyanogenMod\" target=\"_blank\" rel=\"external\">GitHub</a></p>\n<p><a href=\"https://www.cyanogenmod.org/\" target=\"_blank\" rel=\"external\">官网</a></p>\n<p>#PAC-ROM<br><img src=\"http://ohjvpki1b.bkt.clouddn.com/banner.png\" alt=\"PAC-ROM\"></p>\n<p>PAC - ROM是只读存储器与许多定制选项一起提供了一个纯粹的Android界面。正如它的名字一样，它像偏执狂的Android.</p>\n<p><a href=\"http://www.pac-rom.com/\" target=\"_blank\" rel=\"external\">官网</a></p>\n<p><a href=\"https://github.com/PAC-ROM\" target=\"_blank\" rel=\"external\">GitHub</a></p>\n","excerpt":"","more":"<p>#MIUI<br><img src=\"http://ohjvpki1b.bkt.clouddn.com/miui-logo.jpg\" alt=\"MIUI\"><br>MIUI是由小米科技开发的Android装置系统。2016年2月24日，MIUI全球用户超过1.7亿。部分开源代码托管在<a href=\"https://github.com/MiCode/\">GitHub</a></p>\n<p><a href=\"www.miui.com\">官网</a></p>\n<p><a href=\"http://en.miui.com/\">国际网站</a></p>\n<p><a href=\"http://miuiandroid.com/\">http://miuiandroid.com/</a></p>\n<p>#Flyme<br><img src=\"http://ohjvpki1b.bkt.clouddn.com/flyme.jpg\" alt=\"Flyme\"></p>\n<p><a href=\"https://github.com/FlymeOS\">Flyme GitHub</a></p>\n<p>Flyme OS是由魅族科技开发的基于AOSP或YunOS的设备固件。</p>\n<p><a href=\"http://www.flymeos.com/\">官网</a></p>\n<p>#AOSP<br><img src=\"http://ohjvpki1b.bkt.clouddn.com/Android-logo-wordmark.png\" alt=\"AOSP\"></p>\n<p>“Android Open-Source Project”的缩写<br>中文意为”Android 开放源代码项目”</p>\n<p>android原生态的系统。</p>\n<p><a href=\"https://source.android.com/\">官网</a></p>\n<p>#CyanogenMod<br><img src=\"http://ohjvpki1b.bkt.clouddn.com/Cyanogen-Inc-new-logo.jpg\" alt=\"CyanogenMod\"></p>\n<p>CyanogenMod（英语发音：/saɪ.ˈæn.oʊ.ˌdʒɛn.mɒd/），缩写作“CM”，是一个基于Android，供智能手机和平板电脑使用的操作系统固件。它是基于Google发布的Android源码，再加上原创或第三方程式码而开发的开放源代码软件，并使用滚动更新开发模式。</p>\n<p><a href=\"https://github.com/CyanogenMod\">GitHub</a></p>\n<p><a href=\"https://www.cyanogenmod.org/\">官网</a></p>\n<p>#PAC-ROM<br><img src=\"http://ohjvpki1b.bkt.clouddn.com/banner.png\" alt=\"PAC-ROM\"></p>\n<p>PAC - ROM是只读存储器与许多定制选项一起提供了一个纯粹的Android界面。正如它的名字一样，它像偏执狂的Android.</p>\n<p><a href=\"http://www.pac-rom.com/\">官网</a></p>\n<p><a href=\"https://github.com/PAC-ROM\">GitHub</a></p>\n"},{"title":"同步codeaurora Android源码","date":"2017-01-21T09:12:57.000Z","_content":"\n##说明\ncodeaurora没有被墙\n\n##源码目录\n\n[https://source.codeaurora.org/quic/la/](https://source.codeaurora.org/quic/la/)\n\n##官网\n[https://www.codeaurora.org/](https://www.codeaurora.org/)\n\n##高通源码\n\n[https://wiki.codeaurora.org/xwiki/bin/QAEP/release](https://wiki.codeaurora.org/xwiki/bin/QAEP/release)\n\n##初始化\n\trepo init -u git://codeaurora.org/platform/manifest.git -b release -m LA.BR.1.2.3-10210-8x09.0.xml --repo-url=git://codeaurora.org/tools/repo.git --repo-branch=caf-stable\n\n说明：参数LA.BR.1.2.3-10210-8x09.0.xml可以通过https://wiki.codeaurora.org/xwiki/bin/QAEP/release获得\n\n\n##同步\n\n\trepo sync -j16","source":"_posts/同步codeaurora-Android源码.md","raw":"---\ntitle: 同步codeaurora Android源码\ndate: 2017-01-21 17:12:57\ntags:\n---\n\n##说明\ncodeaurora没有被墙\n\n##源码目录\n\n[https://source.codeaurora.org/quic/la/](https://source.codeaurora.org/quic/la/)\n\n##官网\n[https://www.codeaurora.org/](https://www.codeaurora.org/)\n\n##高通源码\n\n[https://wiki.codeaurora.org/xwiki/bin/QAEP/release](https://wiki.codeaurora.org/xwiki/bin/QAEP/release)\n\n##初始化\n\trepo init -u git://codeaurora.org/platform/manifest.git -b release -m LA.BR.1.2.3-10210-8x09.0.xml --repo-url=git://codeaurora.org/tools/repo.git --repo-branch=caf-stable\n\n说明：参数LA.BR.1.2.3-10210-8x09.0.xml可以通过https://wiki.codeaurora.org/xwiki/bin/QAEP/release获得\n\n\n##同步\n\n\trepo sync -j16","slug":"同步codeaurora-Android源码","published":1,"updated":"2017-09-21T01:55:27.190Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7ttahw8000rde5lpmlna1zc","content":"<p>##说明<br>codeaurora没有被墙</p>\n<p>##源码目录</p>\n<p><a href=\"https://source.codeaurora.org/quic/la/\" target=\"_blank\" rel=\"external\">https://source.codeaurora.org/quic/la/</a></p>\n<p>##官网<br><a href=\"https://www.codeaurora.org/\" target=\"_blank\" rel=\"external\">https://www.codeaurora.org/</a></p>\n<p>##高通源码</p>\n<p><a href=\"https://wiki.codeaurora.org/xwiki/bin/QAEP/release\" target=\"_blank\" rel=\"external\">https://wiki.codeaurora.org/xwiki/bin/QAEP/release</a></p>\n<p>##初始化<br>    repo init -u git://codeaurora.org/platform/manifest.git -b release -m LA.BR.1.2.3-10210-8x09.0.xml –repo-url=git://codeaurora.org/tools/repo.git –repo-branch=caf-stable</p>\n<p>说明：参数LA.BR.1.2.3-10210-8x09.0.xml可以通过<a href=\"https://wiki.codeaurora.org/xwiki/bin/QAEP/release获得\" target=\"_blank\" rel=\"external\">https://wiki.codeaurora.org/xwiki/bin/QAEP/release获得</a></p>\n<p>##同步</p>\n<pre><code>repo sync -j16\n</code></pre>","excerpt":"","more":"<p>##说明<br>codeaurora没有被墙</p>\n<p>##源码目录</p>\n<p><a href=\"https://source.codeaurora.org/quic/la/\">https://source.codeaurora.org/quic/la/</a></p>\n<p>##官网<br><a href=\"https://www.codeaurora.org/\">https://www.codeaurora.org/</a></p>\n<p>##高通源码</p>\n<p><a href=\"https://wiki.codeaurora.org/xwiki/bin/QAEP/release\">https://wiki.codeaurora.org/xwiki/bin/QAEP/release</a></p>\n<p>##初始化<br>    repo init -u git://codeaurora.org/platform/manifest.git -b release -m LA.BR.1.2.3-10210-8x09.0.xml –repo-url=git://codeaurora.org/tools/repo.git –repo-branch=caf-stable</p>\n<p>说明：参数LA.BR.1.2.3-10210-8x09.0.xml可以通过<a href=\"https://wiki.codeaurora.org/xwiki/bin/QAEP/release获得\">https://wiki.codeaurora.org/xwiki/bin/QAEP/release获得</a></p>\n<p>##同步</p>\n<pre><code>repo sync -j16\n</code></pre>"},{"title":"同步webrtc_android源码","date":"2017-03-12T15:22:53.000Z","_content":"\n##下载同步工具\n\n\tgit clone https://chromium.googlesource.com/chromium/tools/depot_tools.git\n##配置环境变量\n\n\t$ export PATH=`pwd`/depot_tools:\"$PATH\"\n\n##开始同步\n\n\tfetch --nohooks webrtc_android\n\tgclient sync","source":"_posts/同步webrtc-android源码.md","raw":"---\ntitle: 同步webrtc_android源码\ndate: 2017-03-12 23:22:53\ntags:\n---\n\n##下载同步工具\n\n\tgit clone https://chromium.googlesource.com/chromium/tools/depot_tools.git\n##配置环境变量\n\n\t$ export PATH=`pwd`/depot_tools:\"$PATH\"\n\n##开始同步\n\n\tfetch --nohooks webrtc_android\n\tgclient sync","slug":"同步webrtc-android源码","published":1,"updated":"2017-09-21T01:55:27.190Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7ttahwa000sde5lx2e9okgg","content":"<p>##下载同步工具</p>\n<pre><code>git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git\n</code></pre><p>##配置环境变量</p>\n<pre><code>$ export PATH=`pwd`/depot_tools:&quot;$PATH&quot;\n</code></pre><p>##开始同步</p>\n<pre><code>fetch --nohooks webrtc_android\ngclient sync\n</code></pre>","excerpt":"","more":"<p>##下载同步工具</p>\n<pre><code>git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git\n</code></pre><p>##配置环境变量</p>\n<pre><code>$ export PATH=`pwd`/depot_tools:&quot;$PATH&quot;\n</code></pre><p>##开始同步</p>\n<pre><code>fetch --nohooks webrtc_android\ngclient sync\n</code></pre>"},{"title":"安装切换openjdk","date":"2016-12-19T13:28:17.000Z","_content":"##安装各种版本openjdk\n\n\tsudo apt-get install openjdk-6-jdk\n\tsudo apt-get install openjdk-7-jdk\n\tsudo apt-get install openjdk-8-jdk\n\n##切换版本\n\tsudo update-alternatives --config java\n\tsudo update-alternatives --config javac","source":"_posts/安装切换openjdk.md","raw":"---\ntitle: 安装切换openjdk\ndate: 2016-12-19 21:28:17\ntags:\n---\n##安装各种版本openjdk\n\n\tsudo apt-get install openjdk-6-jdk\n\tsudo apt-get install openjdk-7-jdk\n\tsudo apt-get install openjdk-8-jdk\n\n##切换版本\n\tsudo update-alternatives --config java\n\tsudo update-alternatives --config javac","slug":"安装切换openjdk","published":1,"updated":"2017-09-21T01:55:27.190Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7ttahwe000tde5ltbc50y9d","content":"<p>##安装各种版本openjdk</p>\n<pre><code>sudo apt-get install openjdk-6-jdk\nsudo apt-get install openjdk-7-jdk\nsudo apt-get install openjdk-8-jdk\n</code></pre><p>##切换版本<br>    sudo update-alternatives –config java<br>    sudo update-alternatives –config javac</p>\n","excerpt":"","more":"<p>##安装各种版本openjdk</p>\n<pre><code>sudo apt-get install openjdk-6-jdk\nsudo apt-get install openjdk-7-jdk\nsudo apt-get install openjdk-8-jdk\n</code></pre><p>##切换版本<br>    sudo update-alternatives –config java<br>    sudo update-alternatives –config javac</p>\n"},{"title":"我对灯光的各种印象","date":"2017-03-12T15:18:00.000Z","_content":"\n&emsp;记得小时候晚上提供的光源是黄色光的那种灯泡，没电的时候用蜡烛或是油灯。那时候的科技还没有现在那么发达，再加上是农村，没有后面发白光的灯管和LED。每个夜晚给我留下的回忆是昏黄色的，跟白色的光芒差很远，可看不太清楚，在那种光的照耀下事物也变成了黄色，给我的感觉不是很好。记得小时候喜欢吃甜食，弄得牙齿不好，经常牙痛。当时我缓解牙痛的办法就是哭，毕竟那个时候的我对疼痛忍耐力有限，再加上在哭的过程中，引起奶奶关心，会弄些蜜糖水给我喝，哭过之后疼痛也逐渐消去。但眼中的泪水还停留在眼角，哭的时候我常对着那黄色的灯泡，调节自己眼睛张开距离来控制我眼角中的泪珠。使那黄色的光芒透过那泪珠产生的折射现象。这时我眼中的那枚灯泡光线四散，像是闪亮的星星，觉得好玩好看。还有一种可能是我小时候哭多了的缘故，最终导致我眼睛下面多了一颗眼泪痣。\n&emsp;随着科技发展，那种发黄色光的灯泡比较少用了，随即而来的是灯管，发出白色的光芒。它的那种光跟白天的太阳光并不会差很远，它可以将事物照得很清楚。对于这种灯光我是比较渴望的，这种渴望是我初中那个时候产生的。由于初中时候需要大量时间学习，也就需要光，追赶着别人。夜自习时间总是感觉太短，回到宿舍又会关灯，且是那种黄色灯泡，看不清楚。为了花更多时间在学习上，经常去快班借光学习。因为其他的班都在晚自习下课之后都关灯，而快班还留有一盏灯管。那时的我渴望自己能够在那白色光芒之下学习，上进的我。\n&emsp;还有一种灯光会带来一种温暖，是那种建筑工地专用高瓦数的照明小灯管。看上去它的体积并没有那种家用灯管那么大，但它发出的光芒比家用灯管要耀眼。由于父亲是装修工人的缘故。自己也时常会呆在工地，玩或是帮忙。每当他加班赶工的时候开启那种灯，天气冷的时候我会靠近那盏灯。它散发出的光之中有股温暖，可能是功率高的缘故，那光以热量形式散发出来。","source":"_posts/我对灯光的各种印象.md","raw":"---\ntitle: 我对灯光的各种印象\ndate: 2017-03-12 23:18:00\ntags:\n---\n\n&emsp;记得小时候晚上提供的光源是黄色光的那种灯泡，没电的时候用蜡烛或是油灯。那时候的科技还没有现在那么发达，再加上是农村，没有后面发白光的灯管和LED。每个夜晚给我留下的回忆是昏黄色的，跟白色的光芒差很远，可看不太清楚，在那种光的照耀下事物也变成了黄色，给我的感觉不是很好。记得小时候喜欢吃甜食，弄得牙齿不好，经常牙痛。当时我缓解牙痛的办法就是哭，毕竟那个时候的我对疼痛忍耐力有限，再加上在哭的过程中，引起奶奶关心，会弄些蜜糖水给我喝，哭过之后疼痛也逐渐消去。但眼中的泪水还停留在眼角，哭的时候我常对着那黄色的灯泡，调节自己眼睛张开距离来控制我眼角中的泪珠。使那黄色的光芒透过那泪珠产生的折射现象。这时我眼中的那枚灯泡光线四散，像是闪亮的星星，觉得好玩好看。还有一种可能是我小时候哭多了的缘故，最终导致我眼睛下面多了一颗眼泪痣。\n&emsp;随着科技发展，那种发黄色光的灯泡比较少用了，随即而来的是灯管，发出白色的光芒。它的那种光跟白天的太阳光并不会差很远，它可以将事物照得很清楚。对于这种灯光我是比较渴望的，这种渴望是我初中那个时候产生的。由于初中时候需要大量时间学习，也就需要光，追赶着别人。夜自习时间总是感觉太短，回到宿舍又会关灯，且是那种黄色灯泡，看不清楚。为了花更多时间在学习上，经常去快班借光学习。因为其他的班都在晚自习下课之后都关灯，而快班还留有一盏灯管。那时的我渴望自己能够在那白色光芒之下学习，上进的我。\n&emsp;还有一种灯光会带来一种温暖，是那种建筑工地专用高瓦数的照明小灯管。看上去它的体积并没有那种家用灯管那么大，但它发出的光芒比家用灯管要耀眼。由于父亲是装修工人的缘故。自己也时常会呆在工地，玩或是帮忙。每当他加班赶工的时候开启那种灯，天气冷的时候我会靠近那盏灯。它散发出的光之中有股温暖，可能是功率高的缘故，那光以热量形式散发出来。","slug":"我对灯光的各种印象","published":1,"updated":"2017-09-21T01:55:27.190Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7ttahwf000ude5lq3gunzn6","content":"<p>&emsp;记得小时候晚上提供的光源是黄色光的那种灯泡，没电的时候用蜡烛或是油灯。那时候的科技还没有现在那么发达，再加上是农村，没有后面发白光的灯管和LED。每个夜晚给我留下的回忆是昏黄色的，跟白色的光芒差很远，可看不太清楚，在那种光的照耀下事物也变成了黄色，给我的感觉不是很好。记得小时候喜欢吃甜食，弄得牙齿不好，经常牙痛。当时我缓解牙痛的办法就是哭，毕竟那个时候的我对疼痛忍耐力有限，再加上在哭的过程中，引起奶奶关心，会弄些蜜糖水给我喝，哭过之后疼痛也逐渐消去。但眼中的泪水还停留在眼角，哭的时候我常对着那黄色的灯泡，调节自己眼睛张开距离来控制我眼角中的泪珠。使那黄色的光芒透过那泪珠产生的折射现象。这时我眼中的那枚灯泡光线四散，像是闪亮的星星，觉得好玩好看。还有一种可能是我小时候哭多了的缘故，最终导致我眼睛下面多了一颗眼泪痣。<br>&emsp;随着科技发展，那种发黄色光的灯泡比较少用了，随即而来的是灯管，发出白色的光芒。它的那种光跟白天的太阳光并不会差很远，它可以将事物照得很清楚。对于这种灯光我是比较渴望的，这种渴望是我初中那个时候产生的。由于初中时候需要大量时间学习，也就需要光，追赶着别人。夜自习时间总是感觉太短，回到宿舍又会关灯，且是那种黄色灯泡，看不清楚。为了花更多时间在学习上，经常去快班借光学习。因为其他的班都在晚自习下课之后都关灯，而快班还留有一盏灯管。那时的我渴望自己能够在那白色光芒之下学习，上进的我。<br>&emsp;还有一种灯光会带来一种温暖，是那种建筑工地专用高瓦数的照明小灯管。看上去它的体积并没有那种家用灯管那么大，但它发出的光芒比家用灯管要耀眼。由于父亲是装修工人的缘故。自己也时常会呆在工地，玩或是帮忙。每当他加班赶工的时候开启那种灯，天气冷的时候我会靠近那盏灯。它散发出的光之中有股温暖，可能是功率高的缘故，那光以热量形式散发出来。</p>\n","excerpt":"","more":"<p>&emsp;记得小时候晚上提供的光源是黄色光的那种灯泡，没电的时候用蜡烛或是油灯。那时候的科技还没有现在那么发达，再加上是农村，没有后面发白光的灯管和LED。每个夜晚给我留下的回忆是昏黄色的，跟白色的光芒差很远，可看不太清楚，在那种光的照耀下事物也变成了黄色，给我的感觉不是很好。记得小时候喜欢吃甜食，弄得牙齿不好，经常牙痛。当时我缓解牙痛的办法就是哭，毕竟那个时候的我对疼痛忍耐力有限，再加上在哭的过程中，引起奶奶关心，会弄些蜜糖水给我喝，哭过之后疼痛也逐渐消去。但眼中的泪水还停留在眼角，哭的时候我常对着那黄色的灯泡，调节自己眼睛张开距离来控制我眼角中的泪珠。使那黄色的光芒透过那泪珠产生的折射现象。这时我眼中的那枚灯泡光线四散，像是闪亮的星星，觉得好玩好看。还有一种可能是我小时候哭多了的缘故，最终导致我眼睛下面多了一颗眼泪痣。<br>&emsp;随着科技发展，那种发黄色光的灯泡比较少用了，随即而来的是灯管，发出白色的光芒。它的那种光跟白天的太阳光并不会差很远，它可以将事物照得很清楚。对于这种灯光我是比较渴望的，这种渴望是我初中那个时候产生的。由于初中时候需要大量时间学习，也就需要光，追赶着别人。夜自习时间总是感觉太短，回到宿舍又会关灯，且是那种黄色灯泡，看不清楚。为了花更多时间在学习上，经常去快班借光学习。因为其他的班都在晚自习下课之后都关灯，而快班还留有一盏灯管。那时的我渴望自己能够在那白色光芒之下学习，上进的我。<br>&emsp;还有一种灯光会带来一种温暖，是那种建筑工地专用高瓦数的照明小灯管。看上去它的体积并没有那种家用灯管那么大，但它发出的光芒比家用灯管要耀眼。由于父亲是装修工人的缘故。自己也时常会呆在工地，玩或是帮忙。每当他加班赶工的时候开启那种灯，天气冷的时候我会靠近那盏灯。它散发出的光之中有股温暖，可能是功率高的缘故，那光以热量形式散发出来。</p>\n"},{"title":"提取刷机包内system.new.dat文件","date":"2016-12-19T13:29:15.000Z","_content":"##转换\n使用python脚本sdat2img来完成\n\n\nsdat2img.py system.transfer.list system.new.dat system.img\n\n输出信息\n\n\tSkipping command erase\n\tCopying 32767 blocks into position 0...\n\tCopying 2 blocks into position 32768...\n\tCopying 2 blocks into position 32809...\n\tCopying 32212 blocks into position 33323...\n\tCopying 2 blocks into position 65536...\n\tCopying 20457 blocks into position 66050...\n\tCopying 2 blocks into position 98304...\n\tCopying 2 blocks into position 98345...\n\tCopying 32212 blocks into position 98859...\n\tCopying 2 blocks into position 131072...\n\t\n\tDone! Output image: /home/hexiongjun/android/CM_XiaoMi4/cm12.1/system.img\n这样就有了我们需要的system.img文件了 \n##挂载img文件\nmount到system目录\n\n\tsudo mount -t ext4 system.img  system","source":"_posts/提取刷机包内system-new-dat文件.md","raw":"---\ntitle: 提取刷机包内system.new.dat文件\ndate: 2016-12-19 21:29:15\ntags:\n---\n##转换\n使用python脚本sdat2img来完成\n\n\nsdat2img.py system.transfer.list system.new.dat system.img\n\n输出信息\n\n\tSkipping command erase\n\tCopying 32767 blocks into position 0...\n\tCopying 2 blocks into position 32768...\n\tCopying 2 blocks into position 32809...\n\tCopying 32212 blocks into position 33323...\n\tCopying 2 blocks into position 65536...\n\tCopying 20457 blocks into position 66050...\n\tCopying 2 blocks into position 98304...\n\tCopying 2 blocks into position 98345...\n\tCopying 32212 blocks into position 98859...\n\tCopying 2 blocks into position 131072...\n\t\n\tDone! Output image: /home/hexiongjun/android/CM_XiaoMi4/cm12.1/system.img\n这样就有了我们需要的system.img文件了 \n##挂载img文件\nmount到system目录\n\n\tsudo mount -t ext4 system.img  system","slug":"提取刷机包内system-new-dat文件","published":1,"updated":"2017-09-21T01:55:27.190Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7ttahwl000vde5l2aumn6s9","content":"<p>##转换<br>使用python脚本sdat2img来完成</p>\n<p>sdat2img.py system.transfer.list system.new.dat system.img</p>\n<p>输出信息</p>\n<pre><code>Skipping command erase\nCopying 32767 blocks into position 0...\nCopying 2 blocks into position 32768...\nCopying 2 blocks into position 32809...\nCopying 32212 blocks into position 33323...\nCopying 2 blocks into position 65536...\nCopying 20457 blocks into position 66050...\nCopying 2 blocks into position 98304...\nCopying 2 blocks into position 98345...\nCopying 32212 blocks into position 98859...\nCopying 2 blocks into position 131072...\n\nDone! Output image: /home/hexiongjun/android/CM_XiaoMi4/cm12.1/system.img\n</code></pre><p>这样就有了我们需要的system.img文件了 </p>\n<p>##挂载img文件<br>mount到system目录</p>\n<pre><code>sudo mount -t ext4 system.img  system\n</code></pre>","excerpt":"","more":"<p>##转换<br>使用python脚本sdat2img来完成</p>\n<p>sdat2img.py system.transfer.list system.new.dat system.img</p>\n<p>输出信息</p>\n<pre><code>Skipping command erase\nCopying 32767 blocks into position 0...\nCopying 2 blocks into position 32768...\nCopying 2 blocks into position 32809...\nCopying 32212 blocks into position 33323...\nCopying 2 blocks into position 65536...\nCopying 20457 blocks into position 66050...\nCopying 2 blocks into position 98304...\nCopying 2 blocks into position 98345...\nCopying 32212 blocks into position 98859...\nCopying 2 blocks into position 131072...\n\nDone! Output image: /home/hexiongjun/android/CM_XiaoMi4/cm12.1/system.img\n</code></pre><p>这样就有了我们需要的system.img文件了 </p>\n<p>##挂载img文件<br>mount到system目录</p>\n<pre><code>sudo mount -t ext4 system.img  system\n</code></pre>"},{"title":"烧写poky生成镜像","date":"2017-01-21T09:11:46.000Z","_content":"\nsudo dd if= rpi-hwup-image-raspberrypi0-20170117030238.rootfsrpi-sdimg of=/dev/sdc bs=4M oflag=sync status=noxfer\n\n说明\nrpi-hwup-image-raspberrypi0-20170117030238.rootfsrpi-sdimg为生成镜像\n\n/dev/sdc\n为SD卡路径\n\n烧写完成之后\n要用串口看调试，因为很多东西没有安装配置，无法输出到显示，默认账号root  没有密码","source":"_posts/烧写poky生成镜像.md","raw":"---\ntitle: 烧写poky生成镜像\ndate: 2017-01-21 17:11:46\ntags:\n---\n\nsudo dd if= rpi-hwup-image-raspberrypi0-20170117030238.rootfsrpi-sdimg of=/dev/sdc bs=4M oflag=sync status=noxfer\n\n说明\nrpi-hwup-image-raspberrypi0-20170117030238.rootfsrpi-sdimg为生成镜像\n\n/dev/sdc\n为SD卡路径\n\n烧写完成之后\n要用串口看调试，因为很多东西没有安装配置，无法输出到显示，默认账号root  没有密码","slug":"烧写poky生成镜像","published":1,"updated":"2017-09-21T01:55:27.190Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7ttahwm000wde5lhkb4qgpy","content":"<p>sudo dd if= rpi-hwup-image-raspberrypi0-20170117030238.rootfsrpi-sdimg of=/dev/sdc bs=4M oflag=sync status=noxfer</p>\n<p>说明<br>rpi-hwup-image-raspberrypi0-20170117030238.rootfsrpi-sdimg为生成镜像</p>\n<p>/dev/sdc<br>为SD卡路径</p>\n<p>烧写完成之后<br>要用串口看调试，因为很多东西没有安装配置，无法输出到显示，默认账号root  没有密码</p>\n","excerpt":"","more":"<p>sudo dd if= rpi-hwup-image-raspberrypi0-20170117030238.rootfsrpi-sdimg of=/dev/sdc bs=4M oflag=sync status=noxfer</p>\n<p>说明<br>rpi-hwup-image-raspberrypi0-20170117030238.rootfsrpi-sdimg为生成镜像</p>\n<p>/dev/sdc<br>为SD卡路径</p>\n<p>烧写完成之后<br>要用串口看调试，因为很多东西没有安装配置，无法输出到显示，默认账号root  没有密码</p>\n"},{"title":"用open_gapps安装google play","date":"2016-12-19T13:22:17.000Z","_content":"\n\n##说明\n\n&emsp;一个开放源码脚本自动生成最新的谷歌应用程序包。对整个google play 程序框架的打包，包括一些google官方的程序。对于阉割了google ply用户来说是一个不错的选择。\n\n##使用\n\n[下载网址](http://opengapps.org/)\n\n[GitHub](https://github.com/opengapps/opengapps)\n\n###通过压缩包安装\n\n选择对应android版本cpu架构和对应大小\n\n![opengapps](http://ohjvpki1b.bkt.clouddn.com/opengapps.png)\n\n下载压缩包后，手机进入recovery模式刷入zip刷机包。\n\n###通过apk安装\n\n下载apk安装到手机\n\n![opengapps_app](http://ohjvpki1b.bkt.clouddn.com/opengapps_app.png)","source":"_posts/用open-gapps安装google-play.md","raw":"---\ntitle: 用open_gapps安装google play\ndate: 2016-12-19 21:22:17\ntags:\n---\n\n\n##说明\n\n&emsp;一个开放源码脚本自动生成最新的谷歌应用程序包。对整个google play 程序框架的打包，包括一些google官方的程序。对于阉割了google ply用户来说是一个不错的选择。\n\n##使用\n\n[下载网址](http://opengapps.org/)\n\n[GitHub](https://github.com/opengapps/opengapps)\n\n###通过压缩包安装\n\n选择对应android版本cpu架构和对应大小\n\n![opengapps](http://ohjvpki1b.bkt.clouddn.com/opengapps.png)\n\n下载压缩包后，手机进入recovery模式刷入zip刷机包。\n\n###通过apk安装\n\n下载apk安装到手机\n\n![opengapps_app](http://ohjvpki1b.bkt.clouddn.com/opengapps_app.png)","slug":"用open-gapps安装google-play","published":1,"updated":"2017-09-21T01:55:27.190Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7ttahwp000xde5le9f7rgt7","content":"<p>##说明</p>\n<p>&emsp;一个开放源码脚本自动生成最新的谷歌应用程序包。对整个google play 程序框架的打包，包括一些google官方的程序。对于阉割了google ply用户来说是一个不错的选择。</p>\n<p>##使用</p>\n<p><a href=\"http://opengapps.org/\" target=\"_blank\" rel=\"external\">下载网址</a></p>\n<p><a href=\"https://github.com/opengapps/opengapps\" target=\"_blank\" rel=\"external\">GitHub</a></p>\n<p>###通过压缩包安装</p>\n<p>选择对应android版本cpu架构和对应大小</p>\n<p><img src=\"http://ohjvpki1b.bkt.clouddn.com/opengapps.png\" alt=\"opengapps\"></p>\n<p>下载压缩包后，手机进入recovery模式刷入zip刷机包。</p>\n<p>###通过apk安装</p>\n<p>下载apk安装到手机</p>\n<p><img src=\"http://ohjvpki1b.bkt.clouddn.com/opengapps_app.png\" alt=\"opengapps_app\"></p>\n","excerpt":"","more":"<p>##说明</p>\n<p>&emsp;一个开放源码脚本自动生成最新的谷歌应用程序包。对整个google play 程序框架的打包，包括一些google官方的程序。对于阉割了google ply用户来说是一个不错的选择。</p>\n<p>##使用</p>\n<p><a href=\"http://opengapps.org/\">下载网址</a></p>\n<p><a href=\"https://github.com/opengapps/opengapps\">GitHub</a></p>\n<p>###通过压缩包安装</p>\n<p>选择对应android版本cpu架构和对应大小</p>\n<p><img src=\"http://ohjvpki1b.bkt.clouddn.com/opengapps.png\" alt=\"opengapps\"></p>\n<p>下载压缩包后，手机进入recovery模式刷入zip刷机包。</p>\n<p>###通过apk安装</p>\n<p>下载apk安装到手机</p>\n<p><img src=\"http://ohjvpki1b.bkt.clouddn.com/opengapps_app.png\" alt=\"opengapps_app\"></p>\n"},{"title":"编译Android源码","date":"2016-12-19T13:29:48.000Z","_content":"\n##编译版本要求\n\n![](http://ohjvpki1b.bkt.clouddn.com/%E7%BC%96%E8%AF%91%E7%89%88%E6%9C%AC%E8%A6%81%E6%B1%82.png)\n\n##基本安装环境\n\n###ubuntu 14.04 64\n\n\tsudo apt-get install git-core gnupg flex bison gperf build-essential \\\n\t  zip curl zlib1g-dev gcc-multilib g++-multilib libc6-dev-i386 \\\n\t  lib32ncurses5-dev x11proto-core-dev libx11-dev lib32z-dev ccache \\\n\t  libgl1-mesa-dev libxml2-utils xsltproc unzip\n\n###ubuntu 16.04 64\n\n\tsudo apt-get install libx11-dev:i386 libreadline6-dev:i386 libgl1-mesa-dev g++-multilib \n\tsudo apt-get install -y git flex bison gperf build-essential libncurses5-dev:i386 \n\tsudo apt-get install tofrodos python-markdown libxml2-utils xsltproc zlib1g-dev:i386 \n\tsudo apt-get install dpkg-dev libsdl1.2-dev libesd0-dev\n\tsudo apt-get install git-core gnupg flex bison gperf build-essential  \n\tsudo apt-get install zip curl zlib1g-dev gcc-multilib g++-multilib \n\tsudo apt-get install libc6-dev-i386 \n\tsudo apt-get install lib32ncurses5-dev x11proto-core-dev libx11-dev \n\tsudo apt-get install libgl1-mesa-dev libxml2-utils xsltproc unzip m4\n\tsudo apt-get install lib32z-dev ccache\n\n##配置环境变量\n\tsource build/envsetup.sh\n##设置编译选项\n\tlunch aosp_hammerhead-userdebug\n\n##编译\n\tmake -j4\nmake失败或停止后，可以使用make -k 继续编译\n\n\n##运行模拟器\n在编译完成之后,就可以通过以下命令运行Android虚拟机了,\n命令如下:\n\n\tsource build/envsetup.sh\n\n\tlunch(选择刚才你设置的目标版本,比如这里了我选择的是2\n\n\temulator\n如果你是在编译完后立刻运行虚拟机,由于我们之前已经执行过source及lunch命令了,因此现在你只需要执行命令就可以运行虚拟机:\n\n\n\n既然谈到了模拟器运行,这里我们顺便介绍模拟器运行所需要四个文件:\n\n\tLinux Kernel\n\tsystem.\n\timg\n\tuserdate\n\t.img\n\tramdisk.img\n\n如果你在使用lunch命令时选择的是aosp_arm-eng,\n那么在执行不带参数的emualtor命令时,Linux Kernel默认使用的是/source/prebuilds/qemu-kernel/arm/kernel-qemu目录下的kernel-qemu文件\n;而android镜像文件则是默认使用source/out/target/product/generic目录下的system.img,userdata.img和ramdisk.img,也就是我们刚刚编译出来的镜像文件.\n\n\n上面我在使用lunch命令时选择的是aosp_arm64-eng,因此linux默认使用的/source/prebuilds/qemu-kernel/arm64/kernel-qemu下的kernel-qemu,\n而其他文件则是使用的source/out/target/product/generic64目录下的system.img,userdata.img和ramdisk.img.\n当然,emulator指令允许你通过参数制定使用不同的文件,具体用法可以通过emulator --help查看\n\n##模块编译\n除了通过make命令编译可以整个android源码外,\nGoogle也为我们提供了相应的命令来支持单独模块的编译.\n\n\n编译环境初始化(即执行source build/envsetup.sh)之后,我们可以得到一些有用的指令,\n除了上边用到的lunch,还有以下:\n\n  \n\t- croot: Changes directory to the top of the tree.\n\t \n\t- m: Makes from the top of the tree.\n\t  \n\t- mm: Builds all of the modules in the current directory.\n\t  \n\t- mmm: Builds all of the modules in the supplied directories.\n\t \n\t- cgrep: Greps on all local C/C++ files.\n\t- jgrep: Greps on all local Java files.\n\t  \n\t- resgrep: Greps on all local res/*.xml files.\n\t  \n\t- godir: Go to the directory containing a file.\n\n其中mmm指令就是用来编译指定目录.通常来说,每个目录只包含一个模块.比如这里我们要编译Launcher2模块,\n执行指令:\n\nmmm packages/apps/Launcher2/\n稍等一会之后,\n如果提示:\n\n\t### make completed success fully ###\n\n即表示编译完成,\n此时在out/target/product/gereric/system/app就可以看到编译的Launcher2.apk文件了.\n\n\n重新打包系统镜像\n编译好指定模块后,如果我们想要将该模块对应的apk集成到系统镜像中,\n需要借助make snod指令重新打包系统镜像,这样我们新生成的system.img中就包含了刚才编译的Launcher2模块了.\n重启模拟器之后生效.\n\n单独安装模块\n我们在不断的修改某些模块,总不能每次编译完成后都要重新打包system.img\n,然后重启手机吧?有没有什么简单的方法呢?\n在编译完后,借助adb install命令直接将生成的apk文件安装到设备上即可,\n相比使用make snod,会节省很多事件.\n\n\n\n##补充\n\n我们简单的来介绍out/target/product/generic/system目录下的常用目录:\nAndroid系统自带的apk文件都在out/target/product/generic/system/apk目录下;\n\n一些可执行文件(比如C编译的执行),放在out/target/product/generic/system/bin目录下;\n\n动态链接库放在out/target/product/generic/system/lib目录下;\n\n硬件抽象层文件都放在out/targer/product/generic/system/lib/hw目录下.\n\n\n\n\n##SDK编译\n\n\n如果你需要自己编译SDK使用,很简单,只需要执行命令`make sdk`即可.\n\n\n\n##编译fastboot adb\n\n\tmake fastboot adb\n\n\n##BUILD\n指的是特定功能的组合的特定名称,即表示编译出的镜像可以运行在什么环境.\n其中,aosp(Android Open Source Project)代表Android开源项目;arm表示系统\n是运行在arm架构的处理器上,arm64则是指64位arm架构;处理器,x86则表示x86架\n构的处理器;此外,还有一些单词代表了特定的Nexus设备,下面是常用的设备代码和\n编译目标,更多参考官方文档\n\n\t|受型号|设备代码|编译目标\n\t\n\t\n\t|Nexus 6P|angler|aosp_angler-userdebug|\n\t\n\t|Nexus 5X|bullhead|aosp_bullhead-userdebug|\n\t\n\t|Nexus 6|shamu|aosp_shamu-userdebug|\n\t\n\t|Nexus 5|hammerhead|aosp_hammerhead-userdebug|\n\n\n##BUILD TYPE\n则指的是编译类型,通常有三种:\n\n\t-user:代表这是编译出的系统镜像是可以用来正式发布到市场的版本,\n\t其权限是被限制的(如,没有root权限,不能dedug等)\n\t\n\t-userdebug:在user版本的基础上开放了root权限和debug权限.\n\t\n\t-eng:代表engineer,也就是所谓的开发工程师的版本,拥有最大的权限(root等),\n\t此外还附带了许多debug工具\n\n\n##清除编译\n\n\tmake clobber\n\n##理解 Android Build 系统\n[外部文档](http://ohjvpki1b.bkt.clouddn.com/%E7%90%86%E8%A7%A3%20Android%20Build%20%E7%B3%BB%E7%BB%9F.pdf)\n\n\n","source":"_posts/编译Android源码.md","raw":"---\ntitle: 编译Android源码\ndate: 2016-12-19 21:29:48\ntags:\n---\n\n##编译版本要求\n\n![](http://ohjvpki1b.bkt.clouddn.com/%E7%BC%96%E8%AF%91%E7%89%88%E6%9C%AC%E8%A6%81%E6%B1%82.png)\n\n##基本安装环境\n\n###ubuntu 14.04 64\n\n\tsudo apt-get install git-core gnupg flex bison gperf build-essential \\\n\t  zip curl zlib1g-dev gcc-multilib g++-multilib libc6-dev-i386 \\\n\t  lib32ncurses5-dev x11proto-core-dev libx11-dev lib32z-dev ccache \\\n\t  libgl1-mesa-dev libxml2-utils xsltproc unzip\n\n###ubuntu 16.04 64\n\n\tsudo apt-get install libx11-dev:i386 libreadline6-dev:i386 libgl1-mesa-dev g++-multilib \n\tsudo apt-get install -y git flex bison gperf build-essential libncurses5-dev:i386 \n\tsudo apt-get install tofrodos python-markdown libxml2-utils xsltproc zlib1g-dev:i386 \n\tsudo apt-get install dpkg-dev libsdl1.2-dev libesd0-dev\n\tsudo apt-get install git-core gnupg flex bison gperf build-essential  \n\tsudo apt-get install zip curl zlib1g-dev gcc-multilib g++-multilib \n\tsudo apt-get install libc6-dev-i386 \n\tsudo apt-get install lib32ncurses5-dev x11proto-core-dev libx11-dev \n\tsudo apt-get install libgl1-mesa-dev libxml2-utils xsltproc unzip m4\n\tsudo apt-get install lib32z-dev ccache\n\n##配置环境变量\n\tsource build/envsetup.sh\n##设置编译选项\n\tlunch aosp_hammerhead-userdebug\n\n##编译\n\tmake -j4\nmake失败或停止后，可以使用make -k 继续编译\n\n\n##运行模拟器\n在编译完成之后,就可以通过以下命令运行Android虚拟机了,\n命令如下:\n\n\tsource build/envsetup.sh\n\n\tlunch(选择刚才你设置的目标版本,比如这里了我选择的是2\n\n\temulator\n如果你是在编译完后立刻运行虚拟机,由于我们之前已经执行过source及lunch命令了,因此现在你只需要执行命令就可以运行虚拟机:\n\n\n\n既然谈到了模拟器运行,这里我们顺便介绍模拟器运行所需要四个文件:\n\n\tLinux Kernel\n\tsystem.\n\timg\n\tuserdate\n\t.img\n\tramdisk.img\n\n如果你在使用lunch命令时选择的是aosp_arm-eng,\n那么在执行不带参数的emualtor命令时,Linux Kernel默认使用的是/source/prebuilds/qemu-kernel/arm/kernel-qemu目录下的kernel-qemu文件\n;而android镜像文件则是默认使用source/out/target/product/generic目录下的system.img,userdata.img和ramdisk.img,也就是我们刚刚编译出来的镜像文件.\n\n\n上面我在使用lunch命令时选择的是aosp_arm64-eng,因此linux默认使用的/source/prebuilds/qemu-kernel/arm64/kernel-qemu下的kernel-qemu,\n而其他文件则是使用的source/out/target/product/generic64目录下的system.img,userdata.img和ramdisk.img.\n当然,emulator指令允许你通过参数制定使用不同的文件,具体用法可以通过emulator --help查看\n\n##模块编译\n除了通过make命令编译可以整个android源码外,\nGoogle也为我们提供了相应的命令来支持单独模块的编译.\n\n\n编译环境初始化(即执行source build/envsetup.sh)之后,我们可以得到一些有用的指令,\n除了上边用到的lunch,还有以下:\n\n  \n\t- croot: Changes directory to the top of the tree.\n\t \n\t- m: Makes from the top of the tree.\n\t  \n\t- mm: Builds all of the modules in the current directory.\n\t  \n\t- mmm: Builds all of the modules in the supplied directories.\n\t \n\t- cgrep: Greps on all local C/C++ files.\n\t- jgrep: Greps on all local Java files.\n\t  \n\t- resgrep: Greps on all local res/*.xml files.\n\t  \n\t- godir: Go to the directory containing a file.\n\n其中mmm指令就是用来编译指定目录.通常来说,每个目录只包含一个模块.比如这里我们要编译Launcher2模块,\n执行指令:\n\nmmm packages/apps/Launcher2/\n稍等一会之后,\n如果提示:\n\n\t### make completed success fully ###\n\n即表示编译完成,\n此时在out/target/product/gereric/system/app就可以看到编译的Launcher2.apk文件了.\n\n\n重新打包系统镜像\n编译好指定模块后,如果我们想要将该模块对应的apk集成到系统镜像中,\n需要借助make snod指令重新打包系统镜像,这样我们新生成的system.img中就包含了刚才编译的Launcher2模块了.\n重启模拟器之后生效.\n\n单独安装模块\n我们在不断的修改某些模块,总不能每次编译完成后都要重新打包system.img\n,然后重启手机吧?有没有什么简单的方法呢?\n在编译完后,借助adb install命令直接将生成的apk文件安装到设备上即可,\n相比使用make snod,会节省很多事件.\n\n\n\n##补充\n\n我们简单的来介绍out/target/product/generic/system目录下的常用目录:\nAndroid系统自带的apk文件都在out/target/product/generic/system/apk目录下;\n\n一些可执行文件(比如C编译的执行),放在out/target/product/generic/system/bin目录下;\n\n动态链接库放在out/target/product/generic/system/lib目录下;\n\n硬件抽象层文件都放在out/targer/product/generic/system/lib/hw目录下.\n\n\n\n\n##SDK编译\n\n\n如果你需要自己编译SDK使用,很简单,只需要执行命令`make sdk`即可.\n\n\n\n##编译fastboot adb\n\n\tmake fastboot adb\n\n\n##BUILD\n指的是特定功能的组合的特定名称,即表示编译出的镜像可以运行在什么环境.\n其中,aosp(Android Open Source Project)代表Android开源项目;arm表示系统\n是运行在arm架构的处理器上,arm64则是指64位arm架构;处理器,x86则表示x86架\n构的处理器;此外,还有一些单词代表了特定的Nexus设备,下面是常用的设备代码和\n编译目标,更多参考官方文档\n\n\t|受型号|设备代码|编译目标\n\t\n\t\n\t|Nexus 6P|angler|aosp_angler-userdebug|\n\t\n\t|Nexus 5X|bullhead|aosp_bullhead-userdebug|\n\t\n\t|Nexus 6|shamu|aosp_shamu-userdebug|\n\t\n\t|Nexus 5|hammerhead|aosp_hammerhead-userdebug|\n\n\n##BUILD TYPE\n则指的是编译类型,通常有三种:\n\n\t-user:代表这是编译出的系统镜像是可以用来正式发布到市场的版本,\n\t其权限是被限制的(如,没有root权限,不能dedug等)\n\t\n\t-userdebug:在user版本的基础上开放了root权限和debug权限.\n\t\n\t-eng:代表engineer,也就是所谓的开发工程师的版本,拥有最大的权限(root等),\n\t此外还附带了许多debug工具\n\n\n##清除编译\n\n\tmake clobber\n\n##理解 Android Build 系统\n[外部文档](http://ohjvpki1b.bkt.clouddn.com/%E7%90%86%E8%A7%A3%20Android%20Build%20%E7%B3%BB%E7%BB%9F.pdf)\n\n\n","slug":"编译Android源码","published":1,"updated":"2017-09-21T01:55:27.190Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7ttahws000yde5lggzzu54u","content":"<p>##编译版本要求</p>\n<p><img src=\"http://ohjvpki1b.bkt.clouddn.com/%E7%BC%96%E8%AF%91%E7%89%88%E6%9C%AC%E8%A6%81%E6%B1%82.png\" alt=\"\"></p>\n<p>##基本安装环境</p>\n<p>###ubuntu 14.04 64</p>\n<pre><code>sudo apt-get install git-core gnupg flex bison gperf build-essential \\\n  zip curl zlib1g-dev gcc-multilib g++-multilib libc6-dev-i386 \\\n  lib32ncurses5-dev x11proto-core-dev libx11-dev lib32z-dev ccache \\\n  libgl1-mesa-dev libxml2-utils xsltproc unzip\n</code></pre><p>###ubuntu 16.04 64</p>\n<pre><code>sudo apt-get install libx11-dev:i386 libreadline6-dev:i386 libgl1-mesa-dev g++-multilib \nsudo apt-get install -y git flex bison gperf build-essential libncurses5-dev:i386 \nsudo apt-get install tofrodos python-markdown libxml2-utils xsltproc zlib1g-dev:i386 \nsudo apt-get install dpkg-dev libsdl1.2-dev libesd0-dev\nsudo apt-get install git-core gnupg flex bison gperf build-essential  \nsudo apt-get install zip curl zlib1g-dev gcc-multilib g++-multilib \nsudo apt-get install libc6-dev-i386 \nsudo apt-get install lib32ncurses5-dev x11proto-core-dev libx11-dev \nsudo apt-get install libgl1-mesa-dev libxml2-utils xsltproc unzip m4\nsudo apt-get install lib32z-dev ccache\n</code></pre><p>##配置环境变量<br>    source build/envsetup.sh</p>\n<p>##设置编译选项<br>    lunch aosp_hammerhead-userdebug</p>\n<p>##编译<br>    make -j4<br>make失败或停止后，可以使用make -k 继续编译</p>\n<p>##运行模拟器<br>在编译完成之后,就可以通过以下命令运行Android虚拟机了,<br>命令如下:</p>\n<pre><code>source build/envsetup.sh\n\nlunch(选择刚才你设置的目标版本,比如这里了我选择的是2\n\nemulator\n</code></pre><p>如果你是在编译完后立刻运行虚拟机,由于我们之前已经执行过source及lunch命令了,因此现在你只需要执行命令就可以运行虚拟机:</p>\n<p>既然谈到了模拟器运行,这里我们顺便介绍模拟器运行所需要四个文件:</p>\n<pre><code>Linux Kernel\nsystem.\nimg\nuserdate\n.img\nramdisk.img\n</code></pre><p>如果你在使用lunch命令时选择的是aosp_arm-eng,<br>那么在执行不带参数的emualtor命令时,Linux Kernel默认使用的是/source/prebuilds/qemu-kernel/arm/kernel-qemu目录下的kernel-qemu文件<br>;而android镜像文件则是默认使用source/out/target/product/generic目录下的system.img,userdata.img和ramdisk.img,也就是我们刚刚编译出来的镜像文件.</p>\n<p>上面我在使用lunch命令时选择的是aosp_arm64-eng,因此linux默认使用的/source/prebuilds/qemu-kernel/arm64/kernel-qemu下的kernel-qemu,<br>而其他文件则是使用的source/out/target/product/generic64目录下的system.img,userdata.img和ramdisk.img.<br>当然,emulator指令允许你通过参数制定使用不同的文件,具体用法可以通过emulator –help查看</p>\n<p>##模块编译<br>除了通过make命令编译可以整个android源码外,<br>Google也为我们提供了相应的命令来支持单独模块的编译.</p>\n<p>编译环境初始化(即执行source build/envsetup.sh)之后,我们可以得到一些有用的指令,<br>除了上边用到的lunch,还有以下:</p>\n<pre><code>- croot: Changes directory to the top of the tree.\n\n- m: Makes from the top of the tree.\n\n- mm: Builds all of the modules in the current directory.\n\n- mmm: Builds all of the modules in the supplied directories.\n\n- cgrep: Greps on all local C/C++ files.\n- jgrep: Greps on all local Java files.\n\n- resgrep: Greps on all local res/*.xml files.\n\n- godir: Go to the directory containing a file.\n</code></pre><p>其中mmm指令就是用来编译指定目录.通常来说,每个目录只包含一个模块.比如这里我们要编译Launcher2模块,<br>执行指令:</p>\n<p>mmm packages/apps/Launcher2/<br>稍等一会之后,<br>如果提示:</p>\n<pre><code>### make completed success fully ###\n</code></pre><p>即表示编译完成,<br>此时在out/target/product/gereric/system/app就可以看到编译的Launcher2.apk文件了.</p>\n<p>重新打包系统镜像<br>编译好指定模块后,如果我们想要将该模块对应的apk集成到系统镜像中,<br>需要借助make snod指令重新打包系统镜像,这样我们新生成的system.img中就包含了刚才编译的Launcher2模块了.<br>重启模拟器之后生效.</p>\n<p>单独安装模块<br>我们在不断的修改某些模块,总不能每次编译完成后都要重新打包system.img<br>,然后重启手机吧?有没有什么简单的方法呢?<br>在编译完后,借助adb install命令直接将生成的apk文件安装到设备上即可,<br>相比使用make snod,会节省很多事件.</p>\n<p>##补充</p>\n<p>我们简单的来介绍out/target/product/generic/system目录下的常用目录:<br>Android系统自带的apk文件都在out/target/product/generic/system/apk目录下;</p>\n<p>一些可执行文件(比如C编译的执行),放在out/target/product/generic/system/bin目录下;</p>\n<p>动态链接库放在out/target/product/generic/system/lib目录下;</p>\n<p>硬件抽象层文件都放在out/targer/product/generic/system/lib/hw目录下.</p>\n<p>##SDK编译</p>\n<p>如果你需要自己编译SDK使用,很简单,只需要执行命令<code>make sdk</code>即可.</p>\n<p>##编译fastboot adb</p>\n<pre><code>make fastboot adb\n</code></pre><p>##BUILD<br>指的是特定功能的组合的特定名称,即表示编译出的镜像可以运行在什么环境.<br>其中,aosp(Android Open Source Project)代表Android开源项目;arm表示系统<br>是运行在arm架构的处理器上,arm64则是指64位arm架构;处理器,x86则表示x86架<br>构的处理器;此外,还有一些单词代表了特定的Nexus设备,下面是常用的设备代码和<br>编译目标,更多参考官方文档</p>\n<pre><code>|受型号|设备代码|编译目标\n\n\n|Nexus 6P|angler|aosp_angler-userdebug|\n\n|Nexus 5X|bullhead|aosp_bullhead-userdebug|\n\n|Nexus 6|shamu|aosp_shamu-userdebug|\n\n|Nexus 5|hammerhead|aosp_hammerhead-userdebug|\n</code></pre><p>##BUILD TYPE<br>则指的是编译类型,通常有三种:</p>\n<pre><code>-user:代表这是编译出的系统镜像是可以用来正式发布到市场的版本,\n其权限是被限制的(如,没有root权限,不能dedug等)\n\n-userdebug:在user版本的基础上开放了root权限和debug权限.\n\n-eng:代表engineer,也就是所谓的开发工程师的版本,拥有最大的权限(root等),\n此外还附带了许多debug工具\n</code></pre><p>##清除编译</p>\n<pre><code>make clobber\n</code></pre><p>##理解 Android Build 系统<br><a href=\"http://ohjvpki1b.bkt.clouddn.com/%E7%90%86%E8%A7%A3%20Android%20Build%20%E7%B3%BB%E7%BB%9F.pdf\" target=\"_blank\" rel=\"external\">外部文档</a></p>\n","excerpt":"","more":"<p>##编译版本要求</p>\n<p><img src=\"http://ohjvpki1b.bkt.clouddn.com/%E7%BC%96%E8%AF%91%E7%89%88%E6%9C%AC%E8%A6%81%E6%B1%82.png\" alt=\"\"></p>\n<p>##基本安装环境</p>\n<p>###ubuntu 14.04 64</p>\n<pre><code>sudo apt-get install git-core gnupg flex bison gperf build-essential \\\n  zip curl zlib1g-dev gcc-multilib g++-multilib libc6-dev-i386 \\\n  lib32ncurses5-dev x11proto-core-dev libx11-dev lib32z-dev ccache \\\n  libgl1-mesa-dev libxml2-utils xsltproc unzip\n</code></pre><p>###ubuntu 16.04 64</p>\n<pre><code>sudo apt-get install libx11-dev:i386 libreadline6-dev:i386 libgl1-mesa-dev g++-multilib \nsudo apt-get install -y git flex bison gperf build-essential libncurses5-dev:i386 \nsudo apt-get install tofrodos python-markdown libxml2-utils xsltproc zlib1g-dev:i386 \nsudo apt-get install dpkg-dev libsdl1.2-dev libesd0-dev\nsudo apt-get install git-core gnupg flex bison gperf build-essential  \nsudo apt-get install zip curl zlib1g-dev gcc-multilib g++-multilib \nsudo apt-get install libc6-dev-i386 \nsudo apt-get install lib32ncurses5-dev x11proto-core-dev libx11-dev \nsudo apt-get install libgl1-mesa-dev libxml2-utils xsltproc unzip m4\nsudo apt-get install lib32z-dev ccache\n</code></pre><p>##配置环境变量<br>    source build/envsetup.sh</p>\n<p>##设置编译选项<br>    lunch aosp_hammerhead-userdebug</p>\n<p>##编译<br>    make -j4<br>make失败或停止后，可以使用make -k 继续编译</p>\n<p>##运行模拟器<br>在编译完成之后,就可以通过以下命令运行Android虚拟机了,<br>命令如下:</p>\n<pre><code>source build/envsetup.sh\n\nlunch(选择刚才你设置的目标版本,比如这里了我选择的是2\n\nemulator\n</code></pre><p>如果你是在编译完后立刻运行虚拟机,由于我们之前已经执行过source及lunch命令了,因此现在你只需要执行命令就可以运行虚拟机:</p>\n<p>既然谈到了模拟器运行,这里我们顺便介绍模拟器运行所需要四个文件:</p>\n<pre><code>Linux Kernel\nsystem.\nimg\nuserdate\n.img\nramdisk.img\n</code></pre><p>如果你在使用lunch命令时选择的是aosp_arm-eng,<br>那么在执行不带参数的emualtor命令时,Linux Kernel默认使用的是/source/prebuilds/qemu-kernel/arm/kernel-qemu目录下的kernel-qemu文件<br>;而android镜像文件则是默认使用source/out/target/product/generic目录下的system.img,userdata.img和ramdisk.img,也就是我们刚刚编译出来的镜像文件.</p>\n<p>上面我在使用lunch命令时选择的是aosp_arm64-eng,因此linux默认使用的/source/prebuilds/qemu-kernel/arm64/kernel-qemu下的kernel-qemu,<br>而其他文件则是使用的source/out/target/product/generic64目录下的system.img,userdata.img和ramdisk.img.<br>当然,emulator指令允许你通过参数制定使用不同的文件,具体用法可以通过emulator –help查看</p>\n<p>##模块编译<br>除了通过make命令编译可以整个android源码外,<br>Google也为我们提供了相应的命令来支持单独模块的编译.</p>\n<p>编译环境初始化(即执行source build/envsetup.sh)之后,我们可以得到一些有用的指令,<br>除了上边用到的lunch,还有以下:</p>\n<pre><code>- croot: Changes directory to the top of the tree.\n\n- m: Makes from the top of the tree.\n\n- mm: Builds all of the modules in the current directory.\n\n- mmm: Builds all of the modules in the supplied directories.\n\n- cgrep: Greps on all local C/C++ files.\n- jgrep: Greps on all local Java files.\n\n- resgrep: Greps on all local res/*.xml files.\n\n- godir: Go to the directory containing a file.\n</code></pre><p>其中mmm指令就是用来编译指定目录.通常来说,每个目录只包含一个模块.比如这里我们要编译Launcher2模块,<br>执行指令:</p>\n<p>mmm packages/apps/Launcher2/<br>稍等一会之后,<br>如果提示:</p>\n<pre><code>### make completed success fully ###\n</code></pre><p>即表示编译完成,<br>此时在out/target/product/gereric/system/app就可以看到编译的Launcher2.apk文件了.</p>\n<p>重新打包系统镜像<br>编译好指定模块后,如果我们想要将该模块对应的apk集成到系统镜像中,<br>需要借助make snod指令重新打包系统镜像,这样我们新生成的system.img中就包含了刚才编译的Launcher2模块了.<br>重启模拟器之后生效.</p>\n<p>单独安装模块<br>我们在不断的修改某些模块,总不能每次编译完成后都要重新打包system.img<br>,然后重启手机吧?有没有什么简单的方法呢?<br>在编译完后,借助adb install命令直接将生成的apk文件安装到设备上即可,<br>相比使用make snod,会节省很多事件.</p>\n<p>##补充</p>\n<p>我们简单的来介绍out/target/product/generic/system目录下的常用目录:<br>Android系统自带的apk文件都在out/target/product/generic/system/apk目录下;</p>\n<p>一些可执行文件(比如C编译的执行),放在out/target/product/generic/system/bin目录下;</p>\n<p>动态链接库放在out/target/product/generic/system/lib目录下;</p>\n<p>硬件抽象层文件都放在out/targer/product/generic/system/lib/hw目录下.</p>\n<p>##SDK编译</p>\n<p>如果你需要自己编译SDK使用,很简单,只需要执行命令<code>make sdk</code>即可.</p>\n<p>##编译fastboot adb</p>\n<pre><code>make fastboot adb\n</code></pre><p>##BUILD<br>指的是特定功能的组合的特定名称,即表示编译出的镜像可以运行在什么环境.<br>其中,aosp(Android Open Source Project)代表Android开源项目;arm表示系统<br>是运行在arm架构的处理器上,arm64则是指64位arm架构;处理器,x86则表示x86架<br>构的处理器;此外,还有一些单词代表了特定的Nexus设备,下面是常用的设备代码和<br>编译目标,更多参考官方文档</p>\n<pre><code>|受型号|设备代码|编译目标\n\n\n|Nexus 6P|angler|aosp_angler-userdebug|\n\n|Nexus 5X|bullhead|aosp_bullhead-userdebug|\n\n|Nexus 6|shamu|aosp_shamu-userdebug|\n\n|Nexus 5|hammerhead|aosp_hammerhead-userdebug|\n</code></pre><p>##BUILD TYPE<br>则指的是编译类型,通常有三种:</p>\n<pre><code>-user:代表这是编译出的系统镜像是可以用来正式发布到市场的版本,\n其权限是被限制的(如,没有root权限,不能dedug等)\n\n-userdebug:在user版本的基础上开放了root权限和debug权限.\n\n-eng:代表engineer,也就是所谓的开发工程师的版本,拥有最大的权限(root等),\n此外还附带了许多debug工具\n</code></pre><p>##清除编译</p>\n<pre><code>make clobber\n</code></pre><p>##理解 Android Build 系统<br><a href=\"http://ohjvpki1b.bkt.clouddn.com/%E7%90%86%E8%A7%A3%20Android%20Build%20%E7%B3%BB%E7%BB%9F.pdf\">外部文档</a></p>\n"},{"title":"编译hikey bootloader","date":"2017-01-21T09:20:17.000Z","_content":"\n\n##交叉编译工具链：\n##下载：\n\thttp://releases.linaro.org/15.02/components/toolch...\n\thttp://releases.linaro.org/15.02/components/toolch...\n##安装：\n\tmkdir arm-tc arm64-tc\n\ttar --strip-components=1 -C ${PWD}/arm-tc -xf gcc-linaro-4.9-*-x86_64_aarch64-linux-gnu.tar.xz\n\ttar --strip-components=1 -C ${PWD}/arm64-tc -xf gcc-linaro-4.9-*-x86_64_arm-linux-gnueabihf.tar.xz\n\texport PATH=\"${PWD}/arm-tc/bin:${PWD}/arm64-tc/bin:$PATH\"\n\n##bootloader代码下载:\n\tgit clone -b hikey --depth 1 https://github.com/96boards/edk2.git linaro-edk2\n\tgit clone -b hikey --depth 1 https://github.com/96boards-hikey/arm-trusted-firmware.git\n\tgit clone -b hikey --depth 1 https://github.com/96boards/LinaroPkg.git\n\tgit clone --depth 1 https://github.com/96boards/l-loader.git\n\tgit clone git://git.linaro.org/uefi/uefi-tools.git\n\n##编译UEFI\n\texport AARCH64_TOOLCHAIN=GCC49\n\texport EDK2_DIR=${PWD}/linaro-edk2\n\texport UEFI_TOOLS_DIR=${PWD}/uefi-tools\n\t\n\tcd ${EDK2_DIR}\n\t${UEFI_TOOLS_DIR}/uefi-build.sh -c ../LinaroPkg/platforms.config -b RELEASE -a ../arm-trusted-firmware hikey\n\t\n\tcd ../l-loader\n\tln -s ${EDK2_DIR}/Build/HiKey/RELEASE_GCC49/FV/bl1.bin\n\tln -s ${EDK2_DIR}/Build/HiKey/RELEASE_GCC49/FV/fip.bin\n\tarm-linux-gnueabihf-gcc -c -o start.o start.S\n\tarm-linux-gnueabihf-gcc -c -o debug.o debug.S\n\tarm-linux-gnueabihf-ld -Bstatic -Tl-loader.lds -Ttext 0xf9800800 start.o debug.o -o loader\n\tarm-linux-gnueabihf-objcopy -O binary loader temp\n\tpython gen_loader.py -o l-loader.bin --img_loader=temp --img_bl1=bl1.bin\n\tsudo PTABLE=aosp-8g bash -x generate_ptable.sh\n\tpython gen_loader.py -o ptable-aosp-8g.img --img_prm_ptable=prm_ptable.img\n\n##镜像输出(l-loader目录下)：\nfip.bin l-loader.bin ptable-aosp-8g.img\n\n##烧写\n\tsudo python hisi-idt.py --img1=l-loader.bin -d /dev/ttyUSB0\n\tsudo fastboot flash ptable ptable-aosp-8g.img\n\tsudo fastboot flash fastboot fip.bin\n\n\n注意:\n这里编译的boot_fat.uefi.img要和上面编译的fip.bin一起烧写,否则无法启动\n\n如果不想烧写上面编译的fip.bin的话则需要手动修改生成boot_fat.uefi.img：\n手动打包过程如下(将你自己编译的内核,DT和RAMDISK替换进去下面下载的prebuild的boot_fat.uefi.img后就可以了):\n\n\twget http://builds.96boards.org/releases/reference-plat...\n\twget https://builds.96boards.org/snapshots/reference-pl... -O grubaa64.efi\n\tmkdir boot-fat\n\tdd if=/dev/zero of=boot-fat.uefi.img bs=512 count=131072\n\tsudo mkfs.fat -n \"BOOT IMG\" boot-fat.uefi.img\n\tsudo mount -o loop,rw,sync boot-fat.uefi.img boot-fat\n\tsudo cp hi6220-hikey.dtb boot-fat/hi6220-hikey.dtb\n\tsudo cp AndroidFastbootApp.efi boot-fat/fastboot.efi\n\tsudo cp grubaa64.efi boot-fat/grubaa64.efi\n\tsudo umount boot-fat\n\tsudo mv boot-fat.uefi.img hikey-boot-linux-VERSION.uefi.img\n\trm -rf boot-fat\n\n\n##出错 fatal error: uuid/uuid.h: No such file or directory\n\n\n\t解决\n\t\n\t sudo apt-get install uuid-dev","source":"_posts/编译hikey-bootloader.md","raw":"---\ntitle: 编译hikey bootloader\ndate: 2017-01-21 17:20:17\ntags:\n---\n\n\n##交叉编译工具链：\n##下载：\n\thttp://releases.linaro.org/15.02/components/toolch...\n\thttp://releases.linaro.org/15.02/components/toolch...\n##安装：\n\tmkdir arm-tc arm64-tc\n\ttar --strip-components=1 -C ${PWD}/arm-tc -xf gcc-linaro-4.9-*-x86_64_aarch64-linux-gnu.tar.xz\n\ttar --strip-components=1 -C ${PWD}/arm64-tc -xf gcc-linaro-4.9-*-x86_64_arm-linux-gnueabihf.tar.xz\n\texport PATH=\"${PWD}/arm-tc/bin:${PWD}/arm64-tc/bin:$PATH\"\n\n##bootloader代码下载:\n\tgit clone -b hikey --depth 1 https://github.com/96boards/edk2.git linaro-edk2\n\tgit clone -b hikey --depth 1 https://github.com/96boards-hikey/arm-trusted-firmware.git\n\tgit clone -b hikey --depth 1 https://github.com/96boards/LinaroPkg.git\n\tgit clone --depth 1 https://github.com/96boards/l-loader.git\n\tgit clone git://git.linaro.org/uefi/uefi-tools.git\n\n##编译UEFI\n\texport AARCH64_TOOLCHAIN=GCC49\n\texport EDK2_DIR=${PWD}/linaro-edk2\n\texport UEFI_TOOLS_DIR=${PWD}/uefi-tools\n\t\n\tcd ${EDK2_DIR}\n\t${UEFI_TOOLS_DIR}/uefi-build.sh -c ../LinaroPkg/platforms.config -b RELEASE -a ../arm-trusted-firmware hikey\n\t\n\tcd ../l-loader\n\tln -s ${EDK2_DIR}/Build/HiKey/RELEASE_GCC49/FV/bl1.bin\n\tln -s ${EDK2_DIR}/Build/HiKey/RELEASE_GCC49/FV/fip.bin\n\tarm-linux-gnueabihf-gcc -c -o start.o start.S\n\tarm-linux-gnueabihf-gcc -c -o debug.o debug.S\n\tarm-linux-gnueabihf-ld -Bstatic -Tl-loader.lds -Ttext 0xf9800800 start.o debug.o -o loader\n\tarm-linux-gnueabihf-objcopy -O binary loader temp\n\tpython gen_loader.py -o l-loader.bin --img_loader=temp --img_bl1=bl1.bin\n\tsudo PTABLE=aosp-8g bash -x generate_ptable.sh\n\tpython gen_loader.py -o ptable-aosp-8g.img --img_prm_ptable=prm_ptable.img\n\n##镜像输出(l-loader目录下)：\nfip.bin l-loader.bin ptable-aosp-8g.img\n\n##烧写\n\tsudo python hisi-idt.py --img1=l-loader.bin -d /dev/ttyUSB0\n\tsudo fastboot flash ptable ptable-aosp-8g.img\n\tsudo fastboot flash fastboot fip.bin\n\n\n注意:\n这里编译的boot_fat.uefi.img要和上面编译的fip.bin一起烧写,否则无法启动\n\n如果不想烧写上面编译的fip.bin的话则需要手动修改生成boot_fat.uefi.img：\n手动打包过程如下(将你自己编译的内核,DT和RAMDISK替换进去下面下载的prebuild的boot_fat.uefi.img后就可以了):\n\n\twget http://builds.96boards.org/releases/reference-plat...\n\twget https://builds.96boards.org/snapshots/reference-pl... -O grubaa64.efi\n\tmkdir boot-fat\n\tdd if=/dev/zero of=boot-fat.uefi.img bs=512 count=131072\n\tsudo mkfs.fat -n \"BOOT IMG\" boot-fat.uefi.img\n\tsudo mount -o loop,rw,sync boot-fat.uefi.img boot-fat\n\tsudo cp hi6220-hikey.dtb boot-fat/hi6220-hikey.dtb\n\tsudo cp AndroidFastbootApp.efi boot-fat/fastboot.efi\n\tsudo cp grubaa64.efi boot-fat/grubaa64.efi\n\tsudo umount boot-fat\n\tsudo mv boot-fat.uefi.img hikey-boot-linux-VERSION.uefi.img\n\trm -rf boot-fat\n\n\n##出错 fatal error: uuid/uuid.h: No such file or directory\n\n\n\t解决\n\t\n\t sudo apt-get install uuid-dev","slug":"编译hikey-bootloader","published":1,"updated":"2017-09-21T01:55:27.190Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7ttahwt000zde5laetli48z","content":"<p>##交叉编译工具链：</p>\n<p>##下载：<br>    <a href=\"http://releases.linaro.org/15.02/components/toolch\" target=\"_blank\" rel=\"external\">http://releases.linaro.org/15.02/components/toolch</a>…<br>    <a href=\"http://releases.linaro.org/15.02/components/toolch\" target=\"_blank\" rel=\"external\">http://releases.linaro.org/15.02/components/toolch</a>…</p>\n<p>##安装：<br>    mkdir arm-tc arm64-tc<br>    tar –strip-components=1 -C ${PWD}/arm-tc -xf gcc-linaro-4.9-<em>-x86_64_aarch64-linux-gnu.tar.xz<br>    tar –strip-components=1 -C ${PWD}/arm64-tc -xf gcc-linaro-4.9-</em>-x86_64_arm-linux-gnueabihf.tar.xz<br>    export PATH=”${PWD}/arm-tc/bin:${PWD}/arm64-tc/bin:$PATH”</p>\n<p>##bootloader代码下载:<br>    git clone -b hikey –depth 1 <a href=\"https://github.com/96boards/edk2.git\" target=\"_blank\" rel=\"external\">https://github.com/96boards/edk2.git</a> linaro-edk2<br>    git clone -b hikey –depth 1 <a href=\"https://github.com/96boards-hikey/arm-trusted-firmware.git\" target=\"_blank\" rel=\"external\">https://github.com/96boards-hikey/arm-trusted-firmware.git</a><br>    git clone -b hikey –depth 1 <a href=\"https://github.com/96boards/LinaroPkg.git\" target=\"_blank\" rel=\"external\">https://github.com/96boards/LinaroPkg.git</a><br>    git clone –depth 1 <a href=\"https://github.com/96boards/l-loader.git\" target=\"_blank\" rel=\"external\">https://github.com/96boards/l-loader.git</a><br>    git clone git://git.linaro.org/uefi/uefi-tools.git</p>\n<p>##编译UEFI<br>    export AARCH64_TOOLCHAIN=GCC49<br>    export EDK2_DIR=${PWD}/linaro-edk2<br>    export UEFI_TOOLS_DIR=${PWD}/uefi-tools</p>\n<pre><code>cd ${EDK2_DIR}\n${UEFI_TOOLS_DIR}/uefi-build.sh -c ../LinaroPkg/platforms.config -b RELEASE -a ../arm-trusted-firmware hikey\n\ncd ../l-loader\nln -s ${EDK2_DIR}/Build/HiKey/RELEASE_GCC49/FV/bl1.bin\nln -s ${EDK2_DIR}/Build/HiKey/RELEASE_GCC49/FV/fip.bin\narm-linux-gnueabihf-gcc -c -o start.o start.S\narm-linux-gnueabihf-gcc -c -o debug.o debug.S\narm-linux-gnueabihf-ld -Bstatic -Tl-loader.lds -Ttext 0xf9800800 start.o debug.o -o loader\narm-linux-gnueabihf-objcopy -O binary loader temp\npython gen_loader.py -o l-loader.bin --img_loader=temp --img_bl1=bl1.bin\nsudo PTABLE=aosp-8g bash -x generate_ptable.sh\npython gen_loader.py -o ptable-aosp-8g.img --img_prm_ptable=prm_ptable.img\n</code></pre><p>##镜像输出(l-loader目录下)：<br>fip.bin l-loader.bin ptable-aosp-8g.img</p>\n<p>##烧写<br>    sudo python hisi-idt.py –img1=l-loader.bin -d /dev/ttyUSB0<br>    sudo fastboot flash ptable ptable-aosp-8g.img<br>    sudo fastboot flash fastboot fip.bin</p>\n<p>注意:<br>这里编译的boot_fat.uefi.img要和上面编译的fip.bin一起烧写,否则无法启动</p>\n<p>如果不想烧写上面编译的fip.bin的话则需要手动修改生成boot_fat.uefi.img：<br>手动打包过程如下(将你自己编译的内核,DT和RAMDISK替换进去下面下载的prebuild的boot_fat.uefi.img后就可以了):</p>\n<pre><code>wget http://builds.96boards.org/releases/reference-plat...\nwget https://builds.96boards.org/snapshots/reference-pl... -O grubaa64.efi\nmkdir boot-fat\ndd if=/dev/zero of=boot-fat.uefi.img bs=512 count=131072\nsudo mkfs.fat -n &quot;BOOT IMG&quot; boot-fat.uefi.img\nsudo mount -o loop,rw,sync boot-fat.uefi.img boot-fat\nsudo cp hi6220-hikey.dtb boot-fat/hi6220-hikey.dtb\nsudo cp AndroidFastbootApp.efi boot-fat/fastboot.efi\nsudo cp grubaa64.efi boot-fat/grubaa64.efi\nsudo umount boot-fat\nsudo mv boot-fat.uefi.img hikey-boot-linux-VERSION.uefi.img\nrm -rf boot-fat\n</code></pre><p>##出错 fatal error: uuid/uuid.h: No such file or directory</p>\n<pre><code>解决\n\n sudo apt-get install uuid-dev\n</code></pre>","excerpt":"","more":"<p>##交叉编译工具链：</p>\n<p>##下载：<br>    <a href=\"http://releases.linaro.org/15.02/components/toolch\">http://releases.linaro.org/15.02/components/toolch</a>…<br>    <a href=\"http://releases.linaro.org/15.02/components/toolch\">http://releases.linaro.org/15.02/components/toolch</a>…</p>\n<p>##安装：<br>    mkdir arm-tc arm64-tc<br>    tar –strip-components=1 -C ${PWD}/arm-tc -xf gcc-linaro-4.9-<em>-x86_64_aarch64-linux-gnu.tar.xz<br>    tar –strip-components=1 -C ${PWD}/arm64-tc -xf gcc-linaro-4.9-</em>-x86_64_arm-linux-gnueabihf.tar.xz<br>    export PATH=”${PWD}/arm-tc/bin:${PWD}/arm64-tc/bin:$PATH”</p>\n<p>##bootloader代码下载:<br>    git clone -b hikey –depth 1 <a href=\"https://github.com/96boards/edk2.git\">https://github.com/96boards/edk2.git</a> linaro-edk2<br>    git clone -b hikey –depth 1 <a href=\"https://github.com/96boards-hikey/arm-trusted-firmware.git\">https://github.com/96boards-hikey/arm-trusted-firmware.git</a><br>    git clone -b hikey –depth 1 <a href=\"https://github.com/96boards/LinaroPkg.git\">https://github.com/96boards/LinaroPkg.git</a><br>    git clone –depth 1 <a href=\"https://github.com/96boards/l-loader.git\">https://github.com/96boards/l-loader.git</a><br>    git clone git://git.linaro.org/uefi/uefi-tools.git</p>\n<p>##编译UEFI<br>    export AARCH64_TOOLCHAIN=GCC49<br>    export EDK2_DIR=${PWD}/linaro-edk2<br>    export UEFI_TOOLS_DIR=${PWD}/uefi-tools</p>\n<pre><code>cd ${EDK2_DIR}\n${UEFI_TOOLS_DIR}/uefi-build.sh -c ../LinaroPkg/platforms.config -b RELEASE -a ../arm-trusted-firmware hikey\n\ncd ../l-loader\nln -s ${EDK2_DIR}/Build/HiKey/RELEASE_GCC49/FV/bl1.bin\nln -s ${EDK2_DIR}/Build/HiKey/RELEASE_GCC49/FV/fip.bin\narm-linux-gnueabihf-gcc -c -o start.o start.S\narm-linux-gnueabihf-gcc -c -o debug.o debug.S\narm-linux-gnueabihf-ld -Bstatic -Tl-loader.lds -Ttext 0xf9800800 start.o debug.o -o loader\narm-linux-gnueabihf-objcopy -O binary loader temp\npython gen_loader.py -o l-loader.bin --img_loader=temp --img_bl1=bl1.bin\nsudo PTABLE=aosp-8g bash -x generate_ptable.sh\npython gen_loader.py -o ptable-aosp-8g.img --img_prm_ptable=prm_ptable.img\n</code></pre><p>##镜像输出(l-loader目录下)：<br>fip.bin l-loader.bin ptable-aosp-8g.img</p>\n<p>##烧写<br>    sudo python hisi-idt.py –img1=l-loader.bin -d /dev/ttyUSB0<br>    sudo fastboot flash ptable ptable-aosp-8g.img<br>    sudo fastboot flash fastboot fip.bin</p>\n<p>注意:<br>这里编译的boot_fat.uefi.img要和上面编译的fip.bin一起烧写,否则无法启动</p>\n<p>如果不想烧写上面编译的fip.bin的话则需要手动修改生成boot_fat.uefi.img：<br>手动打包过程如下(将你自己编译的内核,DT和RAMDISK替换进去下面下载的prebuild的boot_fat.uefi.img后就可以了):</p>\n<pre><code>wget http://builds.96boards.org/releases/reference-plat...\nwget https://builds.96boards.org/snapshots/reference-pl... -O grubaa64.efi\nmkdir boot-fat\ndd if=/dev/zero of=boot-fat.uefi.img bs=512 count=131072\nsudo mkfs.fat -n &quot;BOOT IMG&quot; boot-fat.uefi.img\nsudo mount -o loop,rw,sync boot-fat.uefi.img boot-fat\nsudo cp hi6220-hikey.dtb boot-fat/hi6220-hikey.dtb\nsudo cp AndroidFastbootApp.efi boot-fat/fastboot.efi\nsudo cp grubaa64.efi boot-fat/grubaa64.efi\nsudo umount boot-fat\nsudo mv boot-fat.uefi.img hikey-boot-linux-VERSION.uefi.img\nrm -rf boot-fat\n</code></pre><p>##出错 fatal error: uuid/uuid.h: No such file or directory</p>\n<pre><code>解决\n\n sudo apt-get install uuid-dev\n</code></pre>"},{"title":"espeak编译安装","date":"2017-06-07T09:06:20.000Z","_content":"\n\n##说明\n&emsp;eSpeak是用于Linux和Windows的英文和其他语言的紧凑型开源软件语音合成器。eSpeak使用“共振峰综合”方法。这允许以小尺寸提供许多语言。讲话清晰，可以高速使用，但并不像基于人类语音记录的较大合成器那样自然或平滑。\n\n注意：在安装espeak之前必须安装portaudio框架，用于驱动声卡。\n\n[espeak官网](http://espeak.sourceforge.net/)\n##编译portaudio\n\t7z x portaudio.7z\n\tcd portaudio\n\t./configure\n\tmake \n\tsudo make install\n\n##编译espeak\n\t7z x espeak-1.48.01-source.7z\n\tcd espeak-1.48.01-source/\n\tcd src/\n\tmake\n\tsudo make install\n##安装中文和粤语支持\n在安装中文支持前，保证espeak编译安装成功\n\n进入`/espeak-1.48.01-source/dictsource$`目录\n安装中文\n\n\tespeak --compile=zh\n安装粤语\n\n\tespeak --compile=zh-yue\n##测试\n\n默认\n\n\tespeak  hello -w hello.wav\n粤语\n\n\tespeak -vzhy 你好 -w test.wav\n中文\n\n\tespeak -vzh 你好 -w test.wav\n##编译需要的源码\n\n[zhy_list.zip](http://ohjvpki1b.bkt.clouddn.com/zhy_list.zip)\n\n[zh_listx.zip](http://ohjvpki1b.bkt.clouddn.com/zh_listx.zip)\n\n[portaudio.7z](http://ohjvpki1b.bkt.clouddn.com/portaudio.7z)\n\n[espeak-1.48.01-source.7z](http://ohjvpki1b.bkt.clouddn.com/espeak-1.48.01-source.7z)\n\n##遇到问题\n###问题1\nwavegen.o: In function `WavegenOpenSound() [clone .part.2]':\nwavegen.cpp:(.text+0x26c): undefined reference to `Pa_StreamActive'\nwavegen.o: In function `WavegenCloseSound()':\nwavegen.cpp:(.text+0x58e): undefined reference to `Pa_StreamActive'\ncollect2: error: ld returned 1 exit status\nMakefile:105: recipe for target 'speak' failed\nmake: *** [speak] Error 1\n###解决\n\tcp portaudio19.h portaudio.h\n\tmake clean\n\tmake\n\n","source":"_posts/espeak编译安装.md","raw":"---\ntitle: espeak编译安装\ndate: 2017-06-07 17:06:20\ntags:\n---\n\n\n##说明\n&emsp;eSpeak是用于Linux和Windows的英文和其他语言的紧凑型开源软件语音合成器。eSpeak使用“共振峰综合”方法。这允许以小尺寸提供许多语言。讲话清晰，可以高速使用，但并不像基于人类语音记录的较大合成器那样自然或平滑。\n\n注意：在安装espeak之前必须安装portaudio框架，用于驱动声卡。\n\n[espeak官网](http://espeak.sourceforge.net/)\n##编译portaudio\n\t7z x portaudio.7z\n\tcd portaudio\n\t./configure\n\tmake \n\tsudo make install\n\n##编译espeak\n\t7z x espeak-1.48.01-source.7z\n\tcd espeak-1.48.01-source/\n\tcd src/\n\tmake\n\tsudo make install\n##安装中文和粤语支持\n在安装中文支持前，保证espeak编译安装成功\n\n进入`/espeak-1.48.01-source/dictsource$`目录\n安装中文\n\n\tespeak --compile=zh\n安装粤语\n\n\tespeak --compile=zh-yue\n##测试\n\n默认\n\n\tespeak  hello -w hello.wav\n粤语\n\n\tespeak -vzhy 你好 -w test.wav\n中文\n\n\tespeak -vzh 你好 -w test.wav\n##编译需要的源码\n\n[zhy_list.zip](http://ohjvpki1b.bkt.clouddn.com/zhy_list.zip)\n\n[zh_listx.zip](http://ohjvpki1b.bkt.clouddn.com/zh_listx.zip)\n\n[portaudio.7z](http://ohjvpki1b.bkt.clouddn.com/portaudio.7z)\n\n[espeak-1.48.01-source.7z](http://ohjvpki1b.bkt.clouddn.com/espeak-1.48.01-source.7z)\n\n##遇到问题\n###问题1\nwavegen.o: In function `WavegenOpenSound() [clone .part.2]':\nwavegen.cpp:(.text+0x26c): undefined reference to `Pa_StreamActive'\nwavegen.o: In function `WavegenCloseSound()':\nwavegen.cpp:(.text+0x58e): undefined reference to `Pa_StreamActive'\ncollect2: error: ld returned 1 exit status\nMakefile:105: recipe for target 'speak' failed\nmake: *** [speak] Error 1\n###解决\n\tcp portaudio19.h portaudio.h\n\tmake clean\n\tmake\n\n","slug":"espeak编译安装","published":1,"updated":"2017-09-21T02:35:21.626Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7tuhpo10000nd5lv7bfimlx","content":"<p>##说明<br>&emsp;eSpeak是用于Linux和Windows的英文和其他语言的紧凑型开源软件语音合成器。eSpeak使用“共振峰综合”方法。这允许以小尺寸提供许多语言。讲话清晰，可以高速使用，但并不像基于人类语音记录的较大合成器那样自然或平滑。</p>\n<p>注意：在安装espeak之前必须安装portaudio框架，用于驱动声卡。</p>\n<p><a href=\"http://espeak.sourceforge.net/\" target=\"_blank\" rel=\"external\">espeak官网</a></p>\n<p>##编译portaudio<br>    7z x portaudio.7z<br>    cd portaudio<br>    ./configure<br>    make<br>    sudo make install</p>\n<p>##编译espeak<br>    7z x espeak-1.48.01-source.7z<br>    cd espeak-1.48.01-source/<br>    cd src/<br>    make<br>    sudo make install</p>\n<p>##安装中文和粤语支持<br>在安装中文支持前，保证espeak编译安装成功</p>\n<p>进入<code>/espeak-1.48.01-source/dictsource$</code>目录<br>安装中文</p>\n<pre><code>espeak --compile=zh\n</code></pre><p>安装粤语</p>\n<pre><code>espeak --compile=zh-yue\n</code></pre><p>##测试</p>\n<p>默认</p>\n<pre><code>espeak  hello -w hello.wav\n</code></pre><p>粤语</p>\n<pre><code>espeak -vzhy 你好 -w test.wav\n</code></pre><p>中文</p>\n<pre><code>espeak -vzh 你好 -w test.wav\n</code></pre><p>##编译需要的源码</p>\n<p><a href=\"http://ohjvpki1b.bkt.clouddn.com/zhy_list.zip\" target=\"_blank\" rel=\"external\">zhy_list.zip</a></p>\n<p><a href=\"http://ohjvpki1b.bkt.clouddn.com/zh_listx.zip\" target=\"_blank\" rel=\"external\">zh_listx.zip</a></p>\n<p><a href=\"http://ohjvpki1b.bkt.clouddn.com/portaudio.7z\" target=\"_blank\" rel=\"external\">portaudio.7z</a></p>\n<p><a href=\"http://ohjvpki1b.bkt.clouddn.com/espeak-1.48.01-source.7z\" target=\"_blank\" rel=\"external\">espeak-1.48.01-source.7z</a></p>\n<p>##遇到问题</p>\n<p>###问题1<br>wavegen.o: In function <code>WavegenOpenSound() [clone .part.2]&#39;:\nwavegen.cpp:(.text+0x26c): undefined reference to</code>Pa_StreamActive’<br>wavegen.o: In function <code>WavegenCloseSound()&#39;:\nwavegen.cpp:(.text+0x58e): undefined reference to</code>Pa_StreamActive’<br>collect2: error: ld returned 1 exit status<br>Makefile:105: recipe for target ‘speak’ failed<br>make: <em>*</em> [speak] Error 1</p>\n<p>###解决<br>    cp portaudio19.h portaudio.h<br>    make clean<br>    make</p>\n","excerpt":"","more":"<p>##说明<br>&emsp;eSpeak是用于Linux和Windows的英文和其他语言的紧凑型开源软件语音合成器。eSpeak使用“共振峰综合”方法。这允许以小尺寸提供许多语言。讲话清晰，可以高速使用，但并不像基于人类语音记录的较大合成器那样自然或平滑。</p>\n<p>注意：在安装espeak之前必须安装portaudio框架，用于驱动声卡。</p>\n<p><a href=\"http://espeak.sourceforge.net/\">espeak官网</a></p>\n<p>##编译portaudio<br>    7z x portaudio.7z<br>    cd portaudio<br>    ./configure<br>    make<br>    sudo make install</p>\n<p>##编译espeak<br>    7z x espeak-1.48.01-source.7z<br>    cd espeak-1.48.01-source/<br>    cd src/<br>    make<br>    sudo make install</p>\n<p>##安装中文和粤语支持<br>在安装中文支持前，保证espeak编译安装成功</p>\n<p>进入<code>/espeak-1.48.01-source/dictsource$</code>目录<br>安装中文</p>\n<pre><code>espeak --compile=zh\n</code></pre><p>安装粤语</p>\n<pre><code>espeak --compile=zh-yue\n</code></pre><p>##测试</p>\n<p>默认</p>\n<pre><code>espeak  hello -w hello.wav\n</code></pre><p>粤语</p>\n<pre><code>espeak -vzhy 你好 -w test.wav\n</code></pre><p>中文</p>\n<pre><code>espeak -vzh 你好 -w test.wav\n</code></pre><p>##编译需要的源码</p>\n<p><a href=\"http://ohjvpki1b.bkt.clouddn.com/zhy_list.zip\">zhy_list.zip</a></p>\n<p><a href=\"http://ohjvpki1b.bkt.clouddn.com/zh_listx.zip\">zh_listx.zip</a></p>\n<p><a href=\"http://ohjvpki1b.bkt.clouddn.com/portaudio.7z\">portaudio.7z</a></p>\n<p><a href=\"http://ohjvpki1b.bkt.clouddn.com/espeak-1.48.01-source.7z\">espeak-1.48.01-source.7z</a></p>\n<p>##遇到问题</p>\n<p>###问题1<br>wavegen.o: In function <code>WavegenOpenSound() [clone .part.2]&#39;:\nwavegen.cpp:(.text+0x26c): undefined reference to</code>Pa_StreamActive’<br>wavegen.o: In function <code>WavegenCloseSound()&#39;:\nwavegen.cpp:(.text+0x58e): undefined reference to</code>Pa_StreamActive’<br>collect2: error: ld returned 1 exit status<br>Makefile:105: recipe for target ‘speak’ failed<br>make: <em>*</em> [speak] Error 1</p>\n<p>###解决<br>    cp portaudio19.h portaudio.h<br>    make clean<br>    make</p>\n"},{"title":"haproxy代理搭建","date":"2017-06-08T09:06:20.000Z","_content":"\n##1.编译安装\n\tcd /usr/local/src\n\ttar zxf haproxy-1.7.5.tar.gz \n\tcd haproxy-1.7.5 \n\tmake  TARGET=linux26 ARCH=x86_64 PREFIX=/usr/local/haproxy \n\tmake install PREFIX=/usr/local/haproxy\n\n##2.设置haproxy\n\n\tmkdir -p /usr/local/haproxy/conf  #创建配置文件目录\n\tmkdir -p /etc/haproxy #创建配置文件目录\n\ttouch /usr/local/haproxy/conf/haproxy.cfg  #创建配置文件\n\tln -s /usr/local/haproxy/conf/haproxy.cfg /etc/haproxy/haproxy.cfg\n###2.1添加配置语言的软链接\n\tcp -r /usr/local/src/haproxy-1.7.2/examples/errorfiles /usr/local/haproxy/errorfiles\n###2.2拷错误页面\n\tln -s /usr/local/haproxy/errorfiles /etc/haproxy/errorfiles \n###2.3添加软连接\n\tmkdir -p /usr/local/haproxy/log\n###2.4创建日志文件目录\n\ttouch /usr/local/haproxy/log/haprosy.log\n####2.5创建日志文\n\tln -s /usr/local/haproxy/log/haproxy.log /var/log/haproxy.log\n###2.6添加软连接\n\tcp -r /usr/local/src/haproxy-1.7.2/examples/haproxy.init /etc/init.d/haproxy \n###2.7复制开机启动脚本文件\n\tchmod +x /etc/init.d/haproxy\n###2.8添加脚本执行权限\n\tln -s /usr/local/haproxy/sbin/haproxy /usr/sbin \n\n##3.配置haproxy.cfg参数\nvim /usr/local/haproxy/conf/haproxy.cfg\n\n\t#---------------------------------------------------------------------\n\t# Global settings\n\t#---------------------------------------------------------------------\n\tglobal\n\t    log    127.0.0.1 local3          ###[err warning info debug] \n\t    chroot  /usr/local/haproxy\n\t    pidfile  /var/run/haproxy.pid   ###haproxy的pid存放路径,启动进程的用户必须有权限访问此文件 \n\t    maxconn  4000                   ###最大连接数，默认4000\n\t    user   haproxy\n\t    group   haproxy\n\t    daemon                          ###创建1个进程进入deamon模式运行。此参数要求将运行模式设置为\"daemon\"\n\t  \n\t#---------------------------------------------------------------------\n\t# common defaults that all the 'listen' and 'backend' sections will \n\t# use if not designated in their block\n\t#---------------------------------------------------------------------\n\tdefaults\n\t    mode   http             ###默认的模式mode { tcp|http|health }，tcp是4层，http是7层，health只会返回OK\n\t    log    global           ###采用全局定义的日志\n\t    option  dontlognull     ###不记录健康检查的日志信息\n\t    option  httpclose       ###每次请求完毕后主动关闭http通道 \n\t    option  httplog         ###日志类别http日志格式 \n\t    option  forwardfor      ###如果后端服务器需要获得客户端真实ip需要配置的参数，可以从Http Header中获得客户端ip  \n\t    option  redispatch      ###serverId对应的服务器挂掉后,强制定向到其他健康的服务器\n\t    timeout connect 10000   #default 10 second timeout if a backend is not found\n\t    timeout client 300000   ###客户端连接超时\n\t    timeout server 300000   ###服务器连接超时\n\t    maxconn     60000       ###最大连接数\n\t    retries     3           ###3次连接失败就认为服务不可用，也可以通过后面设置 \n\t####################################################################\n\tlisten stats\n\t        bind 0.0.0.0:7766           #监听端口  \n\t        stats refresh 30s           #统计页面自动刷新时间  \n\t        stats uri /stats            #统计页面url  \n\t        stats realm Haproxy Manager #统计页面密码框上提示文本  \n\t        stats auth admin:admin      #统计页面用户名和密码设置  \n\t        #stats hide-version         #隐藏统计页面上HAProxy的版本信息\n\t#---------------------------------------------------------------------\n\t# main frontend which proxys to the backends\n\t#---------------------------------------------------------------------\n\tfrontend main\n\t    bind 0.0.0.0:80\n\t    acl url_static path_beg    -i /static /images /javascript /stylesheets\n\t    acl url_static path_end    -i .jpg .gif .png .css .js\n\t  \n\t    use_backend static if url_static     ###满足策略要求，则响应策略定义的backend页面\n\t    default_backend   dynamic            ###不满足则响应backend的默认页面\n\t  \n\t#---------------------------------------------------------------------\n\t# static backend for serving up images, stylesheets and such\n\t#---------------------------------------------------------------------\n\t  \n\tbackend static\n\t    balance     roundrobin                 ###负载均衡模式轮询\n\t    server      static 127.0.0.1:80 check ###后端服务器定义\n\t      \n\tbackend dynamic\n\t    balance    roundrobin\n\t    server         websrv1 10.252.97.106:80 check maxconn 2000\n\t    server         websrv2 10.117.8.20:80 check maxconn 2000\n\t  \n\t#---------------------------------------------------------------------\n\t# round robin balancing between the various backends\n\t#---------------------------------------------------------------------\n\t#errorloc  503  http://www.osyunwei.com/404.html\n\terrorfile 403 /etc/haproxy/errorfiles/403.http\n\terrorfile 500 /etc/haproxy/errorfiles/500.http\n\terrorfile 502 /etc/haproxy/errorfiles/502.http\n\terrorfile 503 /etc/haproxy/errorfiles/503.http\n\terrorfile 504 /etc/haproxy/errorfiles/504.http\n\n##4.启动haproxy\n\tsudo /usr/local/sbin/haproxy -f /usr/local/haproxy/conf/haproxy.cfg\n\n##5.设置haproxy日志\nvim /etc/rsyslog.conf\n添加\n\n\n\tlocal7.*        /var/log/boot.log\n\t\n\tlocal3.*       /var/log/haproxy.log\n\n保存后重启服务\nservice rsyslog restart\n\n##6.浏览器打开haproxy的监控页面\n输入http://192.168.141.188:7766/stats\n\n说明：1080是haproxy配置文件中监听的端口，stats是配置文件中的监听名称\n用户名密码是admin:admin也是配置文件中定义的\n\n\n##7.关闭haproxy\n\n\tsudo ps -ef|grep haproxy\n\tsudo kill 进程pid\n查看端口\n\n\tsudo netstat  -tnl \n\n##8.用到源码和配置文件\n[haproxy-1.7.5.tar.gz](http://ohjvpki1b.bkt.clouddn.com/haproxy-1.7.5.tar.gz)\n\n[haproxy.cfg](http://ohjvpki1b.bkt.clouddn.com/haproxy.cfg)","source":"_posts/haproxy代理搭建.md","raw":"---\ntitle: haproxy代理搭建\ndate: 2017-06-08 17:06:20\ntags:\n---\n\n##1.编译安装\n\tcd /usr/local/src\n\ttar zxf haproxy-1.7.5.tar.gz \n\tcd haproxy-1.7.5 \n\tmake  TARGET=linux26 ARCH=x86_64 PREFIX=/usr/local/haproxy \n\tmake install PREFIX=/usr/local/haproxy\n\n##2.设置haproxy\n\n\tmkdir -p /usr/local/haproxy/conf  #创建配置文件目录\n\tmkdir -p /etc/haproxy #创建配置文件目录\n\ttouch /usr/local/haproxy/conf/haproxy.cfg  #创建配置文件\n\tln -s /usr/local/haproxy/conf/haproxy.cfg /etc/haproxy/haproxy.cfg\n###2.1添加配置语言的软链接\n\tcp -r /usr/local/src/haproxy-1.7.2/examples/errorfiles /usr/local/haproxy/errorfiles\n###2.2拷错误页面\n\tln -s /usr/local/haproxy/errorfiles /etc/haproxy/errorfiles \n###2.3添加软连接\n\tmkdir -p /usr/local/haproxy/log\n###2.4创建日志文件目录\n\ttouch /usr/local/haproxy/log/haprosy.log\n####2.5创建日志文\n\tln -s /usr/local/haproxy/log/haproxy.log /var/log/haproxy.log\n###2.6添加软连接\n\tcp -r /usr/local/src/haproxy-1.7.2/examples/haproxy.init /etc/init.d/haproxy \n###2.7复制开机启动脚本文件\n\tchmod +x /etc/init.d/haproxy\n###2.8添加脚本执行权限\n\tln -s /usr/local/haproxy/sbin/haproxy /usr/sbin \n\n##3.配置haproxy.cfg参数\nvim /usr/local/haproxy/conf/haproxy.cfg\n\n\t#---------------------------------------------------------------------\n\t# Global settings\n\t#---------------------------------------------------------------------\n\tglobal\n\t    log    127.0.0.1 local3          ###[err warning info debug] \n\t    chroot  /usr/local/haproxy\n\t    pidfile  /var/run/haproxy.pid   ###haproxy的pid存放路径,启动进程的用户必须有权限访问此文件 \n\t    maxconn  4000                   ###最大连接数，默认4000\n\t    user   haproxy\n\t    group   haproxy\n\t    daemon                          ###创建1个进程进入deamon模式运行。此参数要求将运行模式设置为\"daemon\"\n\t  \n\t#---------------------------------------------------------------------\n\t# common defaults that all the 'listen' and 'backend' sections will \n\t# use if not designated in their block\n\t#---------------------------------------------------------------------\n\tdefaults\n\t    mode   http             ###默认的模式mode { tcp|http|health }，tcp是4层，http是7层，health只会返回OK\n\t    log    global           ###采用全局定义的日志\n\t    option  dontlognull     ###不记录健康检查的日志信息\n\t    option  httpclose       ###每次请求完毕后主动关闭http通道 \n\t    option  httplog         ###日志类别http日志格式 \n\t    option  forwardfor      ###如果后端服务器需要获得客户端真实ip需要配置的参数，可以从Http Header中获得客户端ip  \n\t    option  redispatch      ###serverId对应的服务器挂掉后,强制定向到其他健康的服务器\n\t    timeout connect 10000   #default 10 second timeout if a backend is not found\n\t    timeout client 300000   ###客户端连接超时\n\t    timeout server 300000   ###服务器连接超时\n\t    maxconn     60000       ###最大连接数\n\t    retries     3           ###3次连接失败就认为服务不可用，也可以通过后面设置 \n\t####################################################################\n\tlisten stats\n\t        bind 0.0.0.0:7766           #监听端口  \n\t        stats refresh 30s           #统计页面自动刷新时间  \n\t        stats uri /stats            #统计页面url  \n\t        stats realm Haproxy Manager #统计页面密码框上提示文本  \n\t        stats auth admin:admin      #统计页面用户名和密码设置  \n\t        #stats hide-version         #隐藏统计页面上HAProxy的版本信息\n\t#---------------------------------------------------------------------\n\t# main frontend which proxys to the backends\n\t#---------------------------------------------------------------------\n\tfrontend main\n\t    bind 0.0.0.0:80\n\t    acl url_static path_beg    -i /static /images /javascript /stylesheets\n\t    acl url_static path_end    -i .jpg .gif .png .css .js\n\t  \n\t    use_backend static if url_static     ###满足策略要求，则响应策略定义的backend页面\n\t    default_backend   dynamic            ###不满足则响应backend的默认页面\n\t  \n\t#---------------------------------------------------------------------\n\t# static backend for serving up images, stylesheets and such\n\t#---------------------------------------------------------------------\n\t  \n\tbackend static\n\t    balance     roundrobin                 ###负载均衡模式轮询\n\t    server      static 127.0.0.1:80 check ###后端服务器定义\n\t      \n\tbackend dynamic\n\t    balance    roundrobin\n\t    server         websrv1 10.252.97.106:80 check maxconn 2000\n\t    server         websrv2 10.117.8.20:80 check maxconn 2000\n\t  \n\t#---------------------------------------------------------------------\n\t# round robin balancing between the various backends\n\t#---------------------------------------------------------------------\n\t#errorloc  503  http://www.osyunwei.com/404.html\n\terrorfile 403 /etc/haproxy/errorfiles/403.http\n\terrorfile 500 /etc/haproxy/errorfiles/500.http\n\terrorfile 502 /etc/haproxy/errorfiles/502.http\n\terrorfile 503 /etc/haproxy/errorfiles/503.http\n\terrorfile 504 /etc/haproxy/errorfiles/504.http\n\n##4.启动haproxy\n\tsudo /usr/local/sbin/haproxy -f /usr/local/haproxy/conf/haproxy.cfg\n\n##5.设置haproxy日志\nvim /etc/rsyslog.conf\n添加\n\n\n\tlocal7.*        /var/log/boot.log\n\t\n\tlocal3.*       /var/log/haproxy.log\n\n保存后重启服务\nservice rsyslog restart\n\n##6.浏览器打开haproxy的监控页面\n输入http://192.168.141.188:7766/stats\n\n说明：1080是haproxy配置文件中监听的端口，stats是配置文件中的监听名称\n用户名密码是admin:admin也是配置文件中定义的\n\n\n##7.关闭haproxy\n\n\tsudo ps -ef|grep haproxy\n\tsudo kill 进程pid\n查看端口\n\n\tsudo netstat  -tnl \n\n##8.用到源码和配置文件\n[haproxy-1.7.5.tar.gz](http://ohjvpki1b.bkt.clouddn.com/haproxy-1.7.5.tar.gz)\n\n[haproxy.cfg](http://ohjvpki1b.bkt.clouddn.com/haproxy.cfg)","slug":"haproxy代理搭建","published":1,"updated":"2017-09-21T02:35:21.626Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7tuhpog0001nd5lp214090g","content":"<p>##1.编译安装<br>    cd /usr/local/src<br>    tar zxf haproxy-1.7.5.tar.gz<br>    cd haproxy-1.7.5<br>    make  TARGET=linux26 ARCH=x86_64 PREFIX=/usr/local/haproxy<br>    make install PREFIX=/usr/local/haproxy</p>\n<p>##2.设置haproxy</p>\n<pre><code>mkdir -p /usr/local/haproxy/conf  #创建配置文件目录\nmkdir -p /etc/haproxy #创建配置文件目录\ntouch /usr/local/haproxy/conf/haproxy.cfg  #创建配置文件\nln -s /usr/local/haproxy/conf/haproxy.cfg /etc/haproxy/haproxy.cfg\n</code></pre><p>###2.1添加配置语言的软链接<br>    cp -r /usr/local/src/haproxy-1.7.2/examples/errorfiles /usr/local/haproxy/errorfiles</p>\n<p>###2.2拷错误页面<br>    ln -s /usr/local/haproxy/errorfiles /etc/haproxy/errorfiles </p>\n<p>###2.3添加软连接<br>    mkdir -p /usr/local/haproxy/log</p>\n<p>###2.4创建日志文件目录<br>    touch /usr/local/haproxy/log/haprosy.log</p>\n<p>####2.5创建日志文<br>    ln -s /usr/local/haproxy/log/haproxy.log /var/log/haproxy.log</p>\n<p>###2.6添加软连接<br>    cp -r /usr/local/src/haproxy-1.7.2/examples/haproxy.init /etc/init.d/haproxy </p>\n<p>###2.7复制开机启动脚本文件<br>    chmod +x /etc/init.d/haproxy</p>\n<p>###2.8添加脚本执行权限<br>    ln -s /usr/local/haproxy/sbin/haproxy /usr/sbin </p>\n<p>##3.配置haproxy.cfg参数<br>vim /usr/local/haproxy/conf/haproxy.cfg</p>\n<pre><code>#---------------------------------------------------------------------\n# Global settings\n#---------------------------------------------------------------------\nglobal\n    log    127.0.0.1 local3          ###[err warning info debug] \n    chroot  /usr/local/haproxy\n    pidfile  /var/run/haproxy.pid   ###haproxy的pid存放路径,启动进程的用户必须有权限访问此文件 \n    maxconn  4000                   ###最大连接数，默认4000\n    user   haproxy\n    group   haproxy\n    daemon                          ###创建1个进程进入deamon模式运行。此参数要求将运行模式设置为&quot;daemon&quot;\n\n#---------------------------------------------------------------------\n# common defaults that all the &apos;listen&apos; and &apos;backend&apos; sections will \n# use if not designated in their block\n#---------------------------------------------------------------------\ndefaults\n    mode   http             ###默认的模式mode { tcp|http|health }，tcp是4层，http是7层，health只会返回OK\n    log    global           ###采用全局定义的日志\n    option  dontlognull     ###不记录健康检查的日志信息\n    option  httpclose       ###每次请求完毕后主动关闭http通道 \n    option  httplog         ###日志类别http日志格式 \n    option  forwardfor      ###如果后端服务器需要获得客户端真实ip需要配置的参数，可以从Http Header中获得客户端ip  \n    option  redispatch      ###serverId对应的服务器挂掉后,强制定向到其他健康的服务器\n    timeout connect 10000   #default 10 second timeout if a backend is not found\n    timeout client 300000   ###客户端连接超时\n    timeout server 300000   ###服务器连接超时\n    maxconn     60000       ###最大连接数\n    retries     3           ###3次连接失败就认为服务不可用，也可以通过后面设置 \n####################################################################\nlisten stats\n        bind 0.0.0.0:7766           #监听端口  \n        stats refresh 30s           #统计页面自动刷新时间  \n        stats uri /stats            #统计页面url  \n        stats realm Haproxy Manager #统计页面密码框上提示文本  \n        stats auth admin:admin      #统计页面用户名和密码设置  \n        #stats hide-version         #隐藏统计页面上HAProxy的版本信息\n#---------------------------------------------------------------------\n# main frontend which proxys to the backends\n#---------------------------------------------------------------------\nfrontend main\n    bind 0.0.0.0:80\n    acl url_static path_beg    -i /static /images /javascript /stylesheets\n    acl url_static path_end    -i .jpg .gif .png .css .js\n\n    use_backend static if url_static     ###满足策略要求，则响应策略定义的backend页面\n    default_backend   dynamic            ###不满足则响应backend的默认页面\n\n#---------------------------------------------------------------------\n# static backend for serving up images, stylesheets and such\n#---------------------------------------------------------------------\n\nbackend static\n    balance     roundrobin                 ###负载均衡模式轮询\n    server      static 127.0.0.1:80 check ###后端服务器定义\n\nbackend dynamic\n    balance    roundrobin\n    server         websrv1 10.252.97.106:80 check maxconn 2000\n    server         websrv2 10.117.8.20:80 check maxconn 2000\n\n#---------------------------------------------------------------------\n# round robin balancing between the various backends\n#---------------------------------------------------------------------\n#errorloc  503  http://www.osyunwei.com/404.html\nerrorfile 403 /etc/haproxy/errorfiles/403.http\nerrorfile 500 /etc/haproxy/errorfiles/500.http\nerrorfile 502 /etc/haproxy/errorfiles/502.http\nerrorfile 503 /etc/haproxy/errorfiles/503.http\nerrorfile 504 /etc/haproxy/errorfiles/504.http\n</code></pre><p>##4.启动haproxy<br>    sudo /usr/local/sbin/haproxy -f /usr/local/haproxy/conf/haproxy.cfg</p>\n<p>##5.设置haproxy日志<br>vim /etc/rsyslog.conf<br>添加</p>\n<pre><code>local7.*        /var/log/boot.log\n\nlocal3.*       /var/log/haproxy.log\n</code></pre><p>保存后重启服务<br>service rsyslog restart</p>\n<p>##6.浏览器打开haproxy的监控页面<br>输入<a href=\"http://192.168.141.188:7766/stats\" target=\"_blank\" rel=\"external\">http://192.168.141.188:7766/stats</a></p>\n<p>说明：1080是haproxy配置文件中监听的端口，stats是配置文件中的监听名称<br>用户名密码是admin:admin也是配置文件中定义的</p>\n<p>##7.关闭haproxy</p>\n<pre><code>sudo ps -ef|grep haproxy\nsudo kill 进程pid\n</code></pre><p>查看端口</p>\n<pre><code>sudo netstat  -tnl \n</code></pre><p>##8.用到源码和配置文件<br><a href=\"http://ohjvpki1b.bkt.clouddn.com/haproxy-1.7.5.tar.gz\" target=\"_blank\" rel=\"external\">haproxy-1.7.5.tar.gz</a></p>\n<p><a href=\"http://ohjvpki1b.bkt.clouddn.com/haproxy.cfg\" target=\"_blank\" rel=\"external\">haproxy.cfg</a></p>\n","excerpt":"","more":"<p>##1.编译安装<br>    cd /usr/local/src<br>    tar zxf haproxy-1.7.5.tar.gz<br>    cd haproxy-1.7.5<br>    make  TARGET=linux26 ARCH=x86_64 PREFIX=/usr/local/haproxy<br>    make install PREFIX=/usr/local/haproxy</p>\n<p>##2.设置haproxy</p>\n<pre><code>mkdir -p /usr/local/haproxy/conf  #创建配置文件目录\nmkdir -p /etc/haproxy #创建配置文件目录\ntouch /usr/local/haproxy/conf/haproxy.cfg  #创建配置文件\nln -s /usr/local/haproxy/conf/haproxy.cfg /etc/haproxy/haproxy.cfg\n</code></pre><p>###2.1添加配置语言的软链接<br>    cp -r /usr/local/src/haproxy-1.7.2/examples/errorfiles /usr/local/haproxy/errorfiles</p>\n<p>###2.2拷错误页面<br>    ln -s /usr/local/haproxy/errorfiles /etc/haproxy/errorfiles </p>\n<p>###2.3添加软连接<br>    mkdir -p /usr/local/haproxy/log</p>\n<p>###2.4创建日志文件目录<br>    touch /usr/local/haproxy/log/haprosy.log</p>\n<p>####2.5创建日志文<br>    ln -s /usr/local/haproxy/log/haproxy.log /var/log/haproxy.log</p>\n<p>###2.6添加软连接<br>    cp -r /usr/local/src/haproxy-1.7.2/examples/haproxy.init /etc/init.d/haproxy </p>\n<p>###2.7复制开机启动脚本文件<br>    chmod +x /etc/init.d/haproxy</p>\n<p>###2.8添加脚本执行权限<br>    ln -s /usr/local/haproxy/sbin/haproxy /usr/sbin </p>\n<p>##3.配置haproxy.cfg参数<br>vim /usr/local/haproxy/conf/haproxy.cfg</p>\n<pre><code>#---------------------------------------------------------------------\n# Global settings\n#---------------------------------------------------------------------\nglobal\n    log    127.0.0.1 local3          ###[err warning info debug] \n    chroot  /usr/local/haproxy\n    pidfile  /var/run/haproxy.pid   ###haproxy的pid存放路径,启动进程的用户必须有权限访问此文件 \n    maxconn  4000                   ###最大连接数，默认4000\n    user   haproxy\n    group   haproxy\n    daemon                          ###创建1个进程进入deamon模式运行。此参数要求将运行模式设置为&quot;daemon&quot;\n\n#---------------------------------------------------------------------\n# common defaults that all the &apos;listen&apos; and &apos;backend&apos; sections will \n# use if not designated in their block\n#---------------------------------------------------------------------\ndefaults\n    mode   http             ###默认的模式mode { tcp|http|health }，tcp是4层，http是7层，health只会返回OK\n    log    global           ###采用全局定义的日志\n    option  dontlognull     ###不记录健康检查的日志信息\n    option  httpclose       ###每次请求完毕后主动关闭http通道 \n    option  httplog         ###日志类别http日志格式 \n    option  forwardfor      ###如果后端服务器需要获得客户端真实ip需要配置的参数，可以从Http Header中获得客户端ip  \n    option  redispatch      ###serverId对应的服务器挂掉后,强制定向到其他健康的服务器\n    timeout connect 10000   #default 10 second timeout if a backend is not found\n    timeout client 300000   ###客户端连接超时\n    timeout server 300000   ###服务器连接超时\n    maxconn     60000       ###最大连接数\n    retries     3           ###3次连接失败就认为服务不可用，也可以通过后面设置 \n####################################################################\nlisten stats\n        bind 0.0.0.0:7766           #监听端口  \n        stats refresh 30s           #统计页面自动刷新时间  \n        stats uri /stats            #统计页面url  \n        stats realm Haproxy Manager #统计页面密码框上提示文本  \n        stats auth admin:admin      #统计页面用户名和密码设置  \n        #stats hide-version         #隐藏统计页面上HAProxy的版本信息\n#---------------------------------------------------------------------\n# main frontend which proxys to the backends\n#---------------------------------------------------------------------\nfrontend main\n    bind 0.0.0.0:80\n    acl url_static path_beg    -i /static /images /javascript /stylesheets\n    acl url_static path_end    -i .jpg .gif .png .css .js\n\n    use_backend static if url_static     ###满足策略要求，则响应策略定义的backend页面\n    default_backend   dynamic            ###不满足则响应backend的默认页面\n\n#---------------------------------------------------------------------\n# static backend for serving up images, stylesheets and such\n#---------------------------------------------------------------------\n\nbackend static\n    balance     roundrobin                 ###负载均衡模式轮询\n    server      static 127.0.0.1:80 check ###后端服务器定义\n\nbackend dynamic\n    balance    roundrobin\n    server         websrv1 10.252.97.106:80 check maxconn 2000\n    server         websrv2 10.117.8.20:80 check maxconn 2000\n\n#---------------------------------------------------------------------\n# round robin balancing between the various backends\n#---------------------------------------------------------------------\n#errorloc  503  http://www.osyunwei.com/404.html\nerrorfile 403 /etc/haproxy/errorfiles/403.http\nerrorfile 500 /etc/haproxy/errorfiles/500.http\nerrorfile 502 /etc/haproxy/errorfiles/502.http\nerrorfile 503 /etc/haproxy/errorfiles/503.http\nerrorfile 504 /etc/haproxy/errorfiles/504.http\n</code></pre><p>##4.启动haproxy<br>    sudo /usr/local/sbin/haproxy -f /usr/local/haproxy/conf/haproxy.cfg</p>\n<p>##5.设置haproxy日志<br>vim /etc/rsyslog.conf<br>添加</p>\n<pre><code>local7.*        /var/log/boot.log\n\nlocal3.*       /var/log/haproxy.log\n</code></pre><p>保存后重启服务<br>service rsyslog restart</p>\n<p>##6.浏览器打开haproxy的监控页面<br>输入<a href=\"http://192.168.141.188:7766/stats\">http://192.168.141.188:7766/stats</a></p>\n<p>说明：1080是haproxy配置文件中监听的端口，stats是配置文件中的监听名称<br>用户名密码是admin:admin也是配置文件中定义的</p>\n<p>##7.关闭haproxy</p>\n<pre><code>sudo ps -ef|grep haproxy\nsudo kill 进程pid\n</code></pre><p>查看端口</p>\n<pre><code>sudo netstat  -tnl \n</code></pre><p>##8.用到源码和配置文件<br><a href=\"http://ohjvpki1b.bkt.clouddn.com/haproxy-1.7.5.tar.gz\">haproxy-1.7.5.tar.gz</a></p>\n<p><a href=\"http://ohjvpki1b.bkt.clouddn.com/haproxy.cfg\">haproxy.cfg</a></p>\n"},{"title":"linux watchdog看门狗编程","date":"2017-08-30T09:06:20.000Z","_content":"\n\n##说明\n由于防止linux系统下程序突然意外终止或是陷入死循环等情况，启用看门狗机制，出现问题的时候机器重启。\n\n##初始化看门狗\n\n查看liux系统下是否有 `/dev/watchdog`控制句柄\n\n\tls /dev/watchdog\n\n代码段\n\n\tint fd = open(\"/dev/watchdog\", O_WRONLY);\n\tif(fd == -1){\n\t    printf(\"open watchdog error \\n\\n\\n\");\n\t    return false;\n\t}\n\tint timeout;\n\ttimeout = 15;\n\tioctl(fd, WDIOC_SETTIMEOUT, &timeout); //设置超时\n\tprintf(\"The timeout was set to %d seconds\\n\", timeout);\n\n##喂狗\n\tioctl(this->fd, WDIOC_KEEPALIVE);\n\n使用定时的方式运行以上语句，延时时间必须小于超时时间。","source":"_posts/linux watchdog看门狗编程.md","raw":"---\ntitle: linux watchdog看门狗编程\ndate: 2017-08-30 17:06:20\ntags:\n---\n\n\n##说明\n由于防止linux系统下程序突然意外终止或是陷入死循环等情况，启用看门狗机制，出现问题的时候机器重启。\n\n##初始化看门狗\n\n查看liux系统下是否有 `/dev/watchdog`控制句柄\n\n\tls /dev/watchdog\n\n代码段\n\n\tint fd = open(\"/dev/watchdog\", O_WRONLY);\n\tif(fd == -1){\n\t    printf(\"open watchdog error \\n\\n\\n\");\n\t    return false;\n\t}\n\tint timeout;\n\ttimeout = 15;\n\tioctl(fd, WDIOC_SETTIMEOUT, &timeout); //设置超时\n\tprintf(\"The timeout was set to %d seconds\\n\", timeout);\n\n##喂狗\n\tioctl(this->fd, WDIOC_KEEPALIVE);\n\n使用定时的方式运行以上语句，延时时间必须小于超时时间。","slug":"linux watchdog看门狗编程","published":1,"updated":"2017-09-21T02:35:21.626Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7tuhpoj0002nd5ldajnj713","content":"<p>##说明<br>由于防止linux系统下程序突然意外终止或是陷入死循环等情况，启用看门狗机制，出现问题的时候机器重启。</p>\n<p>##初始化看门狗</p>\n<p>查看liux系统下是否有 <code>/dev/watchdog</code>控制句柄</p>\n<pre><code>ls /dev/watchdog\n</code></pre><p>代码段</p>\n<pre><code>int fd = open(&quot;/dev/watchdog&quot;, O_WRONLY);\nif(fd == -1){\n    printf(&quot;open watchdog error \\n\\n\\n&quot;);\n    return false;\n}\nint timeout;\ntimeout = 15;\nioctl(fd, WDIOC_SETTIMEOUT, &amp;timeout); //设置超时\nprintf(&quot;The timeout was set to %d seconds\\n&quot;, timeout);\n</code></pre><p>##喂狗<br>    ioctl(this-&gt;fd, WDIOC_KEEPALIVE);</p>\n<p>使用定时的方式运行以上语句，延时时间必须小于超时时间。</p>\n","excerpt":"","more":"<p>##说明<br>由于防止linux系统下程序突然意外终止或是陷入死循环等情况，启用看门狗机制，出现问题的时候机器重启。</p>\n<p>##初始化看门狗</p>\n<p>查看liux系统下是否有 <code>/dev/watchdog</code>控制句柄</p>\n<pre><code>ls /dev/watchdog\n</code></pre><p>代码段</p>\n<pre><code>int fd = open(&quot;/dev/watchdog&quot;, O_WRONLY);\nif(fd == -1){\n    printf(&quot;open watchdog error \\n\\n\\n&quot;);\n    return false;\n}\nint timeout;\ntimeout = 15;\nioctl(fd, WDIOC_SETTIMEOUT, &amp;timeout); //设置超时\nprintf(&quot;The timeout was set to %d seconds\\n&quot;, timeout);\n</code></pre><p>##喂狗<br>    ioctl(this-&gt;fd, WDIOC_KEEPALIVE);</p>\n<p>使用定时的方式运行以上语句，延时时间必须小于超时时间。</p>\n"},{"title":"linux 系统下将pyqt打包成可执行文件","date":"2017-06-27T09:06:20.000Z","_content":"\n##1.解压源码包，前提安装了setuptools\n\n[官网http://www.pyinstaller.org/](http://www.pyinstaller.org/)\n\n\tunzip pyinstaller-python3.zip\n##2.安装\n\tcd pyinstaller-python3\n\tpython setup.py build\n\tpython setup.py install\n安装完之后在/usr/local/bin 生成pyinstaller可执行文件\n\n##3.编译.py文件生成可执行文件\n\tpyinstaller test.py\n在目录下生成 build和dist文件夹   可执行文件在dist目录下\n\n![clipboard](http://ohjvpki1b.bkt.clouddn.com/clipboard.png)\n","source":"_posts/linux 系统下将pyqt打包成可执行文件.md","raw":"---\ntitle: linux 系统下将pyqt打包成可执行文件\ndate: 2017-06-27 17:06:20\ntags:\n---\n\n##1.解压源码包，前提安装了setuptools\n\n[官网http://www.pyinstaller.org/](http://www.pyinstaller.org/)\n\n\tunzip pyinstaller-python3.zip\n##2.安装\n\tcd pyinstaller-python3\n\tpython setup.py build\n\tpython setup.py install\n安装完之后在/usr/local/bin 生成pyinstaller可执行文件\n\n##3.编译.py文件生成可执行文件\n\tpyinstaller test.py\n在目录下生成 build和dist文件夹   可执行文件在dist目录下\n\n![clipboard](http://ohjvpki1b.bkt.clouddn.com/clipboard.png)\n","slug":"linux 系统下将pyqt打包成可执行文件","published":1,"updated":"2017-09-21T02:35:21.626Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7tuhpol0003nd5lh8jk0dqu","content":"<p>##1.解压源码包，前提安装了setuptools</p>\n<p><a href=\"http://www.pyinstaller.org/\" target=\"_blank\" rel=\"external\">官网http://www.pyinstaller.org/</a></p>\n<pre><code>unzip pyinstaller-python3.zip\n</code></pre><p>##2.安装<br>    cd pyinstaller-python3<br>    python setup.py build<br>    python setup.py install<br>安装完之后在/usr/local/bin 生成pyinstaller可执行文件</p>\n<p>##3.编译.py文件生成可执行文件<br>    pyinstaller test.py<br>在目录下生成 build和dist文件夹   可执行文件在dist目录下</p>\n<p><img src=\"http://ohjvpki1b.bkt.clouddn.com/clipboard.png\" alt=\"clipboard\"></p>\n","excerpt":"","more":"<p>##1.解压源码包，前提安装了setuptools</p>\n<p><a href=\"http://www.pyinstaller.org/\">官网http://www.pyinstaller.org/</a></p>\n<pre><code>unzip pyinstaller-python3.zip\n</code></pre><p>##2.安装<br>    cd pyinstaller-python3<br>    python setup.py build<br>    python setup.py install<br>安装完之后在/usr/local/bin 生成pyinstaller可执行文件</p>\n<p>##3.编译.py文件生成可执行文件<br>    pyinstaller test.py<br>在目录下生成 build和dist文件夹   可执行文件在dist目录下</p>\n<p><img src=\"http://ohjvpki1b.bkt.clouddn.com/clipboard.png\" alt=\"clipboard\"></p>\n"},{"title":"mantisbt 2.5.0在nginx服务器上安装","date":"2017-06-15T09:06:20.000Z","_content":"\n\n##说明\n由于安装2.5.0.版本失败，检测配置没有错，但是无法生成`config_inc.php`文件所以考虑安装2.0.0版本然后再覆盖安装。\n\n##环境\nubuntu14.04  nginx  mysql\n\n##安装mantisbt-2.0.0\n\t\n\twget https://sourceforge.net/projects/mantisbt/files/mantis-stable/2.0.0/mantisbt-2.0.0.tar.gz/download -O mantisbt.tar.gz\n\t\n\ttar xzvf mantisbt.tar.gz\n\t\n\tcp mantisbt /var/www/\n\t\n\thttp://你的网址/admin/install.php\n\n![msm8909_gpio5.png](http://ohjvpki1b.bkt.clouddn.com/mantisbt-pre-installation-check.jpg.jpg)\n\n##安装过程视频教程\n\n[How to Install Mantis Bug Tracker v2 with Nginx and PHP 7](http://ohjvpki1b.bkt.clouddn.com/How%20to%20Install%20Mantis%20Bug%20Tracker%20v2%20with%20Nginx%20and%20PHP%207.mp4)\n##参考\n[http://www.cnblogs.com/snooper/archive/2009/09/07/1561715.html](http://www.cnblogs.com/snooper/archive/2009/09/07/1561715.html)\n\n[https://tjosm.com/6226/install-mantisbt-v2-ubuntu-php7-nginx-virtualmin/](https://tjosm.com/6226/install-mantisbt-v2-ubuntu-php7-nginx-virtualmin/)\n\n##安装mantisbt-2.5.0\n\n直接覆盖2.0.0版本\n\n\ttar xzvf mantisbt2.5.0.tar.gz\n\tcp -r mantisbt2.5.0 /var/www/mantisbt","source":"_posts/mantisbt 2.5.0在nginx服务器上安装.md","raw":"---\ntitle: mantisbt 2.5.0在nginx服务器上安装\ndate: 2017-06-15 17:06:20\ntags:\n---\n\n\n##说明\n由于安装2.5.0.版本失败，检测配置没有错，但是无法生成`config_inc.php`文件所以考虑安装2.0.0版本然后再覆盖安装。\n\n##环境\nubuntu14.04  nginx  mysql\n\n##安装mantisbt-2.0.0\n\t\n\twget https://sourceforge.net/projects/mantisbt/files/mantis-stable/2.0.0/mantisbt-2.0.0.tar.gz/download -O mantisbt.tar.gz\n\t\n\ttar xzvf mantisbt.tar.gz\n\t\n\tcp mantisbt /var/www/\n\t\n\thttp://你的网址/admin/install.php\n\n![msm8909_gpio5.png](http://ohjvpki1b.bkt.clouddn.com/mantisbt-pre-installation-check.jpg.jpg)\n\n##安装过程视频教程\n\n[How to Install Mantis Bug Tracker v2 with Nginx and PHP 7](http://ohjvpki1b.bkt.clouddn.com/How%20to%20Install%20Mantis%20Bug%20Tracker%20v2%20with%20Nginx%20and%20PHP%207.mp4)\n##参考\n[http://www.cnblogs.com/snooper/archive/2009/09/07/1561715.html](http://www.cnblogs.com/snooper/archive/2009/09/07/1561715.html)\n\n[https://tjosm.com/6226/install-mantisbt-v2-ubuntu-php7-nginx-virtualmin/](https://tjosm.com/6226/install-mantisbt-v2-ubuntu-php7-nginx-virtualmin/)\n\n##安装mantisbt-2.5.0\n\n直接覆盖2.0.0版本\n\n\ttar xzvf mantisbt2.5.0.tar.gz\n\tcp -r mantisbt2.5.0 /var/www/mantisbt","slug":"mantisbt 2.5.0在nginx服务器上安装","published":1,"updated":"2017-09-21T02:35:21.626Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7tuhpon0004nd5lc56ezp3w","content":"<p>##说明<br>由于安装2.5.0.版本失败，检测配置没有错，但是无法生成<code>config_inc.php</code>文件所以考虑安装2.0.0版本然后再覆盖安装。</p>\n<p>##环境<br>ubuntu14.04  nginx  mysql</p>\n<p>##安装mantisbt-2.0.0</p>\n<pre><code>wget https://sourceforge.net/projects/mantisbt/files/mantis-stable/2.0.0/mantisbt-2.0.0.tar.gz/download -O mantisbt.tar.gz\n\ntar xzvf mantisbt.tar.gz\n\ncp mantisbt /var/www/\n\nhttp://你的网址/admin/install.php\n</code></pre><p><img src=\"http://ohjvpki1b.bkt.clouddn.com/mantisbt-pre-installation-check.jpg.jpg\" alt=\"msm8909_gpio5.png\"></p>\n<p>##安装过程视频教程</p>\n<p><a href=\"http://ohjvpki1b.bkt.clouddn.com/How%20to%20Install%20Mantis%20Bug%20Tracker%20v2%20with%20Nginx%20and%20PHP%207.mp4\" target=\"_blank\" rel=\"external\">How to Install Mantis Bug Tracker v2 with Nginx and PHP 7</a></p>\n<p>##参考<br><a href=\"http://www.cnblogs.com/snooper/archive/2009/09/07/1561715.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/snooper/archive/2009/09/07/1561715.html</a></p>\n<p><a href=\"https://tjosm.com/6226/install-mantisbt-v2-ubuntu-php7-nginx-virtualmin/\" target=\"_blank\" rel=\"external\">https://tjosm.com/6226/install-mantisbt-v2-ubuntu-php7-nginx-virtualmin/</a></p>\n<p>##安装mantisbt-2.5.0</p>\n<p>直接覆盖2.0.0版本</p>\n<pre><code>tar xzvf mantisbt2.5.0.tar.gz\ncp -r mantisbt2.5.0 /var/www/mantisbt\n</code></pre>","excerpt":"","more":"<p>##说明<br>由于安装2.5.0.版本失败，检测配置没有错，但是无法生成<code>config_inc.php</code>文件所以考虑安装2.0.0版本然后再覆盖安装。</p>\n<p>##环境<br>ubuntu14.04  nginx  mysql</p>\n<p>##安装mantisbt-2.0.0</p>\n<pre><code>wget https://sourceforge.net/projects/mantisbt/files/mantis-stable/2.0.0/mantisbt-2.0.0.tar.gz/download -O mantisbt.tar.gz\n\ntar xzvf mantisbt.tar.gz\n\ncp mantisbt /var/www/\n\nhttp://你的网址/admin/install.php\n</code></pre><p><img src=\"http://ohjvpki1b.bkt.clouddn.com/mantisbt-pre-installation-check.jpg.jpg\" alt=\"msm8909_gpio5.png\"></p>\n<p>##安装过程视频教程</p>\n<p><a href=\"http://ohjvpki1b.bkt.clouddn.com/How%20to%20Install%20Mantis%20Bug%20Tracker%20v2%20with%20Nginx%20and%20PHP%207.mp4\">How to Install Mantis Bug Tracker v2 with Nginx and PHP 7</a></p>\n<p>##参考<br><a href=\"http://www.cnblogs.com/snooper/archive/2009/09/07/1561715.html\">http://www.cnblogs.com/snooper/archive/2009/09/07/1561715.html</a></p>\n<p><a href=\"https://tjosm.com/6226/install-mantisbt-v2-ubuntu-php7-nginx-virtualmin/\">https://tjosm.com/6226/install-mantisbt-v2-ubuntu-php7-nginx-virtualmin/</a></p>\n<p>##安装mantisbt-2.5.0</p>\n<p>直接覆盖2.0.0版本</p>\n<pre><code>tar xzvf mantisbt2.5.0.tar.gz\ncp -r mantisbt2.5.0 /var/www/mantisbt\n</code></pre>"},{"title":"mysql删除有空格字符名称的触发器","date":"2017-04-12T09:06:20.000Z","_content":"\n\n之前在mysq添加触发器的过程中，使用名称不规范使产生如下触发器名称：\n\n\tdoor_machine_insert_ trigger\n\n中间存在空格字符\n\n使用以下删除语句时候提示出错\n\n\tDROP TRIGGER door_machine_insert_ trigger；\n\n\n然后改为\n\n\tDROP TRIGGER `door_machine_insert_ trigger`;\n\n删除成功","source":"_posts/mysql删除有空格字符名称的触发器.md","raw":"---\ntitle: mysql删除有空格字符名称的触发器\ndate: 2017-04-12 17:06:20\ntags:\n---\n\n\n之前在mysq添加触发器的过程中，使用名称不规范使产生如下触发器名称：\n\n\tdoor_machine_insert_ trigger\n\n中间存在空格字符\n\n使用以下删除语句时候提示出错\n\n\tDROP TRIGGER door_machine_insert_ trigger；\n\n\n然后改为\n\n\tDROP TRIGGER `door_machine_insert_ trigger`;\n\n删除成功","slug":"mysql删除有空格字符名称的触发器","published":1,"updated":"2017-09-21T02:35:21.626Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7tuhpop0005nd5li51ofdve","content":"<p>之前在mysq添加触发器的过程中，使用名称不规范使产生如下触发器名称：</p>\n<pre><code>door_machine_insert_ trigger\n</code></pre><p>中间存在空格字符</p>\n<p>使用以下删除语句时候提示出错</p>\n<pre><code>DROP TRIGGER door_machine_insert_ trigger；\n</code></pre><p>然后改为</p>\n<pre><code>DROP TRIGGER `door_machine_insert_ trigger`;\n</code></pre><p>删除成功</p>\n","excerpt":"","more":"<p>之前在mysq添加触发器的过程中，使用名称不规范使产生如下触发器名称：</p>\n<pre><code>door_machine_insert_ trigger\n</code></pre><p>中间存在空格字符</p>\n<p>使用以下删除语句时候提示出错</p>\n<pre><code>DROP TRIGGER door_machine_insert_ trigger；\n</code></pre><p>然后改为</p>\n<pre><code>DROP TRIGGER `door_machine_insert_ trigger`;\n</code></pre><p>删除成功</p>\n"},{"title":"ndk编译pjsip","date":"2017-05-12T09:06:20.000Z","_content":"\n#环境\npjsip版本`pjproject-2.5.5.tar.bz2`\n\nndk版本`android-ndk-r10e`\n\n##配置ndk环境变量\n\n\texport ANDROID_NDK_ROOT=/home/gsta/liang/android-ndk-r10e\n\n##修改配置文件\n\nvim ./pjlib/include/pj/config_site.h \n\n\t#define PJ_CONFIG_ANDROID 1\n\t#include <pj/config_site_sample.h>\n##配置编译环境\n\n\t./configure-android \n\n##编译\n\tmake dep && make clean && make\n##注意：整个编译过程是在linux系统下进行的","source":"_posts/ndk编译pjsip.md","raw":"---\ntitle: ndk编译pjsip\ndate: 2017-05-12 17:06:20\ntags:\n---\n\n#环境\npjsip版本`pjproject-2.5.5.tar.bz2`\n\nndk版本`android-ndk-r10e`\n\n##配置ndk环境变量\n\n\texport ANDROID_NDK_ROOT=/home/gsta/liang/android-ndk-r10e\n\n##修改配置文件\n\nvim ./pjlib/include/pj/config_site.h \n\n\t#define PJ_CONFIG_ANDROID 1\n\t#include <pj/config_site_sample.h>\n##配置编译环境\n\n\t./configure-android \n\n##编译\n\tmake dep && make clean && make\n##注意：整个编译过程是在linux系统下进行的","slug":"ndk编译pjsip","published":1,"updated":"2017-09-21T02:35:21.626Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7tuhpor0006nd5ll49jy8ed","content":"<p>#环境<br>pjsip版本<code>pjproject-2.5.5.tar.bz2</code></p>\n<p>ndk版本<code>android-ndk-r10e</code></p>\n<p>##配置ndk环境变量</p>\n<pre><code>export ANDROID_NDK_ROOT=/home/gsta/liang/android-ndk-r10e\n</code></pre><p>##修改配置文件</p>\n<p>vim ./pjlib/include/pj/config_site.h </p>\n<pre><code>#define PJ_CONFIG_ANDROID 1\n#include &lt;pj/config_site_sample.h&gt;\n</code></pre><p>##配置编译环境</p>\n<pre><code>./configure-android \n</code></pre><p>##编译<br>    make dep &amp;&amp; make clean &amp;&amp; make</p>\n<p>##注意：整个编译过程是在linux系统下进行的</p>\n","excerpt":"","more":"<p>#环境<br>pjsip版本<code>pjproject-2.5.5.tar.bz2</code></p>\n<p>ndk版本<code>android-ndk-r10e</code></p>\n<p>##配置ndk环境变量</p>\n<pre><code>export ANDROID_NDK_ROOT=/home/gsta/liang/android-ndk-r10e\n</code></pre><p>##修改配置文件</p>\n<p>vim ./pjlib/include/pj/config_site.h </p>\n<pre><code>#define PJ_CONFIG_ANDROID 1\n#include &lt;pj/config_site_sample.h&gt;\n</code></pre><p>##配置编译环境</p>\n<pre><code>./configure-android \n</code></pre><p>##编译<br>    make dep &amp;&amp; make clean &amp;&amp; make</p>\n<p>##注意：整个编译过程是在linux系统下进行的</p>\n"},{"title":"nginx反向代理","date":"2017-06-08T09:06:20.000Z","_content":"\n\n# 反向代理\n\n#### 什么是反向代理\n\n**反向代理**（Reverse Proxy）方式是指用代理服务器来接受 internet 上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给 internet 上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。\n\n举个例子，一个用户访问 [http://www.example.com/readme](http://www.example.com/readme)，但是 www.example.com 上并不存在 readme 页面，它是偷偷从另外一台服务器上取回来，然后作为自己的内容返回给用户。但是用户并不知情这个过程。对用户来说，就像是直接从 www.example.com 获取 readme 页面一样。这里所提到的 www.example.com 这个域名对应的服务器就设置了反向代理功能。\n\n反向代理服务器，对于客户端而言它就像是原始服务器，并且客户端不需要进行任何特别的设置。客户端向反向代理的命名空间(name-space)中的内容发送普通请求，接着反向代理将判断向何处(原始服务器)转交请求，并将获得的内容返回给客户端，就像这些内容原本就是它自己的一样。如下图所示：\n\n![proxy](http://ohjvpki1b.bkt.clouddn.com/proxy.png)\n\n#### 反向代理典型应用场景\n\n反向代理的典型用途是将防火墙后面的服务器提供给 Internet 用户访问，加强安全防护。反向代理还可以为后端的多台服务器提供负载均衡，或为后端较慢的服务器提供 **缓冲** 服务。另外，反向代理还可以启用高级 URL 策略和管理技术，从而使处于不同 web 服务器系统的 web 页面同时存在于同一个 URL 空间下。\n\nNginx 的其中一个用途是做 HTTP 反向代理，下面简单介绍 Nginx 作为反向代理服务器的方法。\n\n>场景描述：访问本地服务器上的 README.md 文件 [http://localhost/README.md](http://localhost/README.md)，本地服务器进行反向代理，从 [https://github.com/moonbingbing/openresty-best-practices/blob/master/README.md](https://github.com/moonbingbing/openresty-best-practices/blob/master/README.md) 获取页面内容。\n\n`nginx.conf` 配置示例：\n\n```nginx\nworker_processes 1;\n\npid logs/nginx.pid;\nerror_log logs/error.log warn;\n\nevents {\n    worker_connections 3000;\n}\n\nhttp {\n    include mime.types;\n    server_tokens off;\n\n\t## 下面配置反向代理的参数\n    server {\n        listen    80;\n\n        ## 1. 用户访问 http://ip:port，则反向代理到 https://github.com\n        location / {\n            proxy_pass  https://github.com;\n            proxy_redirect     off;\n            proxy_set_header   Host             $host;\n            proxy_set_header   X-Real-IP        $remote_addr;\n            proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;\n        }\n\n        ## 2.用户访问 http://ip:port/README.md，则反向代理到\n        ##   https://github.com/.../README.md\n        location /README.md {\n            proxy_set_header  X-Real-IP  $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_pass https://github.com/moonbingbing/openresty-best-practices/blob/master/README.md;\n        }\n    }\n}\n```\n\n成功启动 Nginx 后，我们打开浏览器，验证下反向代理的效果。在浏览器地址栏中输入 `localhost/README.md`，返回的结果是我们 GitHub 源代码的 README 页面。如下图：\n\n![proxy_example](http://ohjvpki1b.bkt.clouddn.com/proxy_example.png)\n\n我们只需要配置一下 `nginx.conf` 文件，不用写任何 web 页面，就可以偷偷地从别的服务器上读取一个页面返回给用户。\n\n下面我们来看一下 `nginx.conf` 里用到的配置项：\n\n(1) location\n\nlocation 项对请求 URI 进行匹配，location 后面配置了匹配规则。例如上面的例子中，如果请求的 URI 是 `localhost/`，则会匹配 `location /` 这一项；如果请求的 URI 是 `localhost/README.md`，则会匹配 `location /README.md` 这项。\n\n上面这个例子只是针对一个确定的 URI 做了反向代理，有的读者会有疑惑：如果对每个页面都进行这样的配置，那将会大量重复，能否做 **批量** 配置呢？此时需要配合使用 location 的正则匹配功能。具体实现方法可参考本书的 [URL 匹配章节](../ngx/match_uri.md)。\n\n(2) proxy_pass\n\nproxy_pass 后面跟着一个 URL，用来将请求反向代理到 URL 参数指定的服务器上。例如我们上面例子中的 `proxy_pass https://github.com`，则将匹配的请求反向代理到 `https://github.com`。\n\n(3) proxy_set_header\n\n默认情况下，反向代理不会转发原始请求中的 Host 头部，如果需要转发，就需要加上这句：`proxy_set_header Host $host;`\n\n除了上面提到的常用配置项，还有 proxy_redirect、proxy_set_body、proxy_limit_rate 等参数，具体用法可以到[Nginx 官网](http://nginx.org/en/docs/http/ngx_http_proxy_module.html)查看。\n\n#### 正向代理\n\n既然有反向代理，自然也有正向代理。简单来说，正向代理就像一个跳板，例如一个用户访问不了某网站（例如 `www.google.com`），但是他能访问一个代理服务器，这个代理服务器能访问 `www.google.com`，于是用户可以先连上代理服务器，告诉它需要访问的内容，代理服务器去取回来返回给用户。例如一些常见的翻墙工具、游戏代理就是利用正向代理的原理工作的，我们需要在这些正向代理工具上配置服务器的 IP 地址等信息。\n","source":"_posts/nginx反向代理.md","raw":"---\ntitle: nginx反向代理\ndate: 2017-06-08 17:06:20\ntags:\n---\n\n\n# 反向代理\n\n#### 什么是反向代理\n\n**反向代理**（Reverse Proxy）方式是指用代理服务器来接受 internet 上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给 internet 上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。\n\n举个例子，一个用户访问 [http://www.example.com/readme](http://www.example.com/readme)，但是 www.example.com 上并不存在 readme 页面，它是偷偷从另外一台服务器上取回来，然后作为自己的内容返回给用户。但是用户并不知情这个过程。对用户来说，就像是直接从 www.example.com 获取 readme 页面一样。这里所提到的 www.example.com 这个域名对应的服务器就设置了反向代理功能。\n\n反向代理服务器，对于客户端而言它就像是原始服务器，并且客户端不需要进行任何特别的设置。客户端向反向代理的命名空间(name-space)中的内容发送普通请求，接着反向代理将判断向何处(原始服务器)转交请求，并将获得的内容返回给客户端，就像这些内容原本就是它自己的一样。如下图所示：\n\n![proxy](http://ohjvpki1b.bkt.clouddn.com/proxy.png)\n\n#### 反向代理典型应用场景\n\n反向代理的典型用途是将防火墙后面的服务器提供给 Internet 用户访问，加强安全防护。反向代理还可以为后端的多台服务器提供负载均衡，或为后端较慢的服务器提供 **缓冲** 服务。另外，反向代理还可以启用高级 URL 策略和管理技术，从而使处于不同 web 服务器系统的 web 页面同时存在于同一个 URL 空间下。\n\nNginx 的其中一个用途是做 HTTP 反向代理，下面简单介绍 Nginx 作为反向代理服务器的方法。\n\n>场景描述：访问本地服务器上的 README.md 文件 [http://localhost/README.md](http://localhost/README.md)，本地服务器进行反向代理，从 [https://github.com/moonbingbing/openresty-best-practices/blob/master/README.md](https://github.com/moonbingbing/openresty-best-practices/blob/master/README.md) 获取页面内容。\n\n`nginx.conf` 配置示例：\n\n```nginx\nworker_processes 1;\n\npid logs/nginx.pid;\nerror_log logs/error.log warn;\n\nevents {\n    worker_connections 3000;\n}\n\nhttp {\n    include mime.types;\n    server_tokens off;\n\n\t## 下面配置反向代理的参数\n    server {\n        listen    80;\n\n        ## 1. 用户访问 http://ip:port，则反向代理到 https://github.com\n        location / {\n            proxy_pass  https://github.com;\n            proxy_redirect     off;\n            proxy_set_header   Host             $host;\n            proxy_set_header   X-Real-IP        $remote_addr;\n            proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;\n        }\n\n        ## 2.用户访问 http://ip:port/README.md，则反向代理到\n        ##   https://github.com/.../README.md\n        location /README.md {\n            proxy_set_header  X-Real-IP  $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_pass https://github.com/moonbingbing/openresty-best-practices/blob/master/README.md;\n        }\n    }\n}\n```\n\n成功启动 Nginx 后，我们打开浏览器，验证下反向代理的效果。在浏览器地址栏中输入 `localhost/README.md`，返回的结果是我们 GitHub 源代码的 README 页面。如下图：\n\n![proxy_example](http://ohjvpki1b.bkt.clouddn.com/proxy_example.png)\n\n我们只需要配置一下 `nginx.conf` 文件，不用写任何 web 页面，就可以偷偷地从别的服务器上读取一个页面返回给用户。\n\n下面我们来看一下 `nginx.conf` 里用到的配置项：\n\n(1) location\n\nlocation 项对请求 URI 进行匹配，location 后面配置了匹配规则。例如上面的例子中，如果请求的 URI 是 `localhost/`，则会匹配 `location /` 这一项；如果请求的 URI 是 `localhost/README.md`，则会匹配 `location /README.md` 这项。\n\n上面这个例子只是针对一个确定的 URI 做了反向代理，有的读者会有疑惑：如果对每个页面都进行这样的配置，那将会大量重复，能否做 **批量** 配置呢？此时需要配合使用 location 的正则匹配功能。具体实现方法可参考本书的 [URL 匹配章节](../ngx/match_uri.md)。\n\n(2) proxy_pass\n\nproxy_pass 后面跟着一个 URL，用来将请求反向代理到 URL 参数指定的服务器上。例如我们上面例子中的 `proxy_pass https://github.com`，则将匹配的请求反向代理到 `https://github.com`。\n\n(3) proxy_set_header\n\n默认情况下，反向代理不会转发原始请求中的 Host 头部，如果需要转发，就需要加上这句：`proxy_set_header Host $host;`\n\n除了上面提到的常用配置项，还有 proxy_redirect、proxy_set_body、proxy_limit_rate 等参数，具体用法可以到[Nginx 官网](http://nginx.org/en/docs/http/ngx_http_proxy_module.html)查看。\n\n#### 正向代理\n\n既然有反向代理，自然也有正向代理。简单来说，正向代理就像一个跳板，例如一个用户访问不了某网站（例如 `www.google.com`），但是他能访问一个代理服务器，这个代理服务器能访问 `www.google.com`，于是用户可以先连上代理服务器，告诉它需要访问的内容，代理服务器去取回来返回给用户。例如一些常见的翻墙工具、游戏代理就是利用正向代理的原理工作的，我们需要在这些正向代理工具上配置服务器的 IP 地址等信息。\n","slug":"nginx反向代理","published":1,"updated":"2017-09-21T02:35:21.626Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7tuhpou0007nd5l42uq9tiw","content":"<h1 id=\"反向代理\"><a href=\"#反向代理\" class=\"headerlink\" title=\"反向代理\"></a>反向代理</h1><h4 id=\"什么是反向代理\"><a href=\"#什么是反向代理\" class=\"headerlink\" title=\"什么是反向代理\"></a>什么是反向代理</h4><p><strong>反向代理</strong>（Reverse Proxy）方式是指用代理服务器来接受 internet 上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给 internet 上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。</p>\n<p>举个例子，一个用户访问 <a href=\"http://www.example.com/readme\" target=\"_blank\" rel=\"external\">http://www.example.com/readme</a>，但是 www.example.com 上并不存在 readme 页面，它是偷偷从另外一台服务器上取回来，然后作为自己的内容返回给用户。但是用户并不知情这个过程。对用户来说，就像是直接从 www.example.com 获取 readme 页面一样。这里所提到的 www.example.com 这个域名对应的服务器就设置了反向代理功能。</p>\n<p>反向代理服务器，对于客户端而言它就像是原始服务器，并且客户端不需要进行任何特别的设置。客户端向反向代理的命名空间(name-space)中的内容发送普通请求，接着反向代理将判断向何处(原始服务器)转交请求，并将获得的内容返回给客户端，就像这些内容原本就是它自己的一样。如下图所示：</p>\n<p><img src=\"http://ohjvpki1b.bkt.clouddn.com/proxy.png\" alt=\"proxy\"></p>\n<h4 id=\"反向代理典型应用场景\"><a href=\"#反向代理典型应用场景\" class=\"headerlink\" title=\"反向代理典型应用场景\"></a>反向代理典型应用场景</h4><p>反向代理的典型用途是将防火墙后面的服务器提供给 Internet 用户访问，加强安全防护。反向代理还可以为后端的多台服务器提供负载均衡，或为后端较慢的服务器提供 <strong>缓冲</strong> 服务。另外，反向代理还可以启用高级 URL 策略和管理技术，从而使处于不同 web 服务器系统的 web 页面同时存在于同一个 URL 空间下。</p>\n<p>Nginx 的其中一个用途是做 HTTP 反向代理，下面简单介绍 Nginx 作为反向代理服务器的方法。</p>\n<blockquote>\n<p>场景描述：访问本地服务器上的 README.md 文件 <a href=\"http://localhost/README.md\" target=\"_blank\" rel=\"external\">http://localhost/README.md</a>，本地服务器进行反向代理，从 <a href=\"https://github.com/moonbingbing/openresty-best-practices/blob/master/README.md\" target=\"_blank\" rel=\"external\">https://github.com/moonbingbing/openresty-best-practices/blob/master/README.md</a> 获取页面内容。</p>\n</blockquote>\n<p><code>nginx.conf</code> 配置示例：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">worker_processes</span> <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"attribute\">pid</span> logs/nginx.pid;</div><div class=\"line\"><span class=\"attribute\">error_log</span> logs/error.log <span class=\"literal\">warn</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"section\">events</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">worker_connections</span> <span class=\"number\">3000</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"section\">http</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">include</span> mime.types;</div><div class=\"line\">    <span class=\"attribute\">server_tokens</span> <span class=\"literal\">off</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">## 下面配置反向代理的参数</span></div><div class=\"line\">    <span class=\"section\">server</span> &#123;</div><div class=\"line\">        <span class=\"attribute\">listen</span>    <span class=\"number\">80</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">## 1. 用户访问 http://ip:port，则反向代理到 https://github.com</span></div><div class=\"line\">        <span class=\"attribute\">location</span> / &#123;</div><div class=\"line\">            <span class=\"attribute\">proxy_pass</span>  https://github.com;</div><div class=\"line\">            <span class=\"attribute\">proxy_redirect</span>     <span class=\"literal\">off</span>;</div><div class=\"line\">            <span class=\"attribute\">proxy_set_header</span>   Host             <span class=\"variable\">$host</span>;</div><div class=\"line\">            <span class=\"attribute\">proxy_set_header</span>   X-Real-IP        <span class=\"variable\">$remote_addr</span>;</div><div class=\"line\">            <span class=\"attribute\">proxy_set_header</span>   X-Forwarded-For  <span class=\"variable\">$proxy_add_x_forwarded_for</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">## 2.用户访问 http://ip:port/README.md，则反向代理到</span></div><div class=\"line\">        <span class=\"comment\">##   https://github.com/.../README.md</span></div><div class=\"line\">        <span class=\"attribute\">location</span> /README.md &#123;</div><div class=\"line\">            <span class=\"attribute\">proxy_set_header</span>  X-Real-IP  <span class=\"variable\">$remote_addr</span>;</div><div class=\"line\">            <span class=\"attribute\">proxy_set_header</span> X-Forwarded-For <span class=\"variable\">$proxy_add_x_forwarded_for</span>;</div><div class=\"line\">            <span class=\"attribute\">proxy_pass</span> https://github.com/moonbingbing/openresty-best-practices/blob/master/README.md;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>成功启动 Nginx 后，我们打开浏览器，验证下反向代理的效果。在浏览器地址栏中输入 <code>localhost/README.md</code>，返回的结果是我们 GitHub 源代码的 README 页面。如下图：</p>\n<p><img src=\"http://ohjvpki1b.bkt.clouddn.com/proxy_example.png\" alt=\"proxy_example\"></p>\n<p>我们只需要配置一下 <code>nginx.conf</code> 文件，不用写任何 web 页面，就可以偷偷地从别的服务器上读取一个页面返回给用户。</p>\n<p>下面我们来看一下 <code>nginx.conf</code> 里用到的配置项：</p>\n<p>(1) location</p>\n<p>location 项对请求 URI 进行匹配，location 后面配置了匹配规则。例如上面的例子中，如果请求的 URI 是 <code>localhost/</code>，则会匹配 <code>location /</code> 这一项；如果请求的 URI 是 <code>localhost/README.md</code>，则会匹配 <code>location /README.md</code> 这项。</p>\n<p>上面这个例子只是针对一个确定的 URI 做了反向代理，有的读者会有疑惑：如果对每个页面都进行这样的配置，那将会大量重复，能否做 <strong>批量</strong> 配置呢？此时需要配合使用 location 的正则匹配功能。具体实现方法可参考本书的 <a href=\"../ngx/match_uri.md\">URL 匹配章节</a>。</p>\n<p>(2) proxy_pass</p>\n<p>proxy_pass 后面跟着一个 URL，用来将请求反向代理到 URL 参数指定的服务器上。例如我们上面例子中的 <code>proxy_pass https://github.com</code>，则将匹配的请求反向代理到 <code>https://github.com</code>。</p>\n<p>(3) proxy_set_header</p>\n<p>默认情况下，反向代理不会转发原始请求中的 Host 头部，如果需要转发，就需要加上这句：<code>proxy_set_header Host $host;</code></p>\n<p>除了上面提到的常用配置项，还有 proxy_redirect、proxy_set_body、proxy_limit_rate 等参数，具体用法可以到<a href=\"http://nginx.org/en/docs/http/ngx_http_proxy_module.html\" target=\"_blank\" rel=\"external\">Nginx 官网</a>查看。</p>\n<h4 id=\"正向代理\"><a href=\"#正向代理\" class=\"headerlink\" title=\"正向代理\"></a>正向代理</h4><p>既然有反向代理，自然也有正向代理。简单来说，正向代理就像一个跳板，例如一个用户访问不了某网站（例如 <code>www.google.com</code>），但是他能访问一个代理服务器，这个代理服务器能访问 <code>www.google.com</code>，于是用户可以先连上代理服务器，告诉它需要访问的内容，代理服务器去取回来返回给用户。例如一些常见的翻墙工具、游戏代理就是利用正向代理的原理工作的，我们需要在这些正向代理工具上配置服务器的 IP 地址等信息。</p>\n","excerpt":"","more":"<h1 id=\"反向代理\"><a href=\"#反向代理\" class=\"headerlink\" title=\"反向代理\"></a>反向代理</h1><h4 id=\"什么是反向代理\"><a href=\"#什么是反向代理\" class=\"headerlink\" title=\"什么是反向代理\"></a>什么是反向代理</h4><p><strong>反向代理</strong>（Reverse Proxy）方式是指用代理服务器来接受 internet 上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给 internet 上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。</p>\n<p>举个例子，一个用户访问 <a href=\"http://www.example.com/readme\">http://www.example.com/readme</a>，但是 www.example.com 上并不存在 readme 页面，它是偷偷从另外一台服务器上取回来，然后作为自己的内容返回给用户。但是用户并不知情这个过程。对用户来说，就像是直接从 www.example.com 获取 readme 页面一样。这里所提到的 www.example.com 这个域名对应的服务器就设置了反向代理功能。</p>\n<p>反向代理服务器，对于客户端而言它就像是原始服务器，并且客户端不需要进行任何特别的设置。客户端向反向代理的命名空间(name-space)中的内容发送普通请求，接着反向代理将判断向何处(原始服务器)转交请求，并将获得的内容返回给客户端，就像这些内容原本就是它自己的一样。如下图所示：</p>\n<p><img src=\"http://ohjvpki1b.bkt.clouddn.com/proxy.png\" alt=\"proxy\"></p>\n<h4 id=\"反向代理典型应用场景\"><a href=\"#反向代理典型应用场景\" class=\"headerlink\" title=\"反向代理典型应用场景\"></a>反向代理典型应用场景</h4><p>反向代理的典型用途是将防火墙后面的服务器提供给 Internet 用户访问，加强安全防护。反向代理还可以为后端的多台服务器提供负载均衡，或为后端较慢的服务器提供 <strong>缓冲</strong> 服务。另外，反向代理还可以启用高级 URL 策略和管理技术，从而使处于不同 web 服务器系统的 web 页面同时存在于同一个 URL 空间下。</p>\n<p>Nginx 的其中一个用途是做 HTTP 反向代理，下面简单介绍 Nginx 作为反向代理服务器的方法。</p>\n<blockquote>\n<p>场景描述：访问本地服务器上的 README.md 文件 <a href=\"http://localhost/README.md\">http://localhost/README.md</a>，本地服务器进行反向代理，从 <a href=\"https://github.com/moonbingbing/openresty-best-practices/blob/master/README.md\">https://github.com/moonbingbing/openresty-best-practices/blob/master/README.md</a> 获取页面内容。</p>\n</blockquote>\n<p><code>nginx.conf</code> 配置示例：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">worker_processes</span> <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"attribute\">pid</span> logs/nginx.pid;</div><div class=\"line\"><span class=\"attribute\">error_log</span> logs/error.log <span class=\"literal\">warn</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"section\">events</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">worker_connections</span> <span class=\"number\">3000</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"section\">http</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">include</span> mime.types;</div><div class=\"line\">    <span class=\"attribute\">server_tokens</span> <span class=\"literal\">off</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">## 下面配置反向代理的参数</span></div><div class=\"line\">    <span class=\"section\">server</span> &#123;</div><div class=\"line\">        <span class=\"attribute\">listen</span>    <span class=\"number\">80</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">## 1. 用户访问 http://ip:port，则反向代理到 https://github.com</span></div><div class=\"line\">        <span class=\"attribute\">location</span> / &#123;</div><div class=\"line\">            <span class=\"attribute\">proxy_pass</span>  https://github.com;</div><div class=\"line\">            <span class=\"attribute\">proxy_redirect</span>     <span class=\"literal\">off</span>;</div><div class=\"line\">            <span class=\"attribute\">proxy_set_header</span>   Host             <span class=\"variable\">$host</span>;</div><div class=\"line\">            <span class=\"attribute\">proxy_set_header</span>   X-Real-IP        <span class=\"variable\">$remote_addr</span>;</div><div class=\"line\">            <span class=\"attribute\">proxy_set_header</span>   X-Forwarded-For  <span class=\"variable\">$proxy_add_x_forwarded_for</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">## 2.用户访问 http://ip:port/README.md，则反向代理到</span></div><div class=\"line\">        <span class=\"comment\">##   https://github.com/.../README.md</span></div><div class=\"line\">        <span class=\"attribute\">location</span> /README.md &#123;</div><div class=\"line\">            <span class=\"attribute\">proxy_set_header</span>  X-Real-IP  <span class=\"variable\">$remote_addr</span>;</div><div class=\"line\">            <span class=\"attribute\">proxy_set_header</span> X-Forwarded-For <span class=\"variable\">$proxy_add_x_forwarded_for</span>;</div><div class=\"line\">            <span class=\"attribute\">proxy_pass</span> https://github.com/moonbingbing/openresty-best-practices/blob/master/README.md;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>成功启动 Nginx 后，我们打开浏览器，验证下反向代理的效果。在浏览器地址栏中输入 <code>localhost/README.md</code>，返回的结果是我们 GitHub 源代码的 README 页面。如下图：</p>\n<p><img src=\"http://ohjvpki1b.bkt.clouddn.com/proxy_example.png\" alt=\"proxy_example\"></p>\n<p>我们只需要配置一下 <code>nginx.conf</code> 文件，不用写任何 web 页面，就可以偷偷地从别的服务器上读取一个页面返回给用户。</p>\n<p>下面我们来看一下 <code>nginx.conf</code> 里用到的配置项：</p>\n<p>(1) location</p>\n<p>location 项对请求 URI 进行匹配，location 后面配置了匹配规则。例如上面的例子中，如果请求的 URI 是 <code>localhost/</code>，则会匹配 <code>location /</code> 这一项；如果请求的 URI 是 <code>localhost/README.md</code>，则会匹配 <code>location /README.md</code> 这项。</p>\n<p>上面这个例子只是针对一个确定的 URI 做了反向代理，有的读者会有疑惑：如果对每个页面都进行这样的配置，那将会大量重复，能否做 <strong>批量</strong> 配置呢？此时需要配合使用 location 的正则匹配功能。具体实现方法可参考本书的 <a href=\"../ngx/match_uri.md\">URL 匹配章节</a>。</p>\n<p>(2) proxy_pass</p>\n<p>proxy_pass 后面跟着一个 URL，用来将请求反向代理到 URL 参数指定的服务器上。例如我们上面例子中的 <code>proxy_pass https://github.com</code>，则将匹配的请求反向代理到 <code>https://github.com</code>。</p>\n<p>(3) proxy_set_header</p>\n<p>默认情况下，反向代理不会转发原始请求中的 Host 头部，如果需要转发，就需要加上这句：<code>proxy_set_header Host $host;</code></p>\n<p>除了上面提到的常用配置项，还有 proxy_redirect、proxy_set_body、proxy_limit_rate 等参数，具体用法可以到<a href=\"http://nginx.org/en/docs/http/ngx_http_proxy_module.html\">Nginx 官网</a>查看。</p>\n<h4 id=\"正向代理\"><a href=\"#正向代理\" class=\"headerlink\" title=\"正向代理\"></a>正向代理</h4><p>既然有反向代理，自然也有正向代理。简单来说，正向代理就像一个跳板，例如一个用户访问不了某网站（例如 <code>www.google.com</code>），但是他能访问一个代理服务器，这个代理服务器能访问 <code>www.google.com</code>，于是用户可以先连上代理服务器，告诉它需要访问的内容，代理服务器去取回来返回给用户。例如一些常见的翻墙工具、游戏代理就是利用正向代理的原理工作的，我们需要在这些正向代理工具上配置服务器的 IP 地址等信息。</p>\n"},{"title":"orangepi zero gpio控制","date":"2017-09-20T09:06:20.000Z","_content":"\n\n#orangepi zero接口图\n![](http://ohjvpki1b.bkt.clouddn.com/opiz-pins-26-0.jpg)\n\n![](http://ohjvpki1b.bkt.clouddn.com/orangepi_pin.png)\n\n#编译安装WiringOP\n源码\n[WiringOP-zero.zip](http://ohjvpki1b.bkt.clouddn.com/WiringOP-zero.zip)\n\n解压\n\t\n\tunzip WingOP-zero.zip\n\n编译安装\n\n\tcd WingOP-zero\n\t./build\n\n#测试是否安装成功\n\n\tgpio -v\n\tgpio readall\n\n#例子程序，控制gpio0闪烁\n\tvim test_gpio.c\n\n##demo code\n\n\t#include <wiringPi.h>\n\tint main(void)\n\t{\n\t  wiringPiSetup() ;\n\t  pinMode (0, OUTPUT) ;\n\t  for(;;) \n\t  {\n\t    digitalWrite(0, HIGH) ; delay (500) ;\n\t    digitalWrite(0,  LOW) ; delay (500) ;\n\t  }\n\t}\n\n##编译demo\n\t\n\t gcc -Wall -o test_gpio test_gpio.c -lwiringPi -lpthread\n\n##执行程序\n\n\tsudo ./test_gpio","source":"_posts/orangepi zero gpio控制.md","raw":"---\ntitle: orangepi zero gpio控制\ndate: 2017-09-20 17:06:20\ntags:\n---\n\n\n#orangepi zero接口图\n![](http://ohjvpki1b.bkt.clouddn.com/opiz-pins-26-0.jpg)\n\n![](http://ohjvpki1b.bkt.clouddn.com/orangepi_pin.png)\n\n#编译安装WiringOP\n源码\n[WiringOP-zero.zip](http://ohjvpki1b.bkt.clouddn.com/WiringOP-zero.zip)\n\n解压\n\t\n\tunzip WingOP-zero.zip\n\n编译安装\n\n\tcd WingOP-zero\n\t./build\n\n#测试是否安装成功\n\n\tgpio -v\n\tgpio readall\n\n#例子程序，控制gpio0闪烁\n\tvim test_gpio.c\n\n##demo code\n\n\t#include <wiringPi.h>\n\tint main(void)\n\t{\n\t  wiringPiSetup() ;\n\t  pinMode (0, OUTPUT) ;\n\t  for(;;) \n\t  {\n\t    digitalWrite(0, HIGH) ; delay (500) ;\n\t    digitalWrite(0,  LOW) ; delay (500) ;\n\t  }\n\t}\n\n##编译demo\n\t\n\t gcc -Wall -o test_gpio test_gpio.c -lwiringPi -lpthread\n\n##执行程序\n\n\tsudo ./test_gpio","slug":"orangepi zero gpio控制","published":1,"updated":"2017-09-21T02:35:21.626Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7tuhpow0008nd5la1zr2mdr","content":"<p>#orangepi zero接口图<br><img src=\"http://ohjvpki1b.bkt.clouddn.com/opiz-pins-26-0.jpg\" alt=\"\"></p>\n<p><img src=\"http://ohjvpki1b.bkt.clouddn.com/orangepi_pin.png\" alt=\"\"></p>\n<p>#编译安装WiringOP<br>源码<br><a href=\"http://ohjvpki1b.bkt.clouddn.com/WiringOP-zero.zip\" target=\"_blank\" rel=\"external\">WiringOP-zero.zip</a></p>\n<p>解压</p>\n<pre><code>unzip WingOP-zero.zip\n</code></pre><p>编译安装</p>\n<pre><code>cd WingOP-zero\n./build\n</code></pre><p>#测试是否安装成功</p>\n<pre><code>gpio -v\ngpio readall\n</code></pre><p>#例子程序，控制gpio0闪烁<br>    vim test_gpio.c</p>\n<p>##demo code</p>\n<pre><code>#include &lt;wiringPi.h&gt;\nint main(void)\n{\n  wiringPiSetup() ;\n  pinMode (0, OUTPUT) ;\n  for(;;) \n  {\n    digitalWrite(0, HIGH) ; delay (500) ;\n    digitalWrite(0,  LOW) ; delay (500) ;\n  }\n}\n</code></pre><p>##编译demo</p>\n<pre><code>gcc -Wall -o test_gpio test_gpio.c -lwiringPi -lpthread\n</code></pre><p>##执行程序</p>\n<pre><code>sudo ./test_gpio\n</code></pre>","excerpt":"","more":"<p>#orangepi zero接口图<br><img src=\"http://ohjvpki1b.bkt.clouddn.com/opiz-pins-26-0.jpg\" alt=\"\"></p>\n<p><img src=\"http://ohjvpki1b.bkt.clouddn.com/orangepi_pin.png\" alt=\"\"></p>\n<p>#编译安装WiringOP<br>源码<br><a href=\"http://ohjvpki1b.bkt.clouddn.com/WiringOP-zero.zip\">WiringOP-zero.zip</a></p>\n<p>解压</p>\n<pre><code>unzip WingOP-zero.zip\n</code></pre><p>编译安装</p>\n<pre><code>cd WingOP-zero\n./build\n</code></pre><p>#测试是否安装成功</p>\n<pre><code>gpio -v\ngpio readall\n</code></pre><p>#例子程序，控制gpio0闪烁<br>    vim test_gpio.c</p>\n<p>##demo code</p>\n<pre><code>#include &lt;wiringPi.h&gt;\nint main(void)\n{\n  wiringPiSetup() ;\n  pinMode (0, OUTPUT) ;\n  for(;;) \n  {\n    digitalWrite(0, HIGH) ; delay (500) ;\n    digitalWrite(0,  LOW) ; delay (500) ;\n  }\n}\n</code></pre><p>##编译demo</p>\n<pre><code>gcc -Wall -o test_gpio test_gpio.c -lwiringPi -lpthread\n</code></pre><p>##执行程序</p>\n<pre><code>sudo ./test_gpio\n</code></pre>"},{"title":"orangepi开启yuv摄像头驱动","date":"2017-08-30T09:06:20.000Z","_content":"\n##说明\n&ensp;使用orangepi外接USB摄像头进行拍照，发现没有`/dev/video0`，可能没哟将yuv驱动编译进内核，需要外部加载进去。\n##添加驱动\n\n&emsp;一开始没有发现`/lib/modules/3.4.39/`目录下`uvcvideo.ko`，害得自己找来orangepi内核重新编译了一遍。\n\n1.插入驱动模块\n\n\tsudo insmod /lib/modules/3.4.39/uvcvideo.ko\n\n2.查看是否识别了驱动\n\n\tls /dev/video0\n\n3.添加系统启动时候加载驱动\n\n\tsudo vim /etc/rc.local \n\n添加以下语句\n\t\n\tsudo insmod /lib/modules/3.4.39/uvcvideo.ko","source":"_posts/orangepi开启yuv摄像头驱动.md","raw":"---\ntitle: orangepi开启yuv摄像头驱动\ndate: 2017-08-30 17:06:20\ntags:\n---\n\n##说明\n&ensp;使用orangepi外接USB摄像头进行拍照，发现没有`/dev/video0`，可能没哟将yuv驱动编译进内核，需要外部加载进去。\n##添加驱动\n\n&emsp;一开始没有发现`/lib/modules/3.4.39/`目录下`uvcvideo.ko`，害得自己找来orangepi内核重新编译了一遍。\n\n1.插入驱动模块\n\n\tsudo insmod /lib/modules/3.4.39/uvcvideo.ko\n\n2.查看是否识别了驱动\n\n\tls /dev/video0\n\n3.添加系统启动时候加载驱动\n\n\tsudo vim /etc/rc.local \n\n添加以下语句\n\t\n\tsudo insmod /lib/modules/3.4.39/uvcvideo.ko","slug":"orangepi开启yuv摄像头驱动","published":1,"updated":"2017-09-21T02:35:21.626Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7tuhpoz0009nd5lxhlt6u0t","content":"<p>##说明<br>&ensp;使用orangepi外接USB摄像头进行拍照，发现没有<code>/dev/video0</code>，可能没哟将yuv驱动编译进内核，需要外部加载进去。</p>\n<p>##添加驱动</p>\n<p>&emsp;一开始没有发现<code>/lib/modules/3.4.39/</code>目录下<code>uvcvideo.ko</code>，害得自己找来orangepi内核重新编译了一遍。</p>\n<p>1.插入驱动模块</p>\n<pre><code>sudo insmod /lib/modules/3.4.39/uvcvideo.ko\n</code></pre><p>2.查看是否识别了驱动</p>\n<pre><code>ls /dev/video0\n</code></pre><p>3.添加系统启动时候加载驱动</p>\n<pre><code>sudo vim /etc/rc.local \n</code></pre><p>添加以下语句</p>\n<pre><code>sudo insmod /lib/modules/3.4.39/uvcvideo.ko\n</code></pre>","excerpt":"","more":"<p>##说明<br>&ensp;使用orangepi外接USB摄像头进行拍照，发现没有<code>/dev/video0</code>，可能没哟将yuv驱动编译进内核，需要外部加载进去。</p>\n<p>##添加驱动</p>\n<p>&emsp;一开始没有发现<code>/lib/modules/3.4.39/</code>目录下<code>uvcvideo.ko</code>，害得自己找来orangepi内核重新编译了一遍。</p>\n<p>1.插入驱动模块</p>\n<pre><code>sudo insmod /lib/modules/3.4.39/uvcvideo.ko\n</code></pre><p>2.查看是否识别了驱动</p>\n<pre><code>ls /dev/video0\n</code></pre><p>3.添加系统启动时候加载驱动</p>\n<pre><code>sudo vim /etc/rc.local \n</code></pre><p>添加以下语句</p>\n<pre><code>sudo insmod /lib/modules/3.4.39/uvcvideo.ko\n</code></pre>"},{"title":"xposed各种机型安装方法","date":"2017-05-27T09:06:20.000Z","_content":"\n\n##说明\n之前我一直以为xpose框架是针对特殊机型，现在才发现其实针对不同的android版本装xpose版本，跟机型没有关系。前提是是手机已root和安装了第三方recovery，比如TWRP。\n\n##刷入recovery方法\n\n参照我的另一篇博客\n\n[Android手机刷recovery](http://www.cnblogs.com/QUSIR/p/6179999.html)\n\n##刷入recovery后就可以很方便root\n\n一种通用root方法，不针对机型。\n\n[各种Android手机Root方法](http://www.cnblogs.com/QUSIR/p/6180236.html)\n\n##以recovery方式刷入下xposed framework\n[Xposed Framework下载地址](http://dl-xda.xposed.info/framework/)\n其中，sdk21，sdk22，sdk23，分别对应Android 5.0，5.1， 6.0.\n根据，手机ROM版本和处理器类型选择Xposed Framework刷机包。\n\n比如，中兴Blade a1移动版(5.1, arm64)，我选择了刷机包xposed-v86-sdk22-arm64.zip 和卸载包xposed-uninstaller-20150831-arm64.zip\n下载之后，将这两个压缩包，拷贝到SD卡根目录下。\n\n###安装\n1.重启手机,进入Recovery界面。(adb reboot recovery)\n![view](http://ohjvpki1b.bkt.clouddn.com/xposed3.jpg)\n2.选择【安装刷机包】进入下级页面，选择【从SD卡选择ZIP文件】\n\n3.在SD卡根目录找到Xposed Framework刷机包(xposed-v86-sdk22-arm64.zip)，并选择。\n![view](http://ohjvpki1b.bkt.clouddn.com/xposed4.jpg)\n4.滑动底部的滑动条，确认刷入，等待提示刷机完成。\n\n5.重启手机，等待进入桌面。\n###卸载\n1.如果刷入Xposed Framework刷机包之后，无限重启，进不去桌面怎么办？\n\n2.那就按照下面提示，卸载掉Xposed Framework。\n\n3.重启手机,进入Recovery界面。(adb reboot recovery)\n\n4.选择【安装刷机包】进入下级页面，选择【从SD卡选择ZIP文件】\n\n5.在SD卡根目录找到Xposed Framework卸载刷机包(xposed-uninstaller-20150831-arm64.zip)，并选择。\n滑动底部的滑动条，确认刷入，等待提示刷机完成。\n\n6.重启手机，等待进入桌面。\n###Xposed Installer\n这是一个管理Xposed模块的官方应用。通过它，你可以随时禁用或者启用Xposed模块，然后重启手机。\n对于Android 5.0以上的手机，请前往XDA论坛主题贴下载附件 XposedInstaller_3.0_alpha4.apk，并安装。\n下载地址：http://forum.xda-developers.com/showthread.php?t=3034811\n如果你看到以下界面，恭喜你，Xposed Framework安装完成。\n![view](http://ohjvpki1b.bkt.clouddn.com/xposed.png)\n\n##参考\n\n[http://www.snowdream.tech/2016/09/02/android-install-xposed-framework/](http://www.snowdream.tech/2016/09/02/android-install-xposed-framework/)","source":"_posts/xposed各种机型安装方法.md","raw":"---\ntitle: xposed各种机型安装方法\ndate: 2017-05-27 17:06:20\ntags:\n---\n\n\n##说明\n之前我一直以为xpose框架是针对特殊机型，现在才发现其实针对不同的android版本装xpose版本，跟机型没有关系。前提是是手机已root和安装了第三方recovery，比如TWRP。\n\n##刷入recovery方法\n\n参照我的另一篇博客\n\n[Android手机刷recovery](http://www.cnblogs.com/QUSIR/p/6179999.html)\n\n##刷入recovery后就可以很方便root\n\n一种通用root方法，不针对机型。\n\n[各种Android手机Root方法](http://www.cnblogs.com/QUSIR/p/6180236.html)\n\n##以recovery方式刷入下xposed framework\n[Xposed Framework下载地址](http://dl-xda.xposed.info/framework/)\n其中，sdk21，sdk22，sdk23，分别对应Android 5.0，5.1， 6.0.\n根据，手机ROM版本和处理器类型选择Xposed Framework刷机包。\n\n比如，中兴Blade a1移动版(5.1, arm64)，我选择了刷机包xposed-v86-sdk22-arm64.zip 和卸载包xposed-uninstaller-20150831-arm64.zip\n下载之后，将这两个压缩包，拷贝到SD卡根目录下。\n\n###安装\n1.重启手机,进入Recovery界面。(adb reboot recovery)\n![view](http://ohjvpki1b.bkt.clouddn.com/xposed3.jpg)\n2.选择【安装刷机包】进入下级页面，选择【从SD卡选择ZIP文件】\n\n3.在SD卡根目录找到Xposed Framework刷机包(xposed-v86-sdk22-arm64.zip)，并选择。\n![view](http://ohjvpki1b.bkt.clouddn.com/xposed4.jpg)\n4.滑动底部的滑动条，确认刷入，等待提示刷机完成。\n\n5.重启手机，等待进入桌面。\n###卸载\n1.如果刷入Xposed Framework刷机包之后，无限重启，进不去桌面怎么办？\n\n2.那就按照下面提示，卸载掉Xposed Framework。\n\n3.重启手机,进入Recovery界面。(adb reboot recovery)\n\n4.选择【安装刷机包】进入下级页面，选择【从SD卡选择ZIP文件】\n\n5.在SD卡根目录找到Xposed Framework卸载刷机包(xposed-uninstaller-20150831-arm64.zip)，并选择。\n滑动底部的滑动条，确认刷入，等待提示刷机完成。\n\n6.重启手机，等待进入桌面。\n###Xposed Installer\n这是一个管理Xposed模块的官方应用。通过它，你可以随时禁用或者启用Xposed模块，然后重启手机。\n对于Android 5.0以上的手机，请前往XDA论坛主题贴下载附件 XposedInstaller_3.0_alpha4.apk，并安装。\n下载地址：http://forum.xda-developers.com/showthread.php?t=3034811\n如果你看到以下界面，恭喜你，Xposed Framework安装完成。\n![view](http://ohjvpki1b.bkt.clouddn.com/xposed.png)\n\n##参考\n\n[http://www.snowdream.tech/2016/09/02/android-install-xposed-framework/](http://www.snowdream.tech/2016/09/02/android-install-xposed-framework/)","slug":"xposed各种机型安装方法","published":1,"updated":"2017-09-21T02:35:21.626Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7tuhpp1000and5lp5c1v039","content":"<p>##说明<br>之前我一直以为xpose框架是针对特殊机型，现在才发现其实针对不同的android版本装xpose版本，跟机型没有关系。前提是是手机已root和安装了第三方recovery，比如TWRP。</p>\n<p>##刷入recovery方法</p>\n<p>参照我的另一篇博客</p>\n<p><a href=\"http://www.cnblogs.com/QUSIR/p/6179999.html\" target=\"_blank\" rel=\"external\">Android手机刷recovery</a></p>\n<p>##刷入recovery后就可以很方便root</p>\n<p>一种通用root方法，不针对机型。</p>\n<p><a href=\"http://www.cnblogs.com/QUSIR/p/6180236.html\" target=\"_blank\" rel=\"external\">各种Android手机Root方法</a></p>\n<p>##以recovery方式刷入下xposed framework<br><a href=\"http://dl-xda.xposed.info/framework/\" target=\"_blank\" rel=\"external\">Xposed Framework下载地址</a><br>其中，sdk21，sdk22，sdk23，分别对应Android 5.0，5.1， 6.0.<br>根据，手机ROM版本和处理器类型选择Xposed Framework刷机包。</p>\n<p>比如，中兴Blade a1移动版(5.1, arm64)，我选择了刷机包xposed-v86-sdk22-arm64.zip 和卸载包xposed-uninstaller-20150831-arm64.zip<br>下载之后，将这两个压缩包，拷贝到SD卡根目录下。</p>\n<p>###安装<br>1.重启手机,进入Recovery界面。(adb reboot recovery)<br><img src=\"http://ohjvpki1b.bkt.clouddn.com/xposed3.jpg\" alt=\"view\"><br>2.选择【安装刷机包】进入下级页面，选择【从SD卡选择ZIP文件】</p>\n<p>3.在SD卡根目录找到Xposed Framework刷机包(xposed-v86-sdk22-arm64.zip)，并选择。<br><img src=\"http://ohjvpki1b.bkt.clouddn.com/xposed4.jpg\" alt=\"view\"><br>4.滑动底部的滑动条，确认刷入，等待提示刷机完成。</p>\n<p>5.重启手机，等待进入桌面。</p>\n<p>###卸载<br>1.如果刷入Xposed Framework刷机包之后，无限重启，进不去桌面怎么办？</p>\n<p>2.那就按照下面提示，卸载掉Xposed Framework。</p>\n<p>3.重启手机,进入Recovery界面。(adb reboot recovery)</p>\n<p>4.选择【安装刷机包】进入下级页面，选择【从SD卡选择ZIP文件】</p>\n<p>5.在SD卡根目录找到Xposed Framework卸载刷机包(xposed-uninstaller-20150831-arm64.zip)，并选择。<br>滑动底部的滑动条，确认刷入，等待提示刷机完成。</p>\n<p>6.重启手机，等待进入桌面。</p>\n<p>###Xposed Installer<br>这是一个管理Xposed模块的官方应用。通过它，你可以随时禁用或者启用Xposed模块，然后重启手机。<br>对于Android 5.0以上的手机，请前往XDA论坛主题贴下载附件 XposedInstaller_3.0_alpha4.apk，并安装。<br>下载地址：<a href=\"http://forum.xda-developers.com/showthread.php?t=3034811\" target=\"_blank\" rel=\"external\">http://forum.xda-developers.com/showthread.php?t=3034811</a><br>如果你看到以下界面，恭喜你，Xposed Framework安装完成。<br><img src=\"http://ohjvpki1b.bkt.clouddn.com/xposed.png\" alt=\"view\"></p>\n<p>##参考</p>\n<p><a href=\"http://www.snowdream.tech/2016/09/02/android-install-xposed-framework/\" target=\"_blank\" rel=\"external\">http://www.snowdream.tech/2016/09/02/android-install-xposed-framework/</a></p>\n","excerpt":"","more":"<p>##说明<br>之前我一直以为xpose框架是针对特殊机型，现在才发现其实针对不同的android版本装xpose版本，跟机型没有关系。前提是是手机已root和安装了第三方recovery，比如TWRP。</p>\n<p>##刷入recovery方法</p>\n<p>参照我的另一篇博客</p>\n<p><a href=\"http://www.cnblogs.com/QUSIR/p/6179999.html\">Android手机刷recovery</a></p>\n<p>##刷入recovery后就可以很方便root</p>\n<p>一种通用root方法，不针对机型。</p>\n<p><a href=\"http://www.cnblogs.com/QUSIR/p/6180236.html\">各种Android手机Root方法</a></p>\n<p>##以recovery方式刷入下xposed framework<br><a href=\"http://dl-xda.xposed.info/framework/\">Xposed Framework下载地址</a><br>其中，sdk21，sdk22，sdk23，分别对应Android 5.0，5.1， 6.0.<br>根据，手机ROM版本和处理器类型选择Xposed Framework刷机包。</p>\n<p>比如，中兴Blade a1移动版(5.1, arm64)，我选择了刷机包xposed-v86-sdk22-arm64.zip 和卸载包xposed-uninstaller-20150831-arm64.zip<br>下载之后，将这两个压缩包，拷贝到SD卡根目录下。</p>\n<p>###安装<br>1.重启手机,进入Recovery界面。(adb reboot recovery)<br><img src=\"http://ohjvpki1b.bkt.clouddn.com/xposed3.jpg\" alt=\"view\"><br>2.选择【安装刷机包】进入下级页面，选择【从SD卡选择ZIP文件】</p>\n<p>3.在SD卡根目录找到Xposed Framework刷机包(xposed-v86-sdk22-arm64.zip)，并选择。<br><img src=\"http://ohjvpki1b.bkt.clouddn.com/xposed4.jpg\" alt=\"view\"><br>4.滑动底部的滑动条，确认刷入，等待提示刷机完成。</p>\n<p>5.重启手机，等待进入桌面。</p>\n<p>###卸载<br>1.如果刷入Xposed Framework刷机包之后，无限重启，进不去桌面怎么办？</p>\n<p>2.那就按照下面提示，卸载掉Xposed Framework。</p>\n<p>3.重启手机,进入Recovery界面。(adb reboot recovery)</p>\n<p>4.选择【安装刷机包】进入下级页面，选择【从SD卡选择ZIP文件】</p>\n<p>5.在SD卡根目录找到Xposed Framework卸载刷机包(xposed-uninstaller-20150831-arm64.zip)，并选择。<br>滑动底部的滑动条，确认刷入，等待提示刷机完成。</p>\n<p>6.重启手机，等待进入桌面。</p>\n<p>###Xposed Installer<br>这是一个管理Xposed模块的官方应用。通过它，你可以随时禁用或者启用Xposed模块，然后重启手机。<br>对于Android 5.0以上的手机，请前往XDA论坛主题贴下载附件 XposedInstaller_3.0_alpha4.apk，并安装。<br>下载地址：<a href=\"http://forum.xda-developers.com/showthread.php?t=3034811\">http://forum.xda-developers.com/showthread.php?t=3034811</a><br>如果你看到以下界面，恭喜你，Xposed Framework安装完成。<br><img src=\"http://ohjvpki1b.bkt.clouddn.com/xposed.png\" alt=\"view\"></p>\n<p>##参考</p>\n<p><a href=\"http://www.snowdream.tech/2016/09/02/android-install-xposed-framework/\">http://www.snowdream.tech/2016/09/02/android-install-xposed-framework/</a></p>\n"},{"title":"交叉编译pjsip","date":"2017-05-12T09:06:20.000Z","_content":"\n\n##说明\n&emsp;PJSIP是一种以C语言编写的免费开源多媒体通信库，实现基于标准的协议，如SIP，SDP，RTP，STUN，TURN和ICE。它将信令协议（SIP）与丰富的多媒体框架和NAT穿越功能相结合，成为可移植的高级API，适用于从台式机，嵌入式系统到手机等几乎任何类型的系统。\n\n官方网址为[http://www.pjsip.org/](http://www.pjsip.org/)\n\n##修改编译配置文件\n配置文件路径为\n\npjproject-2.4.5\\pjlib\\include\\pj\\config_site.h\n\n添加以下宏定义\n\t\n\t#define PJMEDIA_AUDIO_DEV_HAS_ALSA\t\t1\n\t#undef PJMEDIA_AUDIO_DEV_HAS_PORTAUDIO\n\t#define PJMEDIA_AUDIO_DEV_HAS_PORTAUDIO\t\t0\n\t#include <pj/config_site_sample.h>\n\t\n\t#define PJMEDIA_RESAMPLE_NONE   1\n\t#define PJMEDIA_HAS_SPEEX_AEC   0\n\t#define PJMEDIA_HAS_VIDEO   0\n\t#define PJMEDIA_CONF_USE_SWITCH_BOARD 1\n\n\n\n##编译安装\n用的是  pjproject-2.4.5版本\n\n直接在源码目录下执行以下指令\n\n\t./configure --prefix=/usr/local/arm_linux_4.2 --host=arm-linux  LIBS=-ldl\n\t\n\tmake dep\n\t\n\tmake\n\n##运行例子程序\n![view](http://ohjvpki1b.bkt.clouddn.com/build_pjsip.png)\n\n##音频驱动切换\n\n&emsp;Linux音频驱动分为alsa和oss，oss是比较旧的驱动，pjsip支持这两种音频驱动，默认是oss，蓝天门口机的内核使用的是alsa驱动，运行例子程序的时候会出现以下问题。\n\n![view](http://ohjvpki1b.bkt.clouddn.com/pjsip_device.png)\n###解决方法\n修改config_site.h文件  在pjproject-2.4.5\\pjlib\\include\\pj目录下\n\n增加\n\t#define PJMEDIA_AUDIO_DEV_HAS_ALSA 1\n","source":"_posts/交叉编译pjsip.md","raw":"---\ntitle: 交叉编译pjsip\ndate: 2017-05-12 17:06:20\ntags:\n---\n\n\n##说明\n&emsp;PJSIP是一种以C语言编写的免费开源多媒体通信库，实现基于标准的协议，如SIP，SDP，RTP，STUN，TURN和ICE。它将信令协议（SIP）与丰富的多媒体框架和NAT穿越功能相结合，成为可移植的高级API，适用于从台式机，嵌入式系统到手机等几乎任何类型的系统。\n\n官方网址为[http://www.pjsip.org/](http://www.pjsip.org/)\n\n##修改编译配置文件\n配置文件路径为\n\npjproject-2.4.5\\pjlib\\include\\pj\\config_site.h\n\n添加以下宏定义\n\t\n\t#define PJMEDIA_AUDIO_DEV_HAS_ALSA\t\t1\n\t#undef PJMEDIA_AUDIO_DEV_HAS_PORTAUDIO\n\t#define PJMEDIA_AUDIO_DEV_HAS_PORTAUDIO\t\t0\n\t#include <pj/config_site_sample.h>\n\t\n\t#define PJMEDIA_RESAMPLE_NONE   1\n\t#define PJMEDIA_HAS_SPEEX_AEC   0\n\t#define PJMEDIA_HAS_VIDEO   0\n\t#define PJMEDIA_CONF_USE_SWITCH_BOARD 1\n\n\n\n##编译安装\n用的是  pjproject-2.4.5版本\n\n直接在源码目录下执行以下指令\n\n\t./configure --prefix=/usr/local/arm_linux_4.2 --host=arm-linux  LIBS=-ldl\n\t\n\tmake dep\n\t\n\tmake\n\n##运行例子程序\n![view](http://ohjvpki1b.bkt.clouddn.com/build_pjsip.png)\n\n##音频驱动切换\n\n&emsp;Linux音频驱动分为alsa和oss，oss是比较旧的驱动，pjsip支持这两种音频驱动，默认是oss，蓝天门口机的内核使用的是alsa驱动，运行例子程序的时候会出现以下问题。\n\n![view](http://ohjvpki1b.bkt.clouddn.com/pjsip_device.png)\n###解决方法\n修改config_site.h文件  在pjproject-2.4.5\\pjlib\\include\\pj目录下\n\n增加\n\t#define PJMEDIA_AUDIO_DEV_HAS_ALSA 1\n","slug":"交叉编译pjsip","published":1,"updated":"2017-09-21T02:35:21.626Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7tuhpp3000bnd5l6qi3pirb","content":"<p>##说明<br>&emsp;PJSIP是一种以C语言编写的免费开源多媒体通信库，实现基于标准的协议，如SIP，SDP，RTP，STUN，TURN和ICE。它将信令协议（SIP）与丰富的多媒体框架和NAT穿越功能相结合，成为可移植的高级API，适用于从台式机，嵌入式系统到手机等几乎任何类型的系统。</p>\n<p>官方网址为<a href=\"http://www.pjsip.org/\" target=\"_blank\" rel=\"external\">http://www.pjsip.org/</a></p>\n<p>##修改编译配置文件<br>配置文件路径为</p>\n<p>pjproject-2.4.5\\pjlib\\include\\pj\\config_site.h</p>\n<p>添加以下宏定义</p>\n<pre><code>#define PJMEDIA_AUDIO_DEV_HAS_ALSA        1\n#undef PJMEDIA_AUDIO_DEV_HAS_PORTAUDIO\n#define PJMEDIA_AUDIO_DEV_HAS_PORTAUDIO        0\n#include &lt;pj/config_site_sample.h&gt;\n\n#define PJMEDIA_RESAMPLE_NONE   1\n#define PJMEDIA_HAS_SPEEX_AEC   0\n#define PJMEDIA_HAS_VIDEO   0\n#define PJMEDIA_CONF_USE_SWITCH_BOARD 1\n</code></pre><p>##编译安装<br>用的是  pjproject-2.4.5版本</p>\n<p>直接在源码目录下执行以下指令</p>\n<pre><code>./configure --prefix=/usr/local/arm_linux_4.2 --host=arm-linux  LIBS=-ldl\n\nmake dep\n\nmake\n</code></pre><p>##运行例子程序<br><img src=\"http://ohjvpki1b.bkt.clouddn.com/build_pjsip.png\" alt=\"view\"></p>\n<p>##音频驱动切换</p>\n<p>&emsp;Linux音频驱动分为alsa和oss，oss是比较旧的驱动，pjsip支持这两种音频驱动，默认是oss，蓝天门口机的内核使用的是alsa驱动，运行例子程序的时候会出现以下问题。</p>\n<p><img src=\"http://ohjvpki1b.bkt.clouddn.com/pjsip_device.png\" alt=\"view\"></p>\n<p>###解决方法<br>修改config_site.h文件  在pjproject-2.4.5\\pjlib\\include\\pj目录下</p>\n<p>增加</p>\n<pre><code>#define PJMEDIA_AUDIO_DEV_HAS_ALSA 1\n</code></pre>","excerpt":"","more":"<p>##说明<br>&emsp;PJSIP是一种以C语言编写的免费开源多媒体通信库，实现基于标准的协议，如SIP，SDP，RTP，STUN，TURN和ICE。它将信令协议（SIP）与丰富的多媒体框架和NAT穿越功能相结合，成为可移植的高级API，适用于从台式机，嵌入式系统到手机等几乎任何类型的系统。</p>\n<p>官方网址为<a href=\"http://www.pjsip.org/\">http://www.pjsip.org/</a></p>\n<p>##修改编译配置文件<br>配置文件路径为</p>\n<p>pjproject-2.4.5\\pjlib\\include\\pj\\config_site.h</p>\n<p>添加以下宏定义</p>\n<pre><code>#define PJMEDIA_AUDIO_DEV_HAS_ALSA        1\n#undef PJMEDIA_AUDIO_DEV_HAS_PORTAUDIO\n#define PJMEDIA_AUDIO_DEV_HAS_PORTAUDIO        0\n#include &lt;pj/config_site_sample.h&gt;\n\n#define PJMEDIA_RESAMPLE_NONE   1\n#define PJMEDIA_HAS_SPEEX_AEC   0\n#define PJMEDIA_HAS_VIDEO   0\n#define PJMEDIA_CONF_USE_SWITCH_BOARD 1\n</code></pre><p>##编译安装<br>用的是  pjproject-2.4.5版本</p>\n<p>直接在源码目录下执行以下指令</p>\n<pre><code>./configure --prefix=/usr/local/arm_linux_4.2 --host=arm-linux  LIBS=-ldl\n\nmake dep\n\nmake\n</code></pre><p>##运行例子程序<br><img src=\"http://ohjvpki1b.bkt.clouddn.com/build_pjsip.png\" alt=\"view\"></p>\n<p>##音频驱动切换</p>\n<p>&emsp;Linux音频驱动分为alsa和oss，oss是比较旧的驱动，pjsip支持这两种音频驱动，默认是oss，蓝天门口机的内核使用的是alsa驱动，运行例子程序的时候会出现以下问题。</p>\n<p><img src=\"http://ohjvpki1b.bkt.clouddn.com/pjsip_device.png\" alt=\"view\"></p>\n<p>###解决方法<br>修改config_site.h文件  在pjproject-2.4.5\\pjlib\\include\\pj目录下</p>\n<p>增加</p>\n<pre><code>#define PJMEDIA_AUDIO_DEV_HAS_ALSA 1\n</code></pre>"},{"title":"使用android studio查看andrdoid源码","date":"2017-04-12T09:06:20.000Z","_content":"\n#说明\n为了查看android源码，之前使用Source Insight查看源码，然后发现使用android studio查看源码也挺方便的。\n\n\n##使环境变量生效\n进入android源码目录执行以下指令\n\n\tsource ./build/envsetup.sh \n编译完整个源码后执行以下指令编译idegen模\n\n\tmmm development/tools/idegen/\n提示以下信息则编译成功\n\n\t...... #### make completed successfully (7 seconds) ####\n\n接着执行以下脚本\n\n\tdevelopment/tools/idegen/idegen.sh\n提示以下信息则编译成功\n\n\tRead excludes: 21ms Traversed tree: 194799ms\n\n\n以上指令执行成功后会在源码目录下生成相应的工程文件`android.ipr`，然后打开android studio打开工程，使用`android.ipr`导入整个源码。","source":"_posts/使用android studio查看andrdoid源码.md","raw":"---\ntitle: 使用android studio查看andrdoid源码\ndate: 2017-04-12 17:06:20\ntags:\n---\n\n#说明\n为了查看android源码，之前使用Source Insight查看源码，然后发现使用android studio查看源码也挺方便的。\n\n\n##使环境变量生效\n进入android源码目录执行以下指令\n\n\tsource ./build/envsetup.sh \n编译完整个源码后执行以下指令编译idegen模\n\n\tmmm development/tools/idegen/\n提示以下信息则编译成功\n\n\t...... #### make completed successfully (7 seconds) ####\n\n接着执行以下脚本\n\n\tdevelopment/tools/idegen/idegen.sh\n提示以下信息则编译成功\n\n\tRead excludes: 21ms Traversed tree: 194799ms\n\n\n以上指令执行成功后会在源码目录下生成相应的工程文件`android.ipr`，然后打开android studio打开工程，使用`android.ipr`导入整个源码。","slug":"使用android studio查看andrdoid源码","published":1,"updated":"2017-09-21T02:35:21.626Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7tuhpp5000cnd5lnws561d1","content":"<p>#说明<br>为了查看android源码，之前使用Source Insight查看源码，然后发现使用android studio查看源码也挺方便的。</p>\n<p>##使环境变量生效<br>进入android源码目录执行以下指令</p>\n<pre><code>source ./build/envsetup.sh \n</code></pre><p>编译完整个源码后执行以下指令编译idegen模</p>\n<pre><code>mmm development/tools/idegen/\n</code></pre><p>提示以下信息则编译成功</p>\n<pre><code>...... #### make completed successfully (7 seconds) ####\n</code></pre><p>接着执行以下脚本</p>\n<pre><code>development/tools/idegen/idegen.sh\n</code></pre><p>提示以下信息则编译成功</p>\n<pre><code>Read excludes: 21ms Traversed tree: 194799ms\n</code></pre><p>以上指令执行成功后会在源码目录下生成相应的工程文件<code>android.ipr</code>，然后打开android studio打开工程，使用<code>android.ipr</code>导入整个源码。</p>\n","excerpt":"","more":"<p>#说明<br>为了查看android源码，之前使用Source Insight查看源码，然后发现使用android studio查看源码也挺方便的。</p>\n<p>##使环境变量生效<br>进入android源码目录执行以下指令</p>\n<pre><code>source ./build/envsetup.sh \n</code></pre><p>编译完整个源码后执行以下指令编译idegen模</p>\n<pre><code>mmm development/tools/idegen/\n</code></pre><p>提示以下信息则编译成功</p>\n<pre><code>...... #### make completed successfully (7 seconds) ####\n</code></pre><p>接着执行以下脚本</p>\n<pre><code>development/tools/idegen/idegen.sh\n</code></pre><p>提示以下信息则编译成功</p>\n<pre><code>Read excludes: 21ms Traversed tree: 194799ms\n</code></pre><p>以上指令执行成功后会在源码目录下生成相应的工程文件<code>android.ipr</code>，然后打开android studio打开工程，使用<code>android.ipr</code>导入整个源码。</p>\n"},{"title":"使用docker搭建android源码编译环境","date":"2017-06-07T09:06:20.000Z","_content":"\n\n##说明\n&emsp;由于工作原因要对android源码进行编译，用于修改底层驱动，对系统进行定制。但是编译过程中要使用特定ubuntu版本和gcc版本，所以会比较麻烦。当时第一反映是安装VMware虚拟机，装一个指定版本然后将源码拷贝进去再编译，该方法是可行的。后来才发现很麻烦，虚拟机很占用空间，于是决定使用docker试试，实验了一番，还真可以，方便占用存储小，启动起来快。\n\n##环境\n主机：Ubuntu 16.04.2 LTS  64位  16G内存 500G硬盘  16个内核\n\ndocker版本: 17.03.0-ce\n\ndocke镜像：ubuntu12.04 64位\n##同步镜像\n\n\tsudo docker pull registry.cn-shenzhen.aliyuncs.com/qusir/ubuntu12.04_msm8909:0.1\n\n以上镜像我已经定制好了的版本ubuntu12.04 64位，安装好了依赖项和gcc，可以直接使用msm8909高通平台编译。\n\n##修改后保存镜像\n\n###docker提交镜像\n先查看运行镜像的ID，不要将镜像停止运行，然后用以下命令\n\n\t速冻docker commit 61412230ae46 registry.cn-hangzhou.aliyuncs.com/qusir/liang\n\n###添加镜像\n\tsudo docker tag 70838701e83a registry.cn-hangzhou.aliyuncs.com/qusir/liang:0.1\n\n###推送镜像\n\tsudo docker push registry.cn-hangzhou.aliyuncs.com/qusir/liang:0.1\n##编译源码\n###启动镜像，映射目录\n\n\tdocker run -it --rm -v /home/liang/data:/data registry.cn-shenzhen.aliyuncs.com/qusir/ubuntu12.04_msm8909 bash\n\n将主机上的`/home/liang/data`的目录映射到docke的`/data`目录下\n\n###编译源码\n初始化环境变量\n\n\tsource ./build/envsetup.sh \n选择编译选项\n\n\tlunch\n\n选择\n\n\t34. msm8909-userdebug\n开始编译\n\n\tmake -j8\n\n###关闭镜像\n\tCtrl+D退出镜像","source":"_posts/使用docker搭建android源码编译环境.md","raw":"---\ntitle: 使用docker搭建android源码编译环境\ndate: 2017-06-07 17:06:20\ntags:\n---\n\n\n##说明\n&emsp;由于工作原因要对android源码进行编译，用于修改底层驱动，对系统进行定制。但是编译过程中要使用特定ubuntu版本和gcc版本，所以会比较麻烦。当时第一反映是安装VMware虚拟机，装一个指定版本然后将源码拷贝进去再编译，该方法是可行的。后来才发现很麻烦，虚拟机很占用空间，于是决定使用docker试试，实验了一番，还真可以，方便占用存储小，启动起来快。\n\n##环境\n主机：Ubuntu 16.04.2 LTS  64位  16G内存 500G硬盘  16个内核\n\ndocker版本: 17.03.0-ce\n\ndocke镜像：ubuntu12.04 64位\n##同步镜像\n\n\tsudo docker pull registry.cn-shenzhen.aliyuncs.com/qusir/ubuntu12.04_msm8909:0.1\n\n以上镜像我已经定制好了的版本ubuntu12.04 64位，安装好了依赖项和gcc，可以直接使用msm8909高通平台编译。\n\n##修改后保存镜像\n\n###docker提交镜像\n先查看运行镜像的ID，不要将镜像停止运行，然后用以下命令\n\n\t速冻docker commit 61412230ae46 registry.cn-hangzhou.aliyuncs.com/qusir/liang\n\n###添加镜像\n\tsudo docker tag 70838701e83a registry.cn-hangzhou.aliyuncs.com/qusir/liang:0.1\n\n###推送镜像\n\tsudo docker push registry.cn-hangzhou.aliyuncs.com/qusir/liang:0.1\n##编译源码\n###启动镜像，映射目录\n\n\tdocker run -it --rm -v /home/liang/data:/data registry.cn-shenzhen.aliyuncs.com/qusir/ubuntu12.04_msm8909 bash\n\n将主机上的`/home/liang/data`的目录映射到docke的`/data`目录下\n\n###编译源码\n初始化环境变量\n\n\tsource ./build/envsetup.sh \n选择编译选项\n\n\tlunch\n\n选择\n\n\t34. msm8909-userdebug\n开始编译\n\n\tmake -j8\n\n###关闭镜像\n\tCtrl+D退出镜像","slug":"使用docker搭建android源码编译环境","published":1,"updated":"2017-09-21T02:35:21.626Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7tuhpp7000dnd5lzd386pzu","content":"<p>##说明<br>&emsp;由于工作原因要对android源码进行编译，用于修改底层驱动，对系统进行定制。但是编译过程中要使用特定ubuntu版本和gcc版本，所以会比较麻烦。当时第一反映是安装VMware虚拟机，装一个指定版本然后将源码拷贝进去再编译，该方法是可行的。后来才发现很麻烦，虚拟机很占用空间，于是决定使用docker试试，实验了一番，还真可以，方便占用存储小，启动起来快。</p>\n<p>##环境<br>主机：Ubuntu 16.04.2 LTS  64位  16G内存 500G硬盘  16个内核</p>\n<p>docker版本: 17.03.0-ce</p>\n<p>docke镜像：ubuntu12.04 64位</p>\n<p>##同步镜像</p>\n<pre><code>sudo docker pull registry.cn-shenzhen.aliyuncs.com/qusir/ubuntu12.04_msm8909:0.1\n</code></pre><p>以上镜像我已经定制好了的版本ubuntu12.04 64位，安装好了依赖项和gcc，可以直接使用msm8909高通平台编译。</p>\n<p>##修改后保存镜像</p>\n<p>###docker提交镜像<br>先查看运行镜像的ID，不要将镜像停止运行，然后用以下命令</p>\n<pre><code>速冻docker commit 61412230ae46 registry.cn-hangzhou.aliyuncs.com/qusir/liang\n</code></pre><p>###添加镜像<br>    sudo docker tag 70838701e83a registry.cn-hangzhou.aliyuncs.com/qusir/liang:0.1</p>\n<p>###推送镜像<br>    sudo docker push registry.cn-hangzhou.aliyuncs.com/qusir/liang:0.1</p>\n<p>##编译源码</p>\n<p>###启动镜像，映射目录</p>\n<pre><code>docker run -it --rm -v /home/liang/data:/data registry.cn-shenzhen.aliyuncs.com/qusir/ubuntu12.04_msm8909 bash\n</code></pre><p>将主机上的<code>/home/liang/data</code>的目录映射到docke的<code>/data</code>目录下</p>\n<p>###编译源码<br>初始化环境变量</p>\n<pre><code>source ./build/envsetup.sh \n</code></pre><p>选择编译选项</p>\n<pre><code>lunch\n</code></pre><p>选择</p>\n<pre><code>34. msm8909-userdebug\n</code></pre><p>开始编译</p>\n<pre><code>make -j8\n</code></pre><p>###关闭镜像<br>    Ctrl+D退出镜像</p>\n","excerpt":"","more":"<p>##说明<br>&emsp;由于工作原因要对android源码进行编译，用于修改底层驱动，对系统进行定制。但是编译过程中要使用特定ubuntu版本和gcc版本，所以会比较麻烦。当时第一反映是安装VMware虚拟机，装一个指定版本然后将源码拷贝进去再编译，该方法是可行的。后来才发现很麻烦，虚拟机很占用空间，于是决定使用docker试试，实验了一番，还真可以，方便占用存储小，启动起来快。</p>\n<p>##环境<br>主机：Ubuntu 16.04.2 LTS  64位  16G内存 500G硬盘  16个内核</p>\n<p>docker版本: 17.03.0-ce</p>\n<p>docke镜像：ubuntu12.04 64位</p>\n<p>##同步镜像</p>\n<pre><code>sudo docker pull registry.cn-shenzhen.aliyuncs.com/qusir/ubuntu12.04_msm8909:0.1\n</code></pre><p>以上镜像我已经定制好了的版本ubuntu12.04 64位，安装好了依赖项和gcc，可以直接使用msm8909高通平台编译。</p>\n<p>##修改后保存镜像</p>\n<p>###docker提交镜像<br>先查看运行镜像的ID，不要将镜像停止运行，然后用以下命令</p>\n<pre><code>速冻docker commit 61412230ae46 registry.cn-hangzhou.aliyuncs.com/qusir/liang\n</code></pre><p>###添加镜像<br>    sudo docker tag 70838701e83a registry.cn-hangzhou.aliyuncs.com/qusir/liang:0.1</p>\n<p>###推送镜像<br>    sudo docker push registry.cn-hangzhou.aliyuncs.com/qusir/liang:0.1</p>\n<p>##编译源码</p>\n<p>###启动镜像，映射目录</p>\n<pre><code>docker run -it --rm -v /home/liang/data:/data registry.cn-shenzhen.aliyuncs.com/qusir/ubuntu12.04_msm8909 bash\n</code></pre><p>将主机上的<code>/home/liang/data</code>的目录映射到docke的<code>/data</code>目录下</p>\n<p>###编译源码<br>初始化环境变量</p>\n<pre><code>source ./build/envsetup.sh \n</code></pre><p>选择编译选项</p>\n<pre><code>lunch\n</code></pre><p>选择</p>\n<pre><code>34. msm8909-userdebug\n</code></pre><p>开始编译</p>\n<pre><code>make -j8\n</code></pre><p>###关闭镜像<br>    Ctrl+D退出镜像</p>\n"},{"title":"使用ngrok实现内网穿透","date":"2017-04-21T09:06:20.000Z","_content":"\n\n##安装依赖项\n\n\tsudo apt-get install supervisor\n\t\n\tsudo apt-get install mercurial git gcc \n\n##安装go\n\ttar -C /usr/local -xzf go1.8.1.linux-amd64.tar.gz\n\techo \"export PATH=$PATH:/usr/local/go/bin\" >> ~/.bashrc\n\t\n\t使环境变量生效\n\n\tsource .bashrc \n##同步代码\n\tgit clone https://github.com/inconshreveable/ngrok.git\n\n##生成密匙\n\n\topenssl genrsa -out rootCA.key 2048\n\topenssl req -x509 -new -nodes -key rootCA.key -subj \"/CN=lianghuanhan.club\" -days 5000 -out rootCA.pem\n\topenssl genrsa -out device.key 2048\n\topenssl req -new -key device.key -subj \"/CN=lianghuanhan.club\" -out device.csr\n\topenssl x509 -req -in device.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out device.crt -days 5000\n  \n##复制密匙\n\n\tcp rootCA.pem assets/client/tls/ngrokroot.crt\n\tcp device.crt assets/server/tls/snakeoil.crt\n\tcp device.key assets/server/tls/snakeoil.key\n\n##编译源码\n\tmake release-server\n\t\n\tmake release-client\n\t\n\t编译win7 64位客户端\n\t\n\tGOOS=windows GOARCH=amd64 make release-client\n \n##启动服务器端\n\n\t./ngrokd -domain=\"lianghuanhan.club\" -httpAddr=\":8088\" -httpsAddr=\":8089\"\n \n##启动客户端\n\t编辑配置文件\n \tvim ngrok.cfg \n \t写入以下数据\n\n\tserver_addr: lianghuanhan:4443\n\ttrust_host_root_certs: false\n\n###linux 64位客户端\n\t监听http 80端口\n\t./ngrok -subdomain pub -proto=http -config=ngrok.cfg 80\n\t监听tcp 22端口\n\t./ngrok -subdomain pub -proto=tcp -config=ngrok.cfg 22\n\n###windows 64位客户端\n\t监听远程桌面端口\n\tngrok.exe -subdomain pub -proto=tcp -config=ngrok.cfg 3389\n\n\n##在浏览器中输入：localhost:4040 (在客户端上)\n\n可以查看所有的请求情况！\n\n![view](http://ohjvpki1b.bkt.clouddn.com/ngrok-demo1.jpg)\n\n##注意事项\n\n1.为lianghuanhan.club添加dns解析\n\n添加两条A记录：lianghuanhan.club和*.lianghuanhan.club，指向lianghuanhan.club所在的服务器ip。\n\n2.客户端ngrok.cfg中server_addr后的值必须严格与-domain以及证书中的`\"/CN=lianghuanhan.club\"`相同，必须先生成证书，拷贝到相应目录，再编译代码。","source":"_posts/使用ngrok实现内网穿透.md","raw":"---\ntitle: 使用ngrok实现内网穿透\ndate: 2017-04-21 17:06:20\ntags:\n---\n\n\n##安装依赖项\n\n\tsudo apt-get install supervisor\n\t\n\tsudo apt-get install mercurial git gcc \n\n##安装go\n\ttar -C /usr/local -xzf go1.8.1.linux-amd64.tar.gz\n\techo \"export PATH=$PATH:/usr/local/go/bin\" >> ~/.bashrc\n\t\n\t使环境变量生效\n\n\tsource .bashrc \n##同步代码\n\tgit clone https://github.com/inconshreveable/ngrok.git\n\n##生成密匙\n\n\topenssl genrsa -out rootCA.key 2048\n\topenssl req -x509 -new -nodes -key rootCA.key -subj \"/CN=lianghuanhan.club\" -days 5000 -out rootCA.pem\n\topenssl genrsa -out device.key 2048\n\topenssl req -new -key device.key -subj \"/CN=lianghuanhan.club\" -out device.csr\n\topenssl x509 -req -in device.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out device.crt -days 5000\n  \n##复制密匙\n\n\tcp rootCA.pem assets/client/tls/ngrokroot.crt\n\tcp device.crt assets/server/tls/snakeoil.crt\n\tcp device.key assets/server/tls/snakeoil.key\n\n##编译源码\n\tmake release-server\n\t\n\tmake release-client\n\t\n\t编译win7 64位客户端\n\t\n\tGOOS=windows GOARCH=amd64 make release-client\n \n##启动服务器端\n\n\t./ngrokd -domain=\"lianghuanhan.club\" -httpAddr=\":8088\" -httpsAddr=\":8089\"\n \n##启动客户端\n\t编辑配置文件\n \tvim ngrok.cfg \n \t写入以下数据\n\n\tserver_addr: lianghuanhan:4443\n\ttrust_host_root_certs: false\n\n###linux 64位客户端\n\t监听http 80端口\n\t./ngrok -subdomain pub -proto=http -config=ngrok.cfg 80\n\t监听tcp 22端口\n\t./ngrok -subdomain pub -proto=tcp -config=ngrok.cfg 22\n\n###windows 64位客户端\n\t监听远程桌面端口\n\tngrok.exe -subdomain pub -proto=tcp -config=ngrok.cfg 3389\n\n\n##在浏览器中输入：localhost:4040 (在客户端上)\n\n可以查看所有的请求情况！\n\n![view](http://ohjvpki1b.bkt.clouddn.com/ngrok-demo1.jpg)\n\n##注意事项\n\n1.为lianghuanhan.club添加dns解析\n\n添加两条A记录：lianghuanhan.club和*.lianghuanhan.club，指向lianghuanhan.club所在的服务器ip。\n\n2.客户端ngrok.cfg中server_addr后的值必须严格与-domain以及证书中的`\"/CN=lianghuanhan.club\"`相同，必须先生成证书，拷贝到相应目录，再编译代码。","slug":"使用ngrok实现内网穿透","published":1,"updated":"2017-09-21T02:35:21.626Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7tuhpp8000end5lv46qztws","content":"<p>##安装依赖项</p>\n<pre><code>sudo apt-get install supervisor\n\nsudo apt-get install mercurial git gcc \n</code></pre><p>##安装go<br>    tar -C /usr/local -xzf go1.8.1.linux-amd64.tar.gz<br>    echo “export PATH=$PATH:/usr/local/go/bin” &gt;&gt; ~/.bashrc</p>\n<pre><code>使环境变量生效\n\nsource .bashrc \n</code></pre><p>##同步代码<br>    git clone <a href=\"https://github.com/inconshreveable/ngrok.git\" target=\"_blank\" rel=\"external\">https://github.com/inconshreveable/ngrok.git</a></p>\n<p>##生成密匙</p>\n<pre><code>openssl genrsa -out rootCA.key 2048\nopenssl req -x509 -new -nodes -key rootCA.key -subj &quot;/CN=lianghuanhan.club&quot; -days 5000 -out rootCA.pem\nopenssl genrsa -out device.key 2048\nopenssl req -new -key device.key -subj &quot;/CN=lianghuanhan.club&quot; -out device.csr\nopenssl x509 -req -in device.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out device.crt -days 5000\n</code></pre><p>##复制密匙</p>\n<pre><code>cp rootCA.pem assets/client/tls/ngrokroot.crt\ncp device.crt assets/server/tls/snakeoil.crt\ncp device.key assets/server/tls/snakeoil.key\n</code></pre><p>##编译源码<br>    make release-server</p>\n<pre><code>make release-client\n\n编译win7 64位客户端\n\nGOOS=windows GOARCH=amd64 make release-client\n</code></pre><p>##启动服务器端</p>\n<pre><code>./ngrokd -domain=&quot;lianghuanhan.club&quot; -httpAddr=&quot;:8088&quot; -httpsAddr=&quot;:8089&quot;\n</code></pre><p>##启动客户端<br>    编辑配置文件<br>     vim ngrok.cfg<br>     写入以下数据</p>\n<pre><code>server_addr: lianghuanhan:4443\ntrust_host_root_certs: false\n</code></pre><p>###linux 64位客户端<br>    监听http 80端口<br>    ./ngrok -subdomain pub -proto=http -config=ngrok.cfg 80<br>    监听tcp 22端口<br>    ./ngrok -subdomain pub -proto=tcp -config=ngrok.cfg 22</p>\n<p>###windows 64位客户端<br>    监听远程桌面端口<br>    ngrok.exe -subdomain pub -proto=tcp -config=ngrok.cfg 3389</p>\n<p>##在浏览器中输入：localhost:4040 (在客户端上)</p>\n<p>可以查看所有的请求情况！</p>\n<p><img src=\"http://ohjvpki1b.bkt.clouddn.com/ngrok-demo1.jpg\" alt=\"view\"></p>\n<p>##注意事项</p>\n<p>1.为lianghuanhan.club添加dns解析</p>\n<p>添加两条A记录：lianghuanhan.club和*.lianghuanhan.club，指向lianghuanhan.club所在的服务器ip。</p>\n<p>2.客户端ngrok.cfg中server_addr后的值必须严格与-domain以及证书中的<code>&quot;/CN=lianghuanhan.club&quot;</code>相同，必须先生成证书，拷贝到相应目录，再编译代码。</p>\n","excerpt":"","more":"<p>##安装依赖项</p>\n<pre><code>sudo apt-get install supervisor\n\nsudo apt-get install mercurial git gcc \n</code></pre><p>##安装go<br>    tar -C /usr/local -xzf go1.8.1.linux-amd64.tar.gz<br>    echo “export PATH=$PATH:/usr/local/go/bin” &gt;&gt; ~/.bashrc</p>\n<pre><code>使环境变量生效\n\nsource .bashrc \n</code></pre><p>##同步代码<br>    git clone <a href=\"https://github.com/inconshreveable/ngrok.git\">https://github.com/inconshreveable/ngrok.git</a></p>\n<p>##生成密匙</p>\n<pre><code>openssl genrsa -out rootCA.key 2048\nopenssl req -x509 -new -nodes -key rootCA.key -subj &quot;/CN=lianghuanhan.club&quot; -days 5000 -out rootCA.pem\nopenssl genrsa -out device.key 2048\nopenssl req -new -key device.key -subj &quot;/CN=lianghuanhan.club&quot; -out device.csr\nopenssl x509 -req -in device.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out device.crt -days 5000\n</code></pre><p>##复制密匙</p>\n<pre><code>cp rootCA.pem assets/client/tls/ngrokroot.crt\ncp device.crt assets/server/tls/snakeoil.crt\ncp device.key assets/server/tls/snakeoil.key\n</code></pre><p>##编译源码<br>    make release-server</p>\n<pre><code>make release-client\n\n编译win7 64位客户端\n\nGOOS=windows GOARCH=amd64 make release-client\n</code></pre><p>##启动服务器端</p>\n<pre><code>./ngrokd -domain=&quot;lianghuanhan.club&quot; -httpAddr=&quot;:8088&quot; -httpsAddr=&quot;:8089&quot;\n</code></pre><p>##启动客户端<br>    编辑配置文件<br>     vim ngrok.cfg<br>     写入以下数据</p>\n<pre><code>server_addr: lianghuanhan:4443\ntrust_host_root_certs: false\n</code></pre><p>###linux 64位客户端<br>    监听http 80端口<br>    ./ngrok -subdomain pub -proto=http -config=ngrok.cfg 80<br>    监听tcp 22端口<br>    ./ngrok -subdomain pub -proto=tcp -config=ngrok.cfg 22</p>\n<p>###windows 64位客户端<br>    监听远程桌面端口<br>    ngrok.exe -subdomain pub -proto=tcp -config=ngrok.cfg 3389</p>\n<p>##在浏览器中输入：localhost:4040 (在客户端上)</p>\n<p>可以查看所有的请求情况！</p>\n<p><img src=\"http://ohjvpki1b.bkt.clouddn.com/ngrok-demo1.jpg\" alt=\"view\"></p>\n<p>##注意事项</p>\n<p>1.为lianghuanhan.club添加dns解析</p>\n<p>添加两条A记录：lianghuanhan.club和*.lianghuanhan.club，指向lianghuanhan.club所在的服务器ip。</p>\n<p>2.客户端ngrok.cfg中server_addr后的值必须严格与-domain以及证书中的<code>&quot;/CN=lianghuanhan.club&quot;</code>相同，必须先生成证书，拷贝到相应目录，再编译代码。</p>\n"},{"title":"高通MSM8909的gpio驱动编程","date":"2017-06-09T09:06:20.000Z","_content":"\n\n#接收gpio信号输入\n\n##1. 平台相关配置文件msm8909-mtp.dtsi文件中找到gpio_keys节，增加蓝字相关内容\n![msm8909_gpio5.png](http://ohjvpki1b.bkt.clouddn.com/msm8909_gpio5.png)\n\n##2. 引脚相关配置文件msm8909-pinctrl.dtsi文件中找到tlmm_gpio_key节，增加或更改红字相关内容\n![msm8909_gpio6.png](http://ohjvpki1b.bkt.clouddn.com/msm8909_gpio6.png\n)\n\n##3. device\\qcom\\msm8909\\gpio-keys.kl中增加键盘扫描码对应的键盘码\n键盘码是Android系统收到底层驱动提交的扫描码后，向App发送的键盘码，比如本例\n\n\tkey 77    F7  \n扫描码对应给App的键盘码是F7，F7对应的值在frameworks\\base\\core\\java\\android\\view\\KeyEvent.java有现成定义:\n public static final int KEYCODE_F7 =137;\n另外，在root过的Android设备上直接更改system\\usr\\keylayout\\gpio-keys.kl文件，可以为设备的按键直接更改功能。\n    \n`议将整个源代码重新编译一下，在进行烧写。`\n\n##gpio口对应关系\nmsm8909-mtp.dtsi文件\n![msm8909_gpio1](http://ohjvpki1b.bkt.clouddn.com/msm8909_gpio1.png)\nmsm8909-pinctrl.dtsi文件\n![msm8909_gpio2.png](http://ohjvpki1b.bkt.clouddn.com/msm8909_gpio2.png)\n原理图上对应管脚\n![msm8909_gpio3.png](http://ohjvpki1b.bkt.clouddn.com/msm8909_gpio3.png)\n硬件手册对应gpio口\n![msm8909_gpio4.png](http://ohjvpki1b.bkt.clouddn.com/msm8909_gpio4.png)\n##说明\n配置好gpio后，重新编译源代码烧写系统，短接该gpio口就可以在java侧收到F7键盘消息，通过该消息监听该gpio口输入。\n\n监听键盘消息参照\n[http://www.cnblogs.com/QUSIR/p/6245848.html](http://www.cnblogs.com/QUSIR/p/6245848.html)\n","source":"_posts/高通MSM8909的gpio驱动编程.md","raw":"---\ntitle: 高通MSM8909的gpio驱动编程\ndate: 2017-06-09 17:06:20\ntags:\n---\n\n\n#接收gpio信号输入\n\n##1. 平台相关配置文件msm8909-mtp.dtsi文件中找到gpio_keys节，增加蓝字相关内容\n![msm8909_gpio5.png](http://ohjvpki1b.bkt.clouddn.com/msm8909_gpio5.png)\n\n##2. 引脚相关配置文件msm8909-pinctrl.dtsi文件中找到tlmm_gpio_key节，增加或更改红字相关内容\n![msm8909_gpio6.png](http://ohjvpki1b.bkt.clouddn.com/msm8909_gpio6.png\n)\n\n##3. device\\qcom\\msm8909\\gpio-keys.kl中增加键盘扫描码对应的键盘码\n键盘码是Android系统收到底层驱动提交的扫描码后，向App发送的键盘码，比如本例\n\n\tkey 77    F7  \n扫描码对应给App的键盘码是F7，F7对应的值在frameworks\\base\\core\\java\\android\\view\\KeyEvent.java有现成定义:\n public static final int KEYCODE_F7 =137;\n另外，在root过的Android设备上直接更改system\\usr\\keylayout\\gpio-keys.kl文件，可以为设备的按键直接更改功能。\n    \n`议将整个源代码重新编译一下，在进行烧写。`\n\n##gpio口对应关系\nmsm8909-mtp.dtsi文件\n![msm8909_gpio1](http://ohjvpki1b.bkt.clouddn.com/msm8909_gpio1.png)\nmsm8909-pinctrl.dtsi文件\n![msm8909_gpio2.png](http://ohjvpki1b.bkt.clouddn.com/msm8909_gpio2.png)\n原理图上对应管脚\n![msm8909_gpio3.png](http://ohjvpki1b.bkt.clouddn.com/msm8909_gpio3.png)\n硬件手册对应gpio口\n![msm8909_gpio4.png](http://ohjvpki1b.bkt.clouddn.com/msm8909_gpio4.png)\n##说明\n配置好gpio后，重新编译源代码烧写系统，短接该gpio口就可以在java侧收到F7键盘消息，通过该消息监听该gpio口输入。\n\n监听键盘消息参照\n[http://www.cnblogs.com/QUSIR/p/6245848.html](http://www.cnblogs.com/QUSIR/p/6245848.html)\n","slug":"高通MSM8909的gpio驱动编程","published":1,"updated":"2017-09-21T02:35:21.626Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7tuhppa000fnd5li2ofex65","content":"<p>#接收gpio信号输入</p>\n<p>##1. 平台相关配置文件msm8909-mtp.dtsi文件中找到gpio_keys节，增加蓝字相关内容<br><img src=\"http://ohjvpki1b.bkt.clouddn.com/msm8909_gpio5.png\" alt=\"msm8909_gpio5.png\"></p>\n<p>##2. 引脚相关配置文件msm8909-pinctrl.dtsi文件中找到tlmm_gpio_key节，增加或更改红字相关内容<br><img src=\"http://ohjvpki1b.bkt.clouddn.com/msm8909_gpio6.png\" alt=\"msm8909_gpio6.png\"></p>\n<p>##3. device\\qcom\\msm8909\\gpio-keys.kl中增加键盘扫描码对应的键盘码<br>键盘码是Android系统收到底层驱动提交的扫描码后，向App发送的键盘码，比如本例</p>\n<pre><code>key 77    F7  \n</code></pre><p>扫描码对应给App的键盘码是F7，F7对应的值在frameworks\\base\\core\\java\\android\\view\\KeyEvent.java有现成定义:<br> public static final int KEYCODE_F7 =137;<br>另外，在root过的Android设备上直接更改system\\usr\\keylayout\\gpio-keys.kl文件，可以为设备的按键直接更改功能。</p>\n<p><code>议将整个源代码重新编译一下，在进行烧写。</code></p>\n<p>##gpio口对应关系<br>msm8909-mtp.dtsi文件<br><img src=\"http://ohjvpki1b.bkt.clouddn.com/msm8909_gpio1.png\" alt=\"msm8909_gpio1\"><br>msm8909-pinctrl.dtsi文件<br><img src=\"http://ohjvpki1b.bkt.clouddn.com/msm8909_gpio2.png\" alt=\"msm8909_gpio2.png\"><br>原理图上对应管脚<br><img src=\"http://ohjvpki1b.bkt.clouddn.com/msm8909_gpio3.png\" alt=\"msm8909_gpio3.png\"><br>硬件手册对应gpio口<br><img src=\"http://ohjvpki1b.bkt.clouddn.com/msm8909_gpio4.png\" alt=\"msm8909_gpio4.png\"></p>\n<p>##说明<br>配置好gpio后，重新编译源代码烧写系统，短接该gpio口就可以在java侧收到F7键盘消息，通过该消息监听该gpio口输入。</p>\n<p>监听键盘消息参照<br><a href=\"http://www.cnblogs.com/QUSIR/p/6245848.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/QUSIR/p/6245848.html</a></p>\n","excerpt":"","more":"<p>#接收gpio信号输入</p>\n<p>##1. 平台相关配置文件msm8909-mtp.dtsi文件中找到gpio_keys节，增加蓝字相关内容<br><img src=\"http://ohjvpki1b.bkt.clouddn.com/msm8909_gpio5.png\" alt=\"msm8909_gpio5.png\"></p>\n<p>##2. 引脚相关配置文件msm8909-pinctrl.dtsi文件中找到tlmm_gpio_key节，增加或更改红字相关内容<br><img src=\"http://ohjvpki1b.bkt.clouddn.com/msm8909_gpio6.png\" alt=\"msm8909_gpio6.png\"></p>\n<p>##3. device\\qcom\\msm8909\\gpio-keys.kl中增加键盘扫描码对应的键盘码<br>键盘码是Android系统收到底层驱动提交的扫描码后，向App发送的键盘码，比如本例</p>\n<pre><code>key 77    F7  \n</code></pre><p>扫描码对应给App的键盘码是F7，F7对应的值在frameworks\\base\\core\\java\\android\\view\\KeyEvent.java有现成定义:<br> public static final int KEYCODE_F7 =137;<br>另外，在root过的Android设备上直接更改system\\usr\\keylayout\\gpio-keys.kl文件，可以为设备的按键直接更改功能。</p>\n<p><code>议将整个源代码重新编译一下，在进行烧写。</code></p>\n<p>##gpio口对应关系<br>msm8909-mtp.dtsi文件<br><img src=\"http://ohjvpki1b.bkt.clouddn.com/msm8909_gpio1.png\" alt=\"msm8909_gpio1\"><br>msm8909-pinctrl.dtsi文件<br><img src=\"http://ohjvpki1b.bkt.clouddn.com/msm8909_gpio2.png\" alt=\"msm8909_gpio2.png\"><br>原理图上对应管脚<br><img src=\"http://ohjvpki1b.bkt.clouddn.com/msm8909_gpio3.png\" alt=\"msm8909_gpio3.png\"><br>硬件手册对应gpio口<br><img src=\"http://ohjvpki1b.bkt.clouddn.com/msm8909_gpio4.png\" alt=\"msm8909_gpio4.png\"></p>\n<p>##说明<br>配置好gpio后，重新编译源代码烧写系统，短接该gpio口就可以在java侧收到F7键盘消息，通过该消息监听该gpio口输入。</p>\n<p>监听键盘消息参照<br><a href=\"http://www.cnblogs.com/QUSIR/p/6245848.html\">http://www.cnblogs.com/QUSIR/p/6245848.html</a></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}